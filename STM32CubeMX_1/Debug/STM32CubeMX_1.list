
STM32CubeMX_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e78  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  08005008  08005008  00015008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005268  08005268  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005268  08005268  00015268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005270  08005270  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005270  08005270  00015270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005274  08005274  00015274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005278  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000144  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00001004  200001b4  200001b4  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001074f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ada  00000000  00000000  000307ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e30  00000000  00000000  000332d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d20  00000000  00000000  00034100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024e27  00000000  00000000  00034e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014640  00000000  00000000  00059c47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de0dc  00000000  00000000  0006e287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014c363  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004188  00000000  00000000  0014c3b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004ff0 	.word	0x08004ff0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004ff0 	.word	0x08004ff0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08a      	sub	sp, #40	; 0x28
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800057a:	f107 0310 	add.w	r3, r7, #16
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]
 8000588:	611a      	str	r2, [r3, #16]
 800058a:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 800058c:	463b      	mov	r3, r7
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000598:	4b2c      	ldr	r3, [pc, #176]	; (800064c <MX_ADC1_Init+0xd8>)
 800059a:	4a2d      	ldr	r2, [pc, #180]	; (8000650 <MX_ADC1_Init+0xdc>)
 800059c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800059e:	4b2b      	ldr	r3, [pc, #172]	; (800064c <MX_ADC1_Init+0xd8>)
 80005a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005a6:	4b29      	ldr	r3, [pc, #164]	; (800064c <MX_ADC1_Init+0xd8>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005ac:	4b27      	ldr	r3, [pc, #156]	; (800064c <MX_ADC1_Init+0xd8>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005b2:	4b26      	ldr	r3, [pc, #152]	; (800064c <MX_ADC1_Init+0xd8>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005b8:	4b24      	ldr	r3, [pc, #144]	; (800064c <MX_ADC1_Init+0xd8>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005c0:	4b22      	ldr	r3, [pc, #136]	; (800064c <MX_ADC1_Init+0xd8>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005c6:	4b21      	ldr	r3, [pc, #132]	; (800064c <MX_ADC1_Init+0xd8>)
 80005c8:	4a22      	ldr	r2, [pc, #136]	; (8000654 <MX_ADC1_Init+0xe0>)
 80005ca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005cc:	4b1f      	ldr	r3, [pc, #124]	; (800064c <MX_ADC1_Init+0xd8>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005d2:	4b1e      	ldr	r3, [pc, #120]	; (800064c <MX_ADC1_Init+0xd8>)
 80005d4:	2201      	movs	r2, #1
 80005d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005d8:	4b1c      	ldr	r3, [pc, #112]	; (800064c <MX_ADC1_Init+0xd8>)
 80005da:	2200      	movs	r2, #0
 80005dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005e0:	4b1a      	ldr	r3, [pc, #104]	; (800064c <MX_ADC1_Init+0xd8>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005e6:	4819      	ldr	r0, [pc, #100]	; (800064c <MX_ADC1_Init+0xd8>)
 80005e8:	f000 fd38 	bl	800105c <HAL_ADC_Init>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_ADC1_Init+0x82>
  {
    Error_Handler();
 80005f2:	f000 fae9 	bl	8000bc8 <Error_Handler>
  }

  /** Configure the analog watchdog
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_ALL_REG;
 80005f6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80005fa:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.HighThreshold = 2000;
 80005fc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000600:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.LowThreshold = 1000;
 8000602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000606:	61bb      	str	r3, [r7, #24]
  AnalogWDGConfig.ITMode = ENABLE;
 8000608:	2301      	movs	r3, #1
 800060a:	f887 3020 	strb.w	r3, [r7, #32]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 800060e:	f107 0310 	add.w	r3, r7, #16
 8000612:	4619      	mov	r1, r3
 8000614:	480d      	ldr	r0, [pc, #52]	; (800064c <MX_ADC1_Init+0xd8>)
 8000616:	f001 f947 	bl	80018a8 <HAL_ADC_AnalogWDGConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000620:	f000 fad2 	bl	8000bc8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000624:	2310      	movs	r3, #16
 8000626:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000628:	2301      	movs	r3, #1
 800062a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000630:	463b      	mov	r3, r7
 8000632:	4619      	mov	r1, r3
 8000634:	4805      	ldr	r0, [pc, #20]	; (800064c <MX_ADC1_Init+0xd8>)
 8000636:	f000 ffd9 	bl	80015ec <HAL_ADC_ConfigChannel>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8000640:	f000 fac2 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000644:	bf00      	nop
 8000646:	3728      	adds	r7, #40	; 0x28
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	2000008c 	.word	0x2000008c
 8000650:	40012000 	.word	0x40012000
 8000654:	0f000001 	.word	0x0f000001

08000658 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a0e      	ldr	r2, [pc, #56]	; (80006a0 <HAL_ADC_MspInit+0x48>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d115      	bne.n	8000696 <HAL_ADC_MspInit+0x3e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
 800066e:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <HAL_ADC_MspInit+0x4c>)
 8000670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000672:	4a0c      	ldr	r2, [pc, #48]	; (80006a4 <HAL_ADC_MspInit+0x4c>)
 8000674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000678:	6453      	str	r3, [r2, #68]	; 0x44
 800067a:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <HAL_ADC_MspInit+0x4c>)
 800067c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800067e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 9, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	2109      	movs	r1, #9
 800068a:	2012      	movs	r0, #18
 800068c:	f001 fc08 	bl	8001ea0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000690:	2012      	movs	r0, #18
 8000692:	f001 fc31 	bl	8001ef8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000696:	bf00      	nop
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40012000 	.word	0x40012000
 80006a4:	40023800 	.word	0x40023800

080006a8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80006b0:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006b4:	4907      	ldr	r1, [pc, #28]	; (80006d4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4313      	orrs	r3, r2
 80006ba:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80006bc:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80006be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	4013      	ands	r3, r2
 80006c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006c6:	68fb      	ldr	r3, [r7, #12]
}
 80006c8:	bf00      	nop
 80006ca:	3714      	adds	r7, #20
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	40023800 	.word	0x40023800

080006d8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	041a      	lsls	r2, r3, #16
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	619a      	str	r2, [r3, #24]
}
 80006ea:	bf00      	nop
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
	...

080006f8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fe:	463b      	mov	r3, r7
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]
 800070c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOE);
 800070e:	2010      	movs	r0, #16
 8000710:	f7ff ffca 	bl	80006a8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000714:	2004      	movs	r0, #4
 8000716:	f7ff ffc7 	bl	80006a8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 800071a:	2080      	movs	r0, #128	; 0x80
 800071c:	f7ff ffc4 	bl	80006a8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000720:	2001      	movs	r0, #1
 8000722:	f7ff ffc1 	bl	80006a8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000726:	2002      	movs	r0, #2
 8000728:	f7ff ffbe 	bl	80006a8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800072c:	2008      	movs	r0, #8
 800072e:	f7ff ffbb 	bl	80006a8 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED_GPIO_Port, LED_Pin);
 8000732:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000736:	4829      	ldr	r0, [pc, #164]	; (80007dc <MX_GPIO_Init+0xe4>)
 8000738:	f7ff ffce 	bl	80006d8 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5
 800073c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000740:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8|LL_GPIO_PIN_9
                          |LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12|LL_GPIO_PIN_13
                          |LL_GPIO_PIN_14|LL_GPIO_PIN_15|LL_GPIO_PIN_0|LL_GPIO_PIN_1;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000742:	2303      	movs	r3, #3
 8000744:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800074a:	463b      	mov	r3, r7
 800074c:	4619      	mov	r1, r3
 800074e:	4824      	ldr	r0, [pc, #144]	; (80007e0 <MX_GPIO_Init+0xe8>)
 8000750:	f003 fac2 	bl	8003cd8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15|LL_GPIO_PIN_0
 8000754:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000758:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_4
                          |LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7|LL_GPIO_PIN_8
                          |LL_GPIO_PIN_9|LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800075a:	2303      	movs	r3, #3
 800075c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800075e:	2300      	movs	r3, #0
 8000760:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000762:	463b      	mov	r3, r7
 8000764:	4619      	mov	r1, r3
 8000766:	481f      	ldr	r0, [pc, #124]	; (80007e4 <MX_GPIO_Init+0xec>)
 8000768:	f003 fab6 	bl	8003cd8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3
 800076c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000770:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7
                          |LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10|LL_GPIO_PIN_11
                          |LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000772:	2303      	movs	r3, #3
 8000774:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077a:	463b      	mov	r3, r7
 800077c:	4619      	mov	r1, r3
 800077e:	481a      	ldr	r0, [pc, #104]	; (80007e8 <MX_GPIO_Init+0xf0>)
 8000780:	f003 faaa 	bl	8003cd8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_10
 8000784:	f64f 433f 	movw	r3, #64575	; 0xfc3f
 8000788:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_11|LL_GPIO_PIN_12|LL_GPIO_PIN_13|LL_GPIO_PIN_14
                          |LL_GPIO_PIN_15|LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800078a:	2303      	movs	r3, #3
 800078c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000792:	463b      	mov	r3, r7
 8000794:	4619      	mov	r1, r3
 8000796:	4815      	ldr	r0, [pc, #84]	; (80007ec <MX_GPIO_Init+0xf4>)
 8000798:	f003 fa9e 	bl	8003cd8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9|LL_GPIO_PIN_10|LL_GPIO_PIN_11
 800079c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80007a0:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15|LL_GPIO_PIN_0
                          |LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3|LL_GPIO_PIN_4
                          |LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80007a2:	2303      	movs	r3, #3
 80007a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007aa:	463b      	mov	r3, r7
 80007ac:	4619      	mov	r1, r3
 80007ae:	480b      	ldr	r0, [pc, #44]	; (80007dc <MX_GPIO_Init+0xe4>)
 80007b0:	f003 fa92 	bl	8003cd8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_Pin;
 80007b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80007ba:	2301      	movs	r3, #1
 80007bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80007be:	2300      	movs	r3, #0
 80007c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80007ca:	463b      	mov	r3, r7
 80007cc:	4619      	mov	r1, r3
 80007ce:	4803      	ldr	r0, [pc, #12]	; (80007dc <MX_GPIO_Init+0xe4>)
 80007d0:	f003 fa82 	bl	8003cd8 <LL_GPIO_Init>

}
 80007d4:	bf00      	nop
 80007d6:	3718      	adds	r7, #24
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40020c00 	.word	0x40020c00
 80007e0:	40021000 	.word	0x40021000
 80007e4:	40020800 	.word	0x40020800
 80007e8:	40020000 	.word	0x40020000
 80007ec:	40020400 	.word	0x40020400

080007f0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007f4:	4b13      	ldr	r3, [pc, #76]	; (8000844 <MX_I2C1_Init+0x54>)
 80007f6:	4a14      	ldr	r2, [pc, #80]	; (8000848 <MX_I2C1_Init+0x58>)
 80007f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80007fa:	4b12      	ldr	r3, [pc, #72]	; (8000844 <MX_I2C1_Init+0x54>)
 80007fc:	4a13      	ldr	r2, [pc, #76]	; (800084c <MX_I2C1_Init+0x5c>)
 80007fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8000800:	4b10      	ldr	r3, [pc, #64]	; (8000844 <MX_I2C1_Init+0x54>)
 8000802:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000806:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 36;
 8000808:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <MX_I2C1_Init+0x54>)
 800080a:	2224      	movs	r2, #36	; 0x24
 800080c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800080e:	4b0d      	ldr	r3, [pc, #52]	; (8000844 <MX_I2C1_Init+0x54>)
 8000810:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000814:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000816:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <MX_I2C1_Init+0x54>)
 8000818:	2200      	movs	r2, #0
 800081a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <MX_I2C1_Init+0x54>)
 800081e:	2200      	movs	r2, #0
 8000820:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000822:	4b08      	ldr	r3, [pc, #32]	; (8000844 <MX_I2C1_Init+0x54>)
 8000824:	2200      	movs	r2, #0
 8000826:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <MX_I2C1_Init+0x54>)
 800082a:	2280      	movs	r2, #128	; 0x80
 800082c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800082e:	4805      	ldr	r0, [pc, #20]	; (8000844 <MX_I2C1_Init+0x54>)
 8000830:	f001 fefa 	bl	8002628 <HAL_I2C_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 800083a:	f000 f9c5 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	200000d4 	.word	0x200000d4
 8000848:	40005400 	.word	0x40005400
 800084c:	00061a80 	.word	0x00061a80

08000850 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08a      	sub	sp, #40	; 0x28
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a19      	ldr	r2, [pc, #100]	; (80008d4 <HAL_I2C_MspInit+0x84>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d12c      	bne.n	80008cc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
 8000876:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <HAL_I2C_MspInit+0x88>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a17      	ldr	r2, [pc, #92]	; (80008d8 <HAL_I2C_MspInit+0x88>)
 800087c:	f043 0302 	orr.w	r3, r3, #2
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <HAL_I2C_MspInit+0x88>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0302 	and.w	r3, r3, #2
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800088e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000892:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000894:	2312      	movs	r3, #18
 8000896:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089c:	2303      	movs	r3, #3
 800089e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008a0:	2304      	movs	r3, #4
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4619      	mov	r1, r3
 80008aa:	480c      	ldr	r0, [pc, #48]	; (80008dc <HAL_I2C_MspInit+0x8c>)
 80008ac:	f001 fbda 	bl	8002064 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <HAL_I2C_MspInit+0x88>)
 80008b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b8:	4a07      	ldr	r2, [pc, #28]	; (80008d8 <HAL_I2C_MspInit+0x88>)
 80008ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008be:	6413      	str	r3, [r2, #64]	; 0x40
 80008c0:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <HAL_I2C_MspInit+0x88>)
 80008c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008cc:	bf00      	nop
 80008ce:	3728      	adds	r7, #40	; 0x28
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40005400 	.word	0x40005400
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40020400 	.word	0x40020400

080008e0 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80008e4:	4b05      	ldr	r3, [pc, #20]	; (80008fc <LL_RCC_HSE_Enable+0x1c>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a04      	ldr	r2, [pc, #16]	; (80008fc <LL_RCC_HSE_Enable+0x1c>)
 80008ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008ee:	6013      	str	r3, [r2, #0]
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800

08000900 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000904:	4b07      	ldr	r3, [pc, #28]	; (8000924 <LL_RCC_HSE_IsReady+0x24>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800090c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000910:	bf0c      	ite	eq
 8000912:	2301      	moveq	r3, #1
 8000914:	2300      	movne	r3, #0
 8000916:	b2db      	uxtb	r3, r3
}
 8000918:	4618      	mov	r0, r3
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800

08000928 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <LL_RCC_SetSysClkSource+0x24>)
 8000932:	689b      	ldr	r3, [r3, #8]
 8000934:	f023 0203 	bic.w	r2, r3, #3
 8000938:	4904      	ldr	r1, [pc, #16]	; (800094c <LL_RCC_SetSysClkSource+0x24>)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4313      	orrs	r3, r2
 800093e:	608b      	str	r3, [r1, #8]
}
 8000940:	bf00      	nop
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	40023800 	.word	0x40023800

08000950 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000954:	4b04      	ldr	r3, [pc, #16]	; (8000968 <LL_RCC_GetSysClkSource+0x18>)
 8000956:	689b      	ldr	r3, [r3, #8]
 8000958:	f003 030c 	and.w	r3, r3, #12
}
 800095c:	4618      	mov	r0, r3
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	40023800 	.word	0x40023800

0800096c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <LL_RCC_SetAHBPrescaler+0x24>)
 8000976:	689b      	ldr	r3, [r3, #8]
 8000978:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800097c:	4904      	ldr	r1, [pc, #16]	; (8000990 <LL_RCC_SetAHBPrescaler+0x24>)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4313      	orrs	r3, r2
 8000982:	608b      	str	r3, [r1, #8]
}
 8000984:	bf00      	nop
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr
 8000990:	40023800 	.word	0x40023800

08000994 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <LL_RCC_SetAPB1Prescaler+0x24>)
 800099e:	689b      	ldr	r3, [r3, #8]
 80009a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80009a4:	4904      	ldr	r1, [pc, #16]	; (80009b8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4313      	orrs	r3, r2
 80009aa:	608b      	str	r3, [r1, #8]
}
 80009ac:	bf00      	nop
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	40023800 	.word	0x40023800

080009bc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80009c6:	689b      	ldr	r3, [r3, #8]
 80009c8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80009cc:	4904      	ldr	r1, [pc, #16]	; (80009e0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	608b      	str	r3, [r1, #8]
}
 80009d4:	bf00      	nop
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	40023800 	.word	0x40023800

080009e4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <LL_RCC_PLL_Enable+0x1c>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a04      	ldr	r2, [pc, #16]	; (8000a00 <LL_RCC_PLL_Enable+0x1c>)
 80009ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80009f2:	6013      	str	r3, [r2, #0]
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	40023800 	.word	0x40023800

08000a04 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000a08:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <LL_RCC_PLL_IsReady+0x24>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000a14:	bf0c      	ite	eq
 8000a16:	2301      	moveq	r3, #1
 8000a18:	2300      	movne	r3, #0
 8000a1a:	b2db      	uxtb	r3, r3
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	40023800 	.word	0x40023800

08000a2c <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
 8000a38:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000a3c:	685a      	ldr	r2, [r3, #4]
 8000a3e:	4b0d      	ldr	r3, [pc, #52]	; (8000a74 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8000a40:	4013      	ands	r3, r2
 8000a42:	68f9      	ldr	r1, [r7, #12]
 8000a44:	68ba      	ldr	r2, [r7, #8]
 8000a46:	4311      	orrs	r1, r2
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	0192      	lsls	r2, r2, #6
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	4908      	ldr	r1, [pc, #32]	; (8000a70 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000a50:	4313      	orrs	r3, r2
 8000a52:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000a5c:	4904      	ldr	r1, [pc, #16]	; (8000a70 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8000a64:	bf00      	nop
 8000a66:	3714      	adds	r7, #20
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	40023800 	.word	0x40023800
 8000a74:	ffbf8000 	.word	0xffbf8000

08000a78 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000a80:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <LL_FLASH_SetLatency+0x24>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f023 0207 	bic.w	r2, r3, #7
 8000a88:	4904      	ldr	r1, [pc, #16]	; (8000a9c <LL_FLASH_SetLatency+0x24>)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	600b      	str	r3, [r1, #0]
}
 8000a90:	bf00      	nop
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	40023c00 	.word	0x40023c00

08000aa0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000aa4:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <LL_FLASH_GetLatency+0x18>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f003 0307 	and.w	r3, r3, #7
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	40023c00 	.word	0x40023c00

08000abc <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8000acc:	4904      	ldr	r1, [pc, #16]	; (8000ae0 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	600b      	str	r3, [r1, #0]
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	40007000 	.word	0x40007000

08000ae4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t i = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aee:	f000 fa43 	bl	8000f78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000af2:	f000 f815 	bl	8000b20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000af6:	f7ff fdff 	bl	80006f8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000afa:	f7ff fd3b 	bl	8000574 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000afe:	f7ff fe77 	bl	80007f0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000b02:	f000 f993 	bl	8000e2c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("hola mundo desde STM32CUBEMX\r\n");
 8000b06:	4804      	ldr	r0, [pc, #16]	; (8000b18 <main+0x34>)
 8000b08:	f003 faf4 	bl	80040f4 <puts>

  if(1){
	  assert_failed(__FILE__, __LINE__);
 8000b0c:	2178      	movs	r1, #120	; 0x78
 8000b0e:	4803      	ldr	r0, [pc, #12]	; (8000b1c <main+0x38>)
 8000b10:	f000 f860 	bl	8000bd4 <assert_failed>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <main+0x30>
 8000b16:	bf00      	nop
 8000b18:	08005008 	.word	0x08005008
 8000b1c:	08005028 	.word	0x08005028

08000b20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 8000b24:	2005      	movs	r0, #5
 8000b26:	f7ff ffa7 	bl	8000a78 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8000b2a:	bf00      	nop
 8000b2c:	f7ff ffb8 	bl	8000aa0 <LL_FLASH_GetLatency>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b05      	cmp	r3, #5
 8000b34:	d1fa      	bne.n	8000b2c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000b36:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000b3a:	f7ff ffbf 	bl	8000abc <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 8000b3e:	f7ff fecf 	bl	80008e0 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000b42:	bf00      	nop
 8000b44:	f7ff fedc 	bl	8000900 <LL_RCC_HSE_IsReady>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d1fa      	bne.n	8000b44 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_4, 168, LL_RCC_PLLP_DIV_2);
 8000b4e:	2300      	movs	r3, #0
 8000b50:	22a8      	movs	r2, #168	; 0xa8
 8000b52:	2104      	movs	r1, #4
 8000b54:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000b58:	f7ff ff68 	bl	8000a2c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000b5c:	f7ff ff42 	bl	80009e4 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000b60:	bf00      	nop
 8000b62:	f7ff ff4f 	bl	8000a04 <LL_RCC_PLL_IsReady>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d1fa      	bne.n	8000b62 <SystemClock_Config+0x42>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	f7ff fefd 	bl	800096c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8000b72:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000b76:	f7ff ff0d 	bl	8000994 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8000b7a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000b7e:	f7ff ff1d 	bl	80009bc <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000b82:	2002      	movs	r0, #2
 8000b84:	f7ff fed0 	bl	8000928 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000b88:	bf00      	nop
 8000b8a:	f7ff fee1 	bl	8000950 <LL_RCC_GetSysClkSource>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b08      	cmp	r3, #8
 8000b92:	d1fa      	bne.n	8000b8a <SystemClock_Config+0x6a>
  {

  }
  LL_SetSystemCoreClock(168000000);
 8000b94:	4806      	ldr	r0, [pc, #24]	; (8000bb0 <SystemClock_Config+0x90>)
 8000b96:	f003 f9e5 	bl	8003f64 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000b9a:	200f      	movs	r0, #15
 8000b9c:	f000 fa0e 	bl	8000fbc <HAL_InitTick>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000ba6:	f000 f80f 	bl	8000bc8 <Error_Handler>
  }
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	0a037a00 	.word	0x0a037a00

08000bb4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]

}
 8000bbc:	bf00      	nop
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bcc:	b672      	cpsid	i
}
 8000bce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <Error_Handler+0x8>
	...

08000bd4 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	printf("Wrong parameters value: file %s on line %d\r\n", file, line);
 8000bde:	683a      	ldr	r2, [r7, #0]
 8000be0:	6879      	ldr	r1, [r7, #4]
 8000be2:	4803      	ldr	r0, [pc, #12]	; (8000bf0 <assert_failed+0x1c>)
 8000be4:	f003 fa00 	bl	8003fe8 <iprintf>
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000be8:	bf00      	nop
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	0800503c 	.word	0x0800503c

08000bf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <HAL_MspInit+0x4c>)
 8000c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c02:	4a0f      	ldr	r2, [pc, #60]	; (8000c40 <HAL_MspInit+0x4c>)
 8000c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c08:	6453      	str	r3, [r2, #68]	; 0x44
 8000c0a:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <HAL_MspInit+0x4c>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	603b      	str	r3, [r7, #0]
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <HAL_MspInit+0x4c>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	4a08      	ldr	r2, [pc, #32]	; (8000c40 <HAL_MspInit+0x4c>)
 8000c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c24:	6413      	str	r3, [r2, #64]	; 0x40
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_MspInit+0x4c>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	40023800 	.word	0x40023800

08000c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <NMI_Handler+0x4>

08000c4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4e:	e7fe      	b.n	8000c4e <HardFault_Handler+0x4>

08000c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <MemManage_Handler+0x4>

08000c56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5a:	e7fe      	b.n	8000c5a <BusFault_Handler+0x4>

08000c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <UsageFault_Handler+0x4>

08000c62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c90:	f000 f9c4 	bl	800101c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000c9c:	4802      	ldr	r0, [pc, #8]	; (8000ca8 <ADC_IRQHandler+0x10>)
 8000c9e:	f000 fb49 	bl	8001334 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	2000008c 	.word	0x2000008c

08000cac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000cb0:	4802      	ldr	r0, [pc, #8]	; (8000cbc <USART1_IRQHandler+0x10>)
 8000cb2:	f001 ff97 	bl	8002be4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	2000012c 	.word	0x2000012c

08000cc0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ccc:	2300      	movs	r3, #0
 8000cce:	617b      	str	r3, [r7, #20]
 8000cd0:	e00a      	b.n	8000ce8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cd2:	f3af 8000 	nop.w
 8000cd6:	4601      	mov	r1, r0
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	1c5a      	adds	r2, r3, #1
 8000cdc:	60ba      	str	r2, [r7, #8]
 8000cde:	b2ca      	uxtb	r2, r1
 8000ce0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	617b      	str	r3, [r7, #20]
 8000ce8:	697a      	ldr	r2, [r7, #20]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	dbf0      	blt.n	8000cd2 <_read+0x12>
  }

  return len;
 8000cf0:	687b      	ldr	r3, [r7, #4]
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3718      	adds	r7, #24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b086      	sub	sp, #24
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	60f8      	str	r0, [r7, #12]
 8000d02:	60b9      	str	r1, [r7, #8]
 8000d04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
 8000d0a:	e009      	b.n	8000d20 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	1c5a      	adds	r2, r3, #1
 8000d10:	60ba      	str	r2, [r7, #8]
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	617b      	str	r3, [r7, #20]
 8000d20:	697a      	ldr	r2, [r7, #20]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	dbf1      	blt.n	8000d0c <_write+0x12>
  }
  return len;
 8000d28:	687b      	ldr	r3, [r7, #4]
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3718      	adds	r7, #24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <_close>:

int _close(int file)
{
 8000d32:	b480      	push	{r7}
 8000d34:	b083      	sub	sp, #12
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr

08000d4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	b083      	sub	sp, #12
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
 8000d52:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d5a:	605a      	str	r2, [r3, #4]
  return 0;
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <_isatty>:

int _isatty(int file)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	b083      	sub	sp, #12
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d72:	2301      	movs	r3, #1
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d8c:	2300      	movs	r3, #0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3714      	adds	r7, #20
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
	...

08000d9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da4:	4a14      	ldr	r2, [pc, #80]	; (8000df8 <_sbrk+0x5c>)
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <_sbrk+0x60>)
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db0:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <_sbrk+0x64>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d102      	bne.n	8000dbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db8:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <_sbrk+0x64>)
 8000dba:	4a12      	ldr	r2, [pc, #72]	; (8000e04 <_sbrk+0x68>)
 8000dbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dbe:	4b10      	ldr	r3, [pc, #64]	; (8000e00 <_sbrk+0x64>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d207      	bcs.n	8000ddc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dcc:	f003 f8da 	bl	8003f84 <__errno>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dda:	e009      	b.n	8000df0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <_sbrk+0x64>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000de2:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <_sbrk+0x64>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	4a05      	ldr	r2, [pc, #20]	; (8000e00 <_sbrk+0x64>)
 8000dec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dee:	68fb      	ldr	r3, [r7, #12]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3718      	adds	r7, #24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20020000 	.word	0x20020000
 8000dfc:	00000800 	.word	0x00000800
 8000e00:	20000128 	.word	0x20000128
 8000e04:	200001b8 	.word	0x200001b8

08000e08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <SystemInit+0x20>)
 8000e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e12:	4a05      	ldr	r2, [pc, #20]	; (8000e28 <SystemInit+0x20>)
 8000e14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <MX_USART1_UART_Init+0x50>)
 8000e32:	4a13      	ldr	r2, [pc, #76]	; (8000e80 <MX_USART1_UART_Init+0x54>)
 8000e34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000e36:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <MX_USART1_UART_Init+0x50>)
 8000e38:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e3e:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <MX_USART1_UART_Init+0x50>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 8000e44:	4b0d      	ldr	r3, [pc, #52]	; (8000e7c <MX_USART1_UART_Init+0x50>)
 8000e46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e4a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 8000e4c:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <MX_USART1_UART_Init+0x50>)
 8000e4e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000e52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e54:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <MX_USART1_UART_Init+0x50>)
 8000e56:	220c      	movs	r2, #12
 8000e58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e5a:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <MX_USART1_UART_Init+0x50>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <MX_USART1_UART_Init+0x50>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e66:	4805      	ldr	r0, [pc, #20]	; (8000e7c <MX_USART1_UART_Init+0x50>)
 8000e68:	f001 fdde 	bl	8002a28 <HAL_UART_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 8000e72:	f7ff fea9 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	2000012c 	.word	0x2000012c
 8000e80:	40011000 	.word	0x40011000

08000e84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08a      	sub	sp, #40	; 0x28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a1d      	ldr	r2, [pc, #116]	; (8000f18 <HAL_UART_MspInit+0x94>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d133      	bne.n	8000f0e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
 8000eaa:	4b1c      	ldr	r3, [pc, #112]	; (8000f1c <HAL_UART_MspInit+0x98>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eae:	4a1b      	ldr	r2, [pc, #108]	; (8000f1c <HAL_UART_MspInit+0x98>)
 8000eb0:	f043 0310 	orr.w	r3, r3, #16
 8000eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000eb6:	4b19      	ldr	r3, [pc, #100]	; (8000f1c <HAL_UART_MspInit+0x98>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eba:	f003 0310 	and.w	r3, r3, #16
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <HAL_UART_MspInit+0x98>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a14      	ldr	r2, [pc, #80]	; (8000f1c <HAL_UART_MspInit+0x98>)
 8000ecc:	f043 0302 	orr.w	r3, r3, #2
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <HAL_UART_MspInit+0x98>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f003 0302 	and.w	r3, r3, #2
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ede:	23c0      	movs	r3, #192	; 0xc0
 8000ee0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eea:	2303      	movs	r3, #3
 8000eec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000eee:	2307      	movs	r3, #7
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef2:	f107 0314 	add.w	r3, r7, #20
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4809      	ldr	r0, [pc, #36]	; (8000f20 <HAL_UART_MspInit+0x9c>)
 8000efa:	f001 f8b3 	bl	8002064 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 8, 0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2108      	movs	r1, #8
 8000f02:	2025      	movs	r0, #37	; 0x25
 8000f04:	f000 ffcc 	bl	8001ea0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f08:	2025      	movs	r0, #37	; 0x25
 8000f0a:	f000 fff5 	bl	8001ef8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000f0e:	bf00      	nop
 8000f10:	3728      	adds	r7, #40	; 0x28
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40011000 	.word	0x40011000
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40020400 	.word	0x40020400

08000f24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f28:	480d      	ldr	r0, [pc, #52]	; (8000f60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f2a:	490e      	ldr	r1, [pc, #56]	; (8000f64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f2c:	4a0e      	ldr	r2, [pc, #56]	; (8000f68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f30:	e002      	b.n	8000f38 <LoopCopyDataInit>

08000f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f36:	3304      	adds	r3, #4

08000f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f3c:	d3f9      	bcc.n	8000f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3e:	4a0b      	ldr	r2, [pc, #44]	; (8000f6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f40:	4c0b      	ldr	r4, [pc, #44]	; (8000f70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f44:	e001      	b.n	8000f4a <LoopFillZerobss>

08000f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f48:	3204      	adds	r2, #4

08000f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f4c:	d3fb      	bcc.n	8000f46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f4e:	f7ff ff5b 	bl	8000e08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f52:	f003 f81d 	bl	8003f90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f56:	f7ff fdc5 	bl	8000ae4 <main>
  bx  lr    
 8000f5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f64:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f68:	08005278 	.word	0x08005278
  ldr r2, =_sbss
 8000f6c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f70:	200001b4 	.word	0x200001b4

08000f74 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f74:	e7fe      	b.n	8000f74 <CAN1_RX0_IRQHandler>
	...

08000f78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f7c:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <HAL_Init+0x40>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a0d      	ldr	r2, [pc, #52]	; (8000fb8 <HAL_Init+0x40>)
 8000f82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f88:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <HAL_Init+0x40>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <HAL_Init+0x40>)
 8000f8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f94:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <HAL_Init+0x40>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a07      	ldr	r2, [pc, #28]	; (8000fb8 <HAL_Init+0x40>)
 8000f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa0:	2003      	movs	r0, #3
 8000fa2:	f000 ff5d 	bl	8001e60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fa6:	200f      	movs	r0, #15
 8000fa8:	f000 f808 	bl	8000fbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fac:	f7ff fe22 	bl	8000bf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40023c00 	.word	0x40023c00

08000fbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fc4:	4b12      	ldr	r3, [pc, #72]	; (8001010 <HAL_InitTick+0x54>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <HAL_InitTick+0x58>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 ffa4 	bl	8001f28 <HAL_SYSTICK_Config>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e00e      	b.n	8001008 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b0f      	cmp	r3, #15
 8000fee:	d80a      	bhi.n	8001006 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff8:	f000 ff52 	bl	8001ea0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ffc:	4a06      	ldr	r2, [pc, #24]	; (8001018 <HAL_InitTick+0x5c>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001002:	2300      	movs	r3, #0
 8001004:	e000      	b.n	8001008 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
}
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000000 	.word	0x20000000
 8001014:	20000008 	.word	0x20000008
 8001018:	20000004 	.word	0x20000004

0800101c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <HAL_IncTick+0x20>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	461a      	mov	r2, r3
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_IncTick+0x24>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4413      	add	r3, r2
 800102c:	4a04      	ldr	r2, [pc, #16]	; (8001040 <HAL_IncTick+0x24>)
 800102e:	6013      	str	r3, [r2, #0]
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000008 	.word	0x20000008
 8001040:	200001a0 	.word	0x200001a0

08001044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  return uwTick;
 8001048:	4b03      	ldr	r3, [pc, #12]	; (8001058 <HAL_GetTick+0x14>)
 800104a:	681b      	ldr	r3, [r3, #0]
}
 800104c:	4618      	mov	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	200001a0 	.word	0x200001a0

0800105c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001064:	2300      	movs	r3, #0
 8001066:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d101      	bne.n	8001072 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e15c      	b.n	800132c <HAL_ADC_Init+0x2d0>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a8e      	ldr	r2, [pc, #568]	; (80012b0 <HAL_ADC_Init+0x254>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d00e      	beq.n	800109a <HAL_ADC_Init+0x3e>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a8c      	ldr	r2, [pc, #560]	; (80012b4 <HAL_ADC_Init+0x258>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d009      	beq.n	800109a <HAL_ADC_Init+0x3e>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a8b      	ldr	r2, [pc, #556]	; (80012b8 <HAL_ADC_Init+0x25c>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d004      	beq.n	800109a <HAL_ADC_Init+0x3e>
 8001090:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8001094:	4889      	ldr	r0, [pc, #548]	; (80012bc <HAL_ADC_Init+0x260>)
 8001096:	f7ff fd9d 	bl	8000bd4 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d013      	beq.n	80010ca <HAL_ADC_Init+0x6e>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010aa:	d00e      	beq.n	80010ca <HAL_ADC_Init+0x6e>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80010b4:	d009      	beq.n	80010ca <HAL_ADC_Init+0x6e>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80010be:	d004      	beq.n	80010ca <HAL_ADC_Init+0x6e>
 80010c0:	f240 1143 	movw	r1, #323	; 0x143
 80010c4:	487d      	ldr	r0, [pc, #500]	; (80012bc <HAL_ADC_Init+0x260>)
 80010c6:	f7ff fd85 	bl	8000bd4 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d013      	beq.n	80010fa <HAL_ADC_Init+0x9e>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010da:	d00e      	beq.n	80010fa <HAL_ADC_Init+0x9e>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80010e4:	d009      	beq.n	80010fa <HAL_ADC_Init+0x9e>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80010ee:	d004      	beq.n	80010fa <HAL_ADC_Init+0x9e>
 80010f0:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80010f4:	4871      	ldr	r0, [pc, #452]	; (80012bc <HAL_ADC_Init+0x260>)
 80010f6:	f7ff fd6d 	bl	8000bd4 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d008      	beq.n	8001114 <HAL_ADC_Init+0xb8>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	691b      	ldr	r3, [r3, #16]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d004      	beq.n	8001114 <HAL_ADC_Init+0xb8>
 800110a:	f240 1145 	movw	r1, #325	; 0x145
 800110e:	486b      	ldr	r0, [pc, #428]	; (80012bc <HAL_ADC_Init+0x260>)
 8001110:	f7ff fd60 	bl	8000bd4 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	7e1b      	ldrb	r3, [r3, #24]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d008      	beq.n	800112e <HAL_ADC_Init+0xd2>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	7e1b      	ldrb	r3, [r3, #24]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d004      	beq.n	800112e <HAL_ADC_Init+0xd2>
 8001124:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8001128:	4864      	ldr	r0, [pc, #400]	; (80012bc <HAL_ADC_Init+0x260>)
 800112a:	f7ff fd53 	bl	8000bd4 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001132:	2b00      	cmp	r3, #0
 8001134:	d054      	beq.n	80011e0 <HAL_ADC_Init+0x184>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800113a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800113e:	d04f      	beq.n	80011e0 <HAL_ADC_Init+0x184>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001144:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001148:	d04a      	beq.n	80011e0 <HAL_ADC_Init+0x184>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800114e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001152:	d045      	beq.n	80011e0 <HAL_ADC_Init+0x184>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001158:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800115c:	d040      	beq.n	80011e0 <HAL_ADC_Init+0x184>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001162:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8001166:	d03b      	beq.n	80011e0 <HAL_ADC_Init+0x184>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800116c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8001170:	d036      	beq.n	80011e0 <HAL_ADC_Init+0x184>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001176:	f1b3 6fe0 	cmp.w	r3, #117440512	; 0x7000000
 800117a:	d031      	beq.n	80011e0 <HAL_ADC_Init+0x184>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001180:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001184:	d02c      	beq.n	80011e0 <HAL_ADC_Init+0x184>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800118a:	f1b3 6f10 	cmp.w	r3, #150994944	; 0x9000000
 800118e:	d027      	beq.n	80011e0 <HAL_ADC_Init+0x184>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001194:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8001198:	d022      	beq.n	80011e0 <HAL_ADC_Init+0x184>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800119e:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 80011a2:	d01d      	beq.n	80011e0 <HAL_ADC_Init+0x184>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80011ac:	d018      	beq.n	80011e0 <HAL_ADC_Init+0x184>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b2:	f1b3 6f50 	cmp.w	r3, #218103808	; 0xd000000
 80011b6:	d013      	beq.n	80011e0 <HAL_ADC_Init+0x184>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011bc:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 80011c0:	d00e      	beq.n	80011e0 <HAL_ADC_Init+0x184>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80011ca:	d009      	beq.n	80011e0 <HAL_ADC_Init+0x184>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d0:	4a3b      	ldr	r2, [pc, #236]	; (80012c0 <HAL_ADC_Init+0x264>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d004      	beq.n	80011e0 <HAL_ADC_Init+0x184>
 80011d6:	f240 1147 	movw	r1, #327	; 0x147
 80011da:	4838      	ldr	r0, [pc, #224]	; (80012bc <HAL_ADC_Init+0x260>)
 80011dc:	f7ff fcfa 	bl	8000bd4 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d009      	beq.n	80011fc <HAL_ADC_Init+0x1a0>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011f0:	d004      	beq.n	80011fc <HAL_ADC_Init+0x1a0>
 80011f2:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80011f6:	4831      	ldr	r0, [pc, #196]	; (80012bc <HAL_ADC_Init+0x260>)
 80011f8:	f7ff fcec 	bl	8000bd4 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	69db      	ldr	r3, [r3, #28]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d003      	beq.n	800120c <HAL_ADC_Init+0x1b0>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	69db      	ldr	r3, [r3, #28]
 8001208:	2b10      	cmp	r3, #16
 800120a:	d904      	bls.n	8001216 <HAL_ADC_Init+0x1ba>
 800120c:	f240 1149 	movw	r1, #329	; 0x149
 8001210:	482a      	ldr	r0, [pc, #168]	; (80012bc <HAL_ADC_Init+0x260>)
 8001212:	f7ff fcdf 	bl	8000bd4 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800121c:	2b00      	cmp	r3, #0
 800121e:	d009      	beq.n	8001234 <HAL_ADC_Init+0x1d8>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001226:	2b01      	cmp	r3, #1
 8001228:	d004      	beq.n	8001234 <HAL_ADC_Init+0x1d8>
 800122a:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800122e:	4823      	ldr	r0, [pc, #140]	; (80012bc <HAL_ADC_Init+0x260>)
 8001230:	f7ff fcd0 	bl	8000bd4 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	695b      	ldr	r3, [r3, #20]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d00c      	beq.n	8001256 <HAL_ADC_Init+0x1fa>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	695b      	ldr	r3, [r3, #20]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d008      	beq.n	8001256 <HAL_ADC_Init+0x1fa>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	695b      	ldr	r3, [r3, #20]
 8001248:	2b02      	cmp	r3, #2
 800124a:	d004      	beq.n	8001256 <HAL_ADC_Init+0x1fa>
 800124c:	f240 114b 	movw	r1, #331	; 0x14b
 8001250:	481a      	ldr	r0, [pc, #104]	; (80012bc <HAL_ADC_Init+0x260>)
 8001252:	f7ff fcbf 	bl	8000bd4 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f893 3020 	ldrb.w	r3, [r3, #32]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d009      	beq.n	8001274 <HAL_ADC_Init+0x218>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d004      	beq.n	8001274 <HAL_ADC_Init+0x218>
 800126a:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800126e:	4813      	ldr	r0, [pc, #76]	; (80012bc <HAL_ADC_Init+0x260>)
 8001270:	f7ff fcb0 	bl	8000bd4 <assert_failed>
  
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001278:	4a11      	ldr	r2, [pc, #68]	; (80012c0 <HAL_ADC_Init+0x264>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d022      	beq.n	80012c4 <HAL_ADC_Init+0x268>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001282:	2b00      	cmp	r3, #0
 8001284:	d01e      	beq.n	80012c4 <HAL_ADC_Init+0x268>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800128e:	d019      	beq.n	80012c4 <HAL_ADC_Init+0x268>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001294:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001298:	d014      	beq.n	80012c4 <HAL_ADC_Init+0x268>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800129e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80012a2:	d00f      	beq.n	80012c4 <HAL_ADC_Init+0x268>
 80012a4:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80012a8:	4804      	ldr	r0, [pc, #16]	; (80012bc <HAL_ADC_Init+0x260>)
 80012aa:	f7ff fc93 	bl	8000bd4 <assert_failed>
 80012ae:	e009      	b.n	80012c4 <HAL_ADC_Init+0x268>
 80012b0:	40012000 	.word	0x40012000
 80012b4:	40012100 	.word	0x40012100
 80012b8:	40012200 	.word	0x40012200
 80012bc:	0800506c 	.word	0x0800506c
 80012c0:	0f000001 	.word	0x0f000001
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d109      	bne.n	80012e0 <HAL_ADC_Init+0x284>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff f9c3 	bl	8000658 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e4:	f003 0310 	and.w	r3, r3, #16
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d118      	bne.n	800131e <HAL_ADC_Init+0x2c2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012f4:	f023 0302 	bic.w	r3, r3, #2
 80012f8:	f043 0202 	orr.w	r2, r3, #2
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f000 fbc9 	bl	8001a98 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2200      	movs	r2, #0
 800130a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	f023 0303 	bic.w	r3, r3, #3
 8001314:	f043 0201 	orr.w	r2, r3, #1
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	641a      	str	r2, [r3, #64]	; 0x40
 800131c:	e001      	b.n	8001322 <HAL_ADC_Init+0x2c6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800132a:	7bfb      	ldrb	r3, [r7, #15]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	2300      	movs	r3, #0
 8001342:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	7e1b      	ldrb	r3, [r3, #24]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d008      	beq.n	800136e <HAL_ADC_IRQHandler+0x3a>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	7e1b      	ldrb	r3, [r3, #24]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d004      	beq.n	800136e <HAL_ADC_IRQHandler+0x3a>
 8001364:	f240 41b7 	movw	r1, #1207	; 0x4b7
 8001368:	4890      	ldr	r0, [pc, #576]	; (80015ac <HAL_ADC_IRQHandler+0x278>)
 800136a:	f7ff fc33 	bl	8000bd4 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d003      	beq.n	800137e <HAL_ADC_IRQHandler+0x4a>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69db      	ldr	r3, [r3, #28]
 800137a:	2b10      	cmp	r3, #16
 800137c:	d904      	bls.n	8001388 <HAL_ADC_IRQHandler+0x54>
 800137e:	f44f 6197 	mov.w	r1, #1208	; 0x4b8
 8001382:	488a      	ldr	r0, [pc, #552]	; (80015ac <HAL_ADC_IRQHandler+0x278>)
 8001384:	f7ff fc26 	bl	8000bd4 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	695b      	ldr	r3, [r3, #20]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d00c      	beq.n	80013aa <HAL_ADC_IRQHandler+0x76>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	695b      	ldr	r3, [r3, #20]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d008      	beq.n	80013aa <HAL_ADC_IRQHandler+0x76>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	695b      	ldr	r3, [r3, #20]
 800139c:	2b02      	cmp	r3, #2
 800139e:	d004      	beq.n	80013aa <HAL_ADC_IRQHandler+0x76>
 80013a0:	f240 41b9 	movw	r1, #1209	; 0x4b9
 80013a4:	4881      	ldr	r0, [pc, #516]	; (80015ac <HAL_ADC_IRQHandler+0x278>)
 80013a6:	f7ff fc15 	bl	8000bd4 <assert_failed>
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	f003 0320 	and.w	r3, r3, #32
 80013b8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d049      	beq.n	8001454 <HAL_ADC_IRQHandler+0x120>
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d046      	beq.n	8001454 <HAL_ADC_IRQHandler+0x120>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	f003 0310 	and.w	r3, r3, #16
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d105      	bne.n	80013de <HAL_ADC_IRQHandler+0xaa>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d12b      	bne.n	8001444 <HAL_ADC_IRQHandler+0x110>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d127      	bne.n	8001444 <HAL_ADC_IRQHandler+0x110>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d006      	beq.n	8001410 <HAL_ADC_IRQHandler+0xdc>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800140c:	2b00      	cmp	r3, #0
 800140e:	d119      	bne.n	8001444 <HAL_ADC_IRQHandler+0x110>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	685a      	ldr	r2, [r3, #4]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f022 0220 	bic.w	r2, r2, #32
 800141e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001424:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001430:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d105      	bne.n	8001444 <HAL_ADC_IRQHandler+0x110>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143c:	f043 0201 	orr.w	r2, r3, #1
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f000 f8b3 	bl	80015b0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f06f 0212 	mvn.w	r2, #18
 8001452:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f003 0304 	and.w	r3, r3, #4
 800145a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001462:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d057      	beq.n	800151a <HAL_ADC_IRQHandler+0x1e6>
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d054      	beq.n	800151a <HAL_ADC_IRQHandler+0x1e6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001474:	f003 0310 	and.w	r3, r3, #16
 8001478:	2b00      	cmp	r3, #0
 800147a:	d105      	bne.n	8001488 <HAL_ADC_IRQHandler+0x154>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001480:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d139      	bne.n	800150a <HAL_ADC_IRQHandler+0x1d6>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800149c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d006      	beq.n	80014b2 <HAL_ADC_IRQHandler+0x17e>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d12b      	bne.n	800150a <HAL_ADC_IRQHandler+0x1d6>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d124      	bne.n	800150a <HAL_ADC_IRQHandler+0x1d6>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d11d      	bne.n	800150a <HAL_ADC_IRQHandler+0x1d6>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d119      	bne.n	800150a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	685a      	ldr	r2, [r3, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014e4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d105      	bne.n	800150a <HAL_ADC_IRQHandler+0x1d6>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	f043 0201 	orr.w	r2, r3, #1
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f000 fbce 	bl	8001cac <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f06f 020c 	mvn.w	r2, #12
 8001518:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001528:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d017      	beq.n	8001560 <HAL_ADC_IRQHandler+0x22c>
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d014      	beq.n	8001560 <HAL_ADC_IRQHandler+0x22c>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	2b01      	cmp	r3, #1
 8001542:	d10d      	bne.n	8001560 <HAL_ADC_IRQHandler+0x22c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001548:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f000 f837 	bl	80015c4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f06f 0201 	mvn.w	r2, #1
 800155e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f003 0320 	and.w	r3, r3, #32
 8001566:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800156e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d015      	beq.n	80015a2 <HAL_ADC_IRQHandler+0x26e>
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d012      	beq.n	80015a2 <HAL_ADC_IRQHandler+0x26e>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001580:	f043 0202 	orr.w	r2, r3, #2
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f06f 0220 	mvn.w	r2, #32
 8001590:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f000 f820 	bl	80015d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f06f 0220 	mvn.w	r2, #32
 80015a0:	601a      	str	r2, [r3, #0]
  }
}
 80015a2:	bf00      	nop
 80015a4:	3718      	adds	r7, #24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	0800506c 	.word	0x0800506c

080015b0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015f6:	2300      	movs	r3, #0
 80015f8:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2b12      	cmp	r3, #18
 8001600:	d904      	bls.n	800160c <HAL_ADC_ConfigChannel+0x20>
 8001602:	f240 618b 	movw	r1, #1675	; 0x68b
 8001606:	486f      	ldr	r0, [pc, #444]	; (80017c4 <HAL_ADC_ConfigChannel+0x1d8>)
 8001608:	f7ff fae4 	bl	8000bd4 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d003      	beq.n	800161c <HAL_ADC_ConfigChannel+0x30>
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b10      	cmp	r3, #16
 800161a:	d904      	bls.n	8001626 <HAL_ADC_ConfigChannel+0x3a>
 800161c:	f240 618c 	movw	r1, #1676	; 0x68c
 8001620:	4868      	ldr	r0, [pc, #416]	; (80017c4 <HAL_ADC_ConfigChannel+0x1d8>)
 8001622:	f7ff fad7 	bl	8000bd4 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d020      	beq.n	8001670 <HAL_ADC_ConfigChannel+0x84>
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d01c      	beq.n	8001670 <HAL_ADC_ConfigChannel+0x84>
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	2b02      	cmp	r3, #2
 800163c:	d018      	beq.n	8001670 <HAL_ADC_ConfigChannel+0x84>
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	2b03      	cmp	r3, #3
 8001644:	d014      	beq.n	8001670 <HAL_ADC_ConfigChannel+0x84>
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	2b04      	cmp	r3, #4
 800164c:	d010      	beq.n	8001670 <HAL_ADC_ConfigChannel+0x84>
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	2b05      	cmp	r3, #5
 8001654:	d00c      	beq.n	8001670 <HAL_ADC_ConfigChannel+0x84>
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	2b06      	cmp	r3, #6
 800165c:	d008      	beq.n	8001670 <HAL_ADC_ConfigChannel+0x84>
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	2b07      	cmp	r3, #7
 8001664:	d004      	beq.n	8001670 <HAL_ADC_ConfigChannel+0x84>
 8001666:	f240 618d 	movw	r1, #1677	; 0x68d
 800166a:	4856      	ldr	r0, [pc, #344]	; (80017c4 <HAL_ADC_ConfigChannel+0x1d8>)
 800166c:	f7ff fab2 	bl	8000bd4 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001676:	2b01      	cmp	r3, #1
 8001678:	d101      	bne.n	800167e <HAL_ADC_ConfigChannel+0x92>
 800167a:	2302      	movs	r3, #2
 800167c:	e107      	b.n	800188e <HAL_ADC_ConfigChannel+0x2a2>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2201      	movs	r2, #1
 8001682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2b09      	cmp	r3, #9
 800168c:	d925      	bls.n	80016da <HAL_ADC_ConfigChannel+0xee>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	68d9      	ldr	r1, [r3, #12]
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	b29b      	uxth	r3, r3
 800169a:	461a      	mov	r2, r3
 800169c:	4613      	mov	r3, r2
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	4413      	add	r3, r2
 80016a2:	3b1e      	subs	r3, #30
 80016a4:	2207      	movs	r2, #7
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43da      	mvns	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	400a      	ands	r2, r1
 80016b2:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	68d9      	ldr	r1, [r3, #12]
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	689a      	ldr	r2, [r3, #8]
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	4618      	mov	r0, r3
 80016c6:	4603      	mov	r3, r0
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	4403      	add	r3, r0
 80016cc:	3b1e      	subs	r3, #30
 80016ce:	409a      	lsls	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	430a      	orrs	r2, r1
 80016d6:	60da      	str	r2, [r3, #12]
 80016d8:	e022      	b.n	8001720 <HAL_ADC_ConfigChannel+0x134>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6919      	ldr	r1, [r3, #16]
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	461a      	mov	r2, r3
 80016e8:	4613      	mov	r3, r2
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	4413      	add	r3, r2
 80016ee:	2207      	movs	r2, #7
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43da      	mvns	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	400a      	ands	r2, r1
 80016fc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6919      	ldr	r1, [r3, #16]
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	b29b      	uxth	r3, r3
 800170e:	4618      	mov	r0, r3
 8001710:	4603      	mov	r3, r0
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	4403      	add	r3, r0
 8001716:	409a      	lsls	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	430a      	orrs	r2, r1
 800171e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	2b06      	cmp	r3, #6
 8001726:	d824      	bhi.n	8001772 <HAL_ADC_ConfigChannel+0x186>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	4613      	mov	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4413      	add	r3, r2
 8001738:	3b05      	subs	r3, #5
 800173a:	221f      	movs	r2, #31
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	43da      	mvns	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	400a      	ands	r2, r1
 8001748:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	b29b      	uxth	r3, r3
 8001756:	4618      	mov	r0, r3
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	4613      	mov	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	3b05      	subs	r3, #5
 8001764:	fa00 f203 	lsl.w	r2, r0, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	430a      	orrs	r2, r1
 800176e:	635a      	str	r2, [r3, #52]	; 0x34
 8001770:	e04e      	b.n	8001810 <HAL_ADC_ConfigChannel+0x224>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2b0c      	cmp	r3, #12
 8001778:	d826      	bhi.n	80017c8 <HAL_ADC_ConfigChannel+0x1dc>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	4613      	mov	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	3b23      	subs	r3, #35	; 0x23
 800178c:	221f      	movs	r2, #31
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43da      	mvns	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	400a      	ands	r2, r1
 800179a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	4618      	mov	r0, r3
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685a      	ldr	r2, [r3, #4]
 80017ae:	4613      	mov	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	3b23      	subs	r3, #35	; 0x23
 80017b6:	fa00 f203 	lsl.w	r2, r0, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	430a      	orrs	r2, r1
 80017c0:	631a      	str	r2, [r3, #48]	; 0x30
 80017c2:	e025      	b.n	8001810 <HAL_ADC_ConfigChannel+0x224>
 80017c4:	0800506c 	.word	0x0800506c
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	4613      	mov	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	3b41      	subs	r3, #65	; 0x41
 80017da:	221f      	movs	r2, #31
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43da      	mvns	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	400a      	ands	r2, r1
 80017e8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	4618      	mov	r0, r3
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685a      	ldr	r2, [r3, #4]
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	3b41      	subs	r3, #65	; 0x41
 8001804:	fa00 f203 	lsl.w	r2, r0, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	430a      	orrs	r2, r1
 800180e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001810:	4b21      	ldr	r3, [pc, #132]	; (8001898 <HAL_ADC_ConfigChannel+0x2ac>)
 8001812:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a20      	ldr	r2, [pc, #128]	; (800189c <HAL_ADC_ConfigChannel+0x2b0>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d109      	bne.n	8001832 <HAL_ADC_ConfigChannel+0x246>
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2b12      	cmp	r3, #18
 8001824:	d105      	bne.n	8001832 <HAL_ADC_ConfigChannel+0x246>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a19      	ldr	r2, [pc, #100]	; (800189c <HAL_ADC_ConfigChannel+0x2b0>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d123      	bne.n	8001884 <HAL_ADC_ConfigChannel+0x298>
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b10      	cmp	r3, #16
 8001842:	d003      	beq.n	800184c <HAL_ADC_ConfigChannel+0x260>
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b11      	cmp	r3, #17
 800184a:	d11b      	bne.n	8001884 <HAL_ADC_ConfigChannel+0x298>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b10      	cmp	r3, #16
 800185e:	d111      	bne.n	8001884 <HAL_ADC_ConfigChannel+0x298>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001860:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <HAL_ADC_ConfigChannel+0x2b4>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a0f      	ldr	r2, [pc, #60]	; (80018a4 <HAL_ADC_ConfigChannel+0x2b8>)
 8001866:	fba2 2303 	umull	r2, r3, r2, r3
 800186a:	0c9a      	lsrs	r2, r3, #18
 800186c:	4613      	mov	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001876:	e002      	b.n	800187e <HAL_ADC_ConfigChannel+0x292>
      {
        counter--;
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	3b01      	subs	r3, #1
 800187c:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d1f9      	bne.n	8001878 <HAL_ADC_ConfigChannel+0x28c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40012300 	.word	0x40012300
 800189c:	40012000 	.word	0x40012000
 80018a0:	20000000 	.word	0x20000000
 80018a4:	431bde83 	.word	0x431bde83

080018a8 <HAL_ADC_AnalogWDGConfig>:
  * @param  AnalogWDGConfig  pointer to an ADC_AnalogWDGConfTypeDef structure 
  *         that contains the configuration information of ADC analog watchdog.
  * @retval HAL status	  
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
#ifdef USE_FULL_ASSERT  
  uint32_t tmp = 0U;
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
#endif /* USE_FULL_ASSERT  */  
  
  /* Check the parameters */
  assert_param(IS_ADC_ANALOG_WATCHDOG(AnalogWDGConfig->WatchdogMode));
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a73      	ldr	r2, [pc, #460]	; (8001a88 <HAL_ADC_AnalogWDGConfig+0x1e0>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d021      	beq.n	8001904 <HAL_ADC_AnalogWDGConfig+0x5c>
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a71      	ldr	r2, [pc, #452]	; (8001a8c <HAL_ADC_AnalogWDGConfig+0x1e4>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d01c      	beq.n	8001904 <HAL_ADC_AnalogWDGConfig+0x5c>
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a70      	ldr	r2, [pc, #448]	; (8001a90 <HAL_ADC_AnalogWDGConfig+0x1e8>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d017      	beq.n	8001904 <HAL_ADC_AnalogWDGConfig+0x5c>
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80018dc:	d012      	beq.n	8001904 <HAL_ADC_AnalogWDGConfig+0x5c>
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018e6:	d00d      	beq.n	8001904 <HAL_ADC_AnalogWDGConfig+0x5c>
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80018f0:	d008      	beq.n	8001904 <HAL_ADC_AnalogWDGConfig+0x5c>
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d004      	beq.n	8001904 <HAL_ADC_AnalogWDGConfig+0x5c>
 80018fa:	f240 7107 	movw	r1, #1799	; 0x707
 80018fe:	4865      	ldr	r0, [pc, #404]	; (8001a94 <HAL_ADC_AnalogWDGConfig+0x1ec>)
 8001900:	f7ff f968 	bl	8000bd4 <assert_failed>
  assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	2b12      	cmp	r3, #18
 800190a:	d904      	bls.n	8001916 <HAL_ADC_AnalogWDGConfig+0x6e>
 800190c:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 8001910:	4860      	ldr	r0, [pc, #384]	; (8001a94 <HAL_ADC_AnalogWDGConfig+0x1ec>)
 8001912:	f7ff f95f 	bl	8000bd4 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	7c1b      	ldrb	r3, [r3, #16]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d008      	beq.n	8001930 <HAL_ADC_AnalogWDGConfig+0x88>
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	7c1b      	ldrb	r3, [r3, #16]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d004      	beq.n	8001930 <HAL_ADC_AnalogWDGConfig+0x88>
 8001926:	f240 7109 	movw	r1, #1801	; 0x709
 800192a:	485a      	ldr	r0, [pc, #360]	; (8001a94 <HAL_ADC_AnalogWDGConfig+0x1ec>)
 800192c:	f7ff f952 	bl	8000bd4 <assert_failed>

#ifdef USE_FULL_ASSERT  
  tmp = ADC_GET_RESOLUTION(hadc);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800193a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->HighThreshold));
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d104      	bne.n	800194c <HAL_ADC_AnalogWDGConfig+0xa4>
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800194a:	d31d      	bcc.n	8001988 <HAL_ADC_AnalogWDGConfig+0xe0>
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001952:	d104      	bne.n	800195e <HAL_ADC_AnalogWDGConfig+0xb6>
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800195c:	d314      	bcc.n	8001988 <HAL_ADC_AnalogWDGConfig+0xe0>
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001964:	d103      	bne.n	800196e <HAL_ADC_AnalogWDGConfig+0xc6>
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2bff      	cmp	r3, #255	; 0xff
 800196c:	d90c      	bls.n	8001988 <HAL_ADC_AnalogWDGConfig+0xe0>
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001974:	d103      	bne.n	800197e <HAL_ADC_AnalogWDGConfig+0xd6>
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	2b3f      	cmp	r3, #63	; 0x3f
 800197c:	d904      	bls.n	8001988 <HAL_ADC_AnalogWDGConfig+0xe0>
 800197e:	f240 710d 	movw	r1, #1805	; 0x70d
 8001982:	4844      	ldr	r0, [pc, #272]	; (8001a94 <HAL_ADC_AnalogWDGConfig+0x1ec>)
 8001984:	f7ff f926 	bl	8000bd4 <assert_failed>
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->LowThreshold));
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d104      	bne.n	8001998 <HAL_ADC_AnalogWDGConfig+0xf0>
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001996:	d31d      	bcc.n	80019d4 <HAL_ADC_AnalogWDGConfig+0x12c>
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800199e:	d104      	bne.n	80019aa <HAL_ADC_AnalogWDGConfig+0x102>
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019a8:	d314      	bcc.n	80019d4 <HAL_ADC_AnalogWDGConfig+0x12c>
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80019b0:	d103      	bne.n	80019ba <HAL_ADC_AnalogWDGConfig+0x112>
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	2bff      	cmp	r3, #255	; 0xff
 80019b8:	d90c      	bls.n	80019d4 <HAL_ADC_AnalogWDGConfig+0x12c>
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80019c0:	d103      	bne.n	80019ca <HAL_ADC_AnalogWDGConfig+0x122>
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	2b3f      	cmp	r3, #63	; 0x3f
 80019c8:	d904      	bls.n	80019d4 <HAL_ADC_AnalogWDGConfig+0x12c>
 80019ca:	f240 710e 	movw	r1, #1806	; 0x70e
 80019ce:	4831      	ldr	r0, [pc, #196]	; (8001a94 <HAL_ADC_AnalogWDGConfig+0x1ec>)
 80019d0:	f7ff f900 	bl	8000bd4 <assert_failed>
#endif /* USE_FULL_ASSERT  */
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d101      	bne.n	80019e2 <HAL_ADC_AnalogWDGConfig+0x13a>
 80019de:	2302      	movs	r3, #2
 80019e0:	e04d      	b.n	8001a7e <HAL_ADC_AnalogWDGConfig+0x1d6>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2201      	movs	r2, #1
 80019e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  if(AnalogWDGConfig->ITMode == ENABLE)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	7c1b      	ldrb	r3, [r3, #16]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d108      	bne.n	8001a04 <HAL_ADC_AnalogWDGConfig+0x15c>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	685a      	ldr	r2, [r3, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	e007      	b.n	8001a14 <HAL_ADC_AnalogWDGConfig+0x16c>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a12:	605a      	str	r2, [r3, #4]
  }
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  hadc->Instance->CR1 &=  ~(ADC_CR1_AWDSGL | ADC_CR1_JAWDEN | ADC_CR1_AWDEN);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	6812      	ldr	r2, [r2, #0]
 8001a1e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001a22:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001a26:	6053      	str	r3, [r2, #4]
  
  /* Set the analog watchdog enable mode */
  hadc->Instance->CR1 |= AnalogWDGConfig->WatchdogMode;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6859      	ldr	r1, [r3, #4]
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	430a      	orrs	r2, r1
 8001a38:	605a      	str	r2, [r3, #4]
  
  /* Set the high threshold */
  hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	6852      	ldr	r2, [r2, #4]
 8001a42:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the low threshold */
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	6892      	ldr	r2, [r2, #8]
 8001a4c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Clear the Analog watchdog channel select bits */
  hadc->Instance->CR1 &= ~ADC_CR1_AWDCH;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f022 021f 	bic.w	r2, r2, #31
 8001a5c:	605a      	str	r2, [r3, #4]
  
  /* Set the Analog watchdog channel */
  hadc->Instance->CR1 |= (uint32_t)((uint16_t)(AnalogWDGConfig->Channel));
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	685a      	ldr	r2, [r3, #4]
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	430a      	orrs	r2, r1
 8001a72:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	00800200 	.word	0x00800200
 8001a8c:	00400200 	.word	0x00400200
 8001a90:	00c00200 	.word	0x00c00200
 8001a94:	0800506c 	.word	0x0800506c

08001a98 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001aa0:	4b7f      	ldr	r3, [pc, #508]	; (8001ca0 <ADC_Init+0x208>)
 8001aa2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001acc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6859      	ldr	r1, [r3, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	021a      	lsls	r2, r3, #8
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001af0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	6859      	ldr	r1, [r3, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	689a      	ldr	r2, [r3, #8]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6899      	ldr	r1, [r3, #8]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68da      	ldr	r2, [r3, #12]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	430a      	orrs	r2, r1
 8001b24:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2a:	4a5e      	ldr	r2, [pc, #376]	; (8001ca4 <ADC_Init+0x20c>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d022      	beq.n	8001b76 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	689a      	ldr	r2, [r3, #8]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b3e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6899      	ldr	r1, [r3, #8]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	6899      	ldr	r1, [r3, #8]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	430a      	orrs	r2, r1
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	e00f      	b.n	8001b96 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b94:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 0202 	bic.w	r2, r2, #2
 8001ba4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6899      	ldr	r1, [r3, #8]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	7e1b      	ldrb	r3, [r3, #24]
 8001bb0:	005a      	lsls	r2, r3, #1
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d028      	beq.n	8001c16 <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d003      	beq.n	8001bd4 <ADC_Init+0x13c>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd0:	2b08      	cmp	r3, #8
 8001bd2:	d904      	bls.n	8001bde <ADC_Init+0x146>
 8001bd4:	f44f 61f5 	mov.w	r1, #1960	; 0x7a8
 8001bd8:	4833      	ldr	r0, [pc, #204]	; (8001ca8 <ADC_Init+0x210>)
 8001bda:	f7fe fffb 	bl	8000bd4 <assert_failed>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	685a      	ldr	r2, [r3, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001bec:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001bfc:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6859      	ldr	r1, [r3, #4]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	035a      	lsls	r2, r3, #13
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	430a      	orrs	r2, r1
 8001c12:	605a      	str	r2, [r3, #4]
 8001c14:	e007      	b.n	8001c26 <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	685a      	ldr	r2, [r3, #4]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c24:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001c34:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	69db      	ldr	r3, [r3, #28]
 8001c40:	3b01      	subs	r3, #1
 8001c42:	051a      	lsls	r2, r3, #20
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	689a      	ldr	r2, [r3, #8]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6899      	ldr	r1, [r3, #8]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c68:	025a      	lsls	r2, r3, #9
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6899      	ldr	r1, [r3, #8]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	695b      	ldr	r3, [r3, #20]
 8001c8c:	029a      	lsls	r2, r3, #10
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	609a      	str	r2, [r3, #8]
}
 8001c96:	bf00      	nop
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40012300 	.word	0x40012300
 8001ca4:	0f000001 	.word	0x0f000001
 8001ca8:	0800506c 	.word	0x0800506c

08001cac <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cdc:	4013      	ands	r3, r2
 8001cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ce8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cf2:	4a04      	ldr	r2, [pc, #16]	; (8001d04 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	60d3      	str	r3, [r2, #12]
}
 8001cf8:	bf00      	nop
 8001cfa:	3714      	adds	r7, #20
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d0c:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <__NVIC_GetPriorityGrouping+0x18>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	0a1b      	lsrs	r3, r3, #8
 8001d12:	f003 0307 	and.w	r3, r3, #7
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	db0b      	blt.n	8001d4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	f003 021f 	and.w	r2, r3, #31
 8001d3c:	4907      	ldr	r1, [pc, #28]	; (8001d5c <__NVIC_EnableIRQ+0x38>)
 8001d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d42:	095b      	lsrs	r3, r3, #5
 8001d44:	2001      	movs	r0, #1
 8001d46:	fa00 f202 	lsl.w	r2, r0, r2
 8001d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	e000e100 	.word	0xe000e100

08001d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	6039      	str	r1, [r7, #0]
 8001d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	db0a      	blt.n	8001d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	490c      	ldr	r1, [pc, #48]	; (8001dac <__NVIC_SetPriority+0x4c>)
 8001d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7e:	0112      	lsls	r2, r2, #4
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	440b      	add	r3, r1
 8001d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d88:	e00a      	b.n	8001da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	4908      	ldr	r1, [pc, #32]	; (8001db0 <__NVIC_SetPriority+0x50>)
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	3b04      	subs	r3, #4
 8001d98:	0112      	lsls	r2, r2, #4
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	761a      	strb	r2, [r3, #24]
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	e000e100 	.word	0xe000e100
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b089      	sub	sp, #36	; 0x24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f1c3 0307 	rsb	r3, r3, #7
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	bf28      	it	cs
 8001dd2:	2304      	movcs	r3, #4
 8001dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	3304      	adds	r3, #4
 8001dda:	2b06      	cmp	r3, #6
 8001ddc:	d902      	bls.n	8001de4 <NVIC_EncodePriority+0x30>
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	3b03      	subs	r3, #3
 8001de2:	e000      	b.n	8001de6 <NVIC_EncodePriority+0x32>
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43da      	mvns	r2, r3
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	401a      	ands	r2, r3
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	fa01 f303 	lsl.w	r3, r1, r3
 8001e06:	43d9      	mvns	r1, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e0c:	4313      	orrs	r3, r2
         );
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3724      	adds	r7, #36	; 0x24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
	...

08001e1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3b01      	subs	r3, #1
 8001e28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e2c:	d301      	bcc.n	8001e32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e00f      	b.n	8001e52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e32:	4a0a      	ldr	r2, [pc, #40]	; (8001e5c <SysTick_Config+0x40>)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e3a:	210f      	movs	r1, #15
 8001e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e40:	f7ff ff8e 	bl	8001d60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e44:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <SysTick_Config+0x40>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e4a:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <SysTick_Config+0x40>)
 8001e4c:	2207      	movs	r2, #7
 8001e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	e000e010 	.word	0xe000e010

08001e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b07      	cmp	r3, #7
 8001e6c:	d00f      	beq.n	8001e8e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b06      	cmp	r3, #6
 8001e72:	d00c      	beq.n	8001e8e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b05      	cmp	r3, #5
 8001e78:	d009      	beq.n	8001e8e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b04      	cmp	r3, #4
 8001e7e:	d006      	beq.n	8001e8e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b03      	cmp	r3, #3
 8001e84:	d003      	beq.n	8001e8e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001e86:	2190      	movs	r1, #144	; 0x90
 8001e88:	4804      	ldr	r0, [pc, #16]	; (8001e9c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001e8a:	f7fe fea3 	bl	8000bd4 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff ff16 	bl	8001cc0 <__NVIC_SetPriorityGrouping>
}
 8001e94:	bf00      	nop
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	080050a4 	.word	0x080050a4

08001ea0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
 8001eac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2b0f      	cmp	r3, #15
 8001eb6:	d903      	bls.n	8001ec0 <HAL_NVIC_SetPriority+0x20>
 8001eb8:	21a8      	movs	r1, #168	; 0xa8
 8001eba:	480e      	ldr	r0, [pc, #56]	; (8001ef4 <HAL_NVIC_SetPriority+0x54>)
 8001ebc:	f7fe fe8a 	bl	8000bd4 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	2b0f      	cmp	r3, #15
 8001ec4:	d903      	bls.n	8001ece <HAL_NVIC_SetPriority+0x2e>
 8001ec6:	21a9      	movs	r1, #169	; 0xa9
 8001ec8:	480a      	ldr	r0, [pc, #40]	; (8001ef4 <HAL_NVIC_SetPriority+0x54>)
 8001eca:	f7fe fe83 	bl	8000bd4 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ece:	f7ff ff1b 	bl	8001d08 <__NVIC_GetPriorityGrouping>
 8001ed2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	68b9      	ldr	r1, [r7, #8]
 8001ed8:	6978      	ldr	r0, [r7, #20]
 8001eda:	f7ff ff6b 	bl	8001db4 <NVIC_EncodePriority>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ee4:	4611      	mov	r1, r2
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff ff3a 	bl	8001d60 <__NVIC_SetPriority>
}
 8001eec:	bf00      	nop
 8001eee:	3718      	adds	r7, #24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	080050a4 	.word	0x080050a4

08001ef8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	da03      	bge.n	8001f12 <HAL_NVIC_EnableIRQ+0x1a>
 8001f0a:	21bc      	movs	r1, #188	; 0xbc
 8001f0c:	4805      	ldr	r0, [pc, #20]	; (8001f24 <HAL_NVIC_EnableIRQ+0x2c>)
 8001f0e:	f7fe fe61 	bl	8000bd4 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff ff04 	bl	8001d24 <__NVIC_EnableIRQ>
}
 8001f1c:	bf00      	nop
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	080050a4 	.word	0x080050a4

08001f28 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7ff ff73 	bl	8001e1c <SysTick_Config>
 8001f36:	4603      	mov	r3, r0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f4e:	f7ff f879 	bl	8001044 <HAL_GetTick>
 8001f52:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d008      	beq.n	8001f72 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2280      	movs	r2, #128	; 0x80
 8001f64:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e052      	b.n	8002018 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0216 	bic.w	r2, r2, #22
 8001f80:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	695a      	ldr	r2, [r3, #20]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f90:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d103      	bne.n	8001fa2 <HAL_DMA_Abort+0x62>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d007      	beq.n	8001fb2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 0208 	bic.w	r2, r2, #8
 8001fb0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 0201 	bic.w	r2, r2, #1
 8001fc0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fc2:	e013      	b.n	8001fec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fc4:	f7ff f83e 	bl	8001044 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b05      	cmp	r3, #5
 8001fd0:	d90c      	bls.n	8001fec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2220      	movs	r2, #32
 8001fd6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2203      	movs	r2, #3
 8001fdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e015      	b.n	8002018 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1e4      	bne.n	8001fc4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ffe:	223f      	movs	r2, #63	; 0x3f
 8002000:	409a      	lsls	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d004      	beq.n	800203e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2280      	movs	r2, #128	; 0x80
 8002038:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e00c      	b.n	8002058 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2205      	movs	r2, #5
 8002042:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f022 0201 	bic.w	r2, r2, #1
 8002054:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b088      	sub	sp, #32
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800206e:	2300      	movs	r3, #0
 8002070:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002072:	2300      	movs	r3, #0
 8002074:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002076:	2300      	movs	r3, #0
 8002078:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a39      	ldr	r2, [pc, #228]	; (8002164 <HAL_GPIO_Init+0x100>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d023      	beq.n	80020ca <HAL_GPIO_Init+0x66>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a38      	ldr	r2, [pc, #224]	; (8002168 <HAL_GPIO_Init+0x104>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d01f      	beq.n	80020ca <HAL_GPIO_Init+0x66>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a37      	ldr	r2, [pc, #220]	; (800216c <HAL_GPIO_Init+0x108>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d01b      	beq.n	80020ca <HAL_GPIO_Init+0x66>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a36      	ldr	r2, [pc, #216]	; (8002170 <HAL_GPIO_Init+0x10c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d017      	beq.n	80020ca <HAL_GPIO_Init+0x66>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a35      	ldr	r2, [pc, #212]	; (8002174 <HAL_GPIO_Init+0x110>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d013      	beq.n	80020ca <HAL_GPIO_Init+0x66>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a34      	ldr	r2, [pc, #208]	; (8002178 <HAL_GPIO_Init+0x114>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d00f      	beq.n	80020ca <HAL_GPIO_Init+0x66>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a33      	ldr	r2, [pc, #204]	; (800217c <HAL_GPIO_Init+0x118>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d00b      	beq.n	80020ca <HAL_GPIO_Init+0x66>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a32      	ldr	r2, [pc, #200]	; (8002180 <HAL_GPIO_Init+0x11c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d007      	beq.n	80020ca <HAL_GPIO_Init+0x66>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a31      	ldr	r2, [pc, #196]	; (8002184 <HAL_GPIO_Init+0x120>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d003      	beq.n	80020ca <HAL_GPIO_Init+0x66>
 80020c2:	21ac      	movs	r1, #172	; 0xac
 80020c4:	4830      	ldr	r0, [pc, #192]	; (8002188 <HAL_GPIO_Init+0x124>)
 80020c6:	f7fe fd85 	bl	8000bd4 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d005      	beq.n	80020e0 <HAL_GPIO_Init+0x7c>
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	0c1b      	lsrs	r3, r3, #16
 80020da:	041b      	lsls	r3, r3, #16
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d003      	beq.n	80020e8 <HAL_GPIO_Init+0x84>
 80020e0:	21ad      	movs	r1, #173	; 0xad
 80020e2:	4829      	ldr	r0, [pc, #164]	; (8002188 <HAL_GPIO_Init+0x124>)
 80020e4:	f7fe fd76 	bl	8000bd4 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d035      	beq.n	800215c <HAL_GPIO_Init+0xf8>
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d031      	beq.n	800215c <HAL_GPIO_Init+0xf8>
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2b11      	cmp	r3, #17
 80020fe:	d02d      	beq.n	800215c <HAL_GPIO_Init+0xf8>
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2b02      	cmp	r3, #2
 8002106:	d029      	beq.n	800215c <HAL_GPIO_Init+0xf8>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2b12      	cmp	r3, #18
 800210e:	d025      	beq.n	800215c <HAL_GPIO_Init+0xf8>
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8002118:	d020      	beq.n	800215c <HAL_GPIO_Init+0xf8>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002122:	d01b      	beq.n	800215c <HAL_GPIO_Init+0xf8>
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 800212c:	d016      	beq.n	800215c <HAL_GPIO_Init+0xf8>
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8002136:	d011      	beq.n	800215c <HAL_GPIO_Init+0xf8>
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8002140:	d00c      	beq.n	800215c <HAL_GPIO_Init+0xf8>
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800214a:	d007      	beq.n	800215c <HAL_GPIO_Init+0xf8>
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	2b03      	cmp	r3, #3
 8002152:	d003      	beq.n	800215c <HAL_GPIO_Init+0xf8>
 8002154:	21ae      	movs	r1, #174	; 0xae
 8002156:	480c      	ldr	r0, [pc, #48]	; (8002188 <HAL_GPIO_Init+0x124>)
 8002158:	f7fe fd3c 	bl	8000bd4 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800215c:	2300      	movs	r3, #0
 800215e:	61fb      	str	r3, [r7, #28]
 8002160:	e242      	b.n	80025e8 <HAL_GPIO_Init+0x584>
 8002162:	bf00      	nop
 8002164:	40020000 	.word	0x40020000
 8002168:	40020400 	.word	0x40020400
 800216c:	40020800 	.word	0x40020800
 8002170:	40020c00 	.word	0x40020c00
 8002174:	40021000 	.word	0x40021000
 8002178:	40021400 	.word	0x40021400
 800217c:	40021800 	.word	0x40021800
 8002180:	40021c00 	.word	0x40021c00
 8002184:	40022000 	.word	0x40022000
 8002188:	080050e0 	.word	0x080050e0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800218c:	2201      	movs	r2, #1
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	4013      	ands	r3, r2
 800219e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	f040 821c 	bne.w	80025e2 <HAL_GPIO_Init+0x57e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f003 0303 	and.w	r3, r3, #3
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d005      	beq.n	80021c2 <HAL_GPIO_Init+0x15e>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d144      	bne.n	800224c <HAL_GPIO_Init+0x1e8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00f      	beq.n	80021ea <HAL_GPIO_Init+0x186>
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d00b      	beq.n	80021ea <HAL_GPIO_Init+0x186>
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d007      	beq.n	80021ea <HAL_GPIO_Init+0x186>
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	2b03      	cmp	r3, #3
 80021e0:	d003      	beq.n	80021ea <HAL_GPIO_Init+0x186>
 80021e2:	21c0      	movs	r1, #192	; 0xc0
 80021e4:	4881      	ldr	r0, [pc, #516]	; (80023ec <HAL_GPIO_Init+0x388>)
 80021e6:	f7fe fcf5 	bl	8000bd4 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	2203      	movs	r2, #3
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	43db      	mvns	r3, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4013      	ands	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	68da      	ldr	r2, [r3, #12]
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4313      	orrs	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002220:	2201      	movs	r2, #1
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43db      	mvns	r3, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4013      	ands	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	091b      	lsrs	r3, r3, #4
 8002236:	f003 0201 	and.w	r2, r3, #1
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4313      	orrs	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 0303 	and.w	r3, r3, #3
 8002254:	2b03      	cmp	r3, #3
 8002256:	d027      	beq.n	80022a8 <HAL_GPIO_Init+0x244>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00b      	beq.n	8002278 <HAL_GPIO_Init+0x214>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d007      	beq.n	8002278 <HAL_GPIO_Init+0x214>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	2b02      	cmp	r3, #2
 800226e:	d003      	beq.n	8002278 <HAL_GPIO_Init+0x214>
 8002270:	21d1      	movs	r1, #209	; 0xd1
 8002272:	485e      	ldr	r0, [pc, #376]	; (80023ec <HAL_GPIO_Init+0x388>)
 8002274:	f7fe fcae 	bl	8000bd4 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	2203      	movs	r2, #3
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4013      	ands	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 0303 	and.w	r3, r3, #3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	f040 80c1 	bne.w	8002438 <HAL_GPIO_Init+0x3d4>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f000 8098 	beq.w	80023f0 <HAL_GPIO_Init+0x38c>
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	2b09      	cmp	r3, #9
 80022c6:	f000 8093 	beq.w	80023f0 <HAL_GPIO_Init+0x38c>
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f000 808e 	beq.w	80023f0 <HAL_GPIO_Init+0x38c>
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f000 8089 	beq.w	80023f0 <HAL_GPIO_Init+0x38c>
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f000 8084 	beq.w	80023f0 <HAL_GPIO_Init+0x38c>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d07f      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d07b      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d077      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	2b02      	cmp	r3, #2
 8002306:	d073      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	2b02      	cmp	r3, #2
 800230e:	d06f      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	2b02      	cmp	r3, #2
 8002316:	d06b      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	2b03      	cmp	r3, #3
 800231e:	d067      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	2b04      	cmp	r3, #4
 8002326:	d063      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	2b04      	cmp	r3, #4
 800232e:	d05f      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	2b04      	cmp	r3, #4
 8002336:	d05b      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	2b05      	cmp	r3, #5
 800233e:	d057      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	2b05      	cmp	r3, #5
 8002346:	d053      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	2b09      	cmp	r3, #9
 800234e:	d04f      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	2b06      	cmp	r3, #6
 8002356:	d04b      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	2b09      	cmp	r3, #9
 800235e:	d047      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	2b07      	cmp	r3, #7
 8002366:	d043      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	2b07      	cmp	r3, #7
 800236e:	d03f      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	2b07      	cmp	r3, #7
 8002376:	d03b      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	2b08      	cmp	r3, #8
 800237e:	d037      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	2b08      	cmp	r3, #8
 8002386:	d033      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	2b08      	cmp	r3, #8
 800238e:	d02f      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	2b09      	cmp	r3, #9
 8002396:	d02b      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	2b09      	cmp	r3, #9
 800239e:	d027      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	2b0a      	cmp	r3, #10
 80023a6:	d023      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	2b0a      	cmp	r3, #10
 80023ae:	d01f      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	2b0b      	cmp	r3, #11
 80023b6:	d01b      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	2b0c      	cmp	r3, #12
 80023be:	d017      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	2b0c      	cmp	r3, #12
 80023c6:	d013      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	2b0d      	cmp	r3, #13
 80023ce:	d00f      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	2b0c      	cmp	r3, #12
 80023d6:	d00b      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	2b0f      	cmp	r3, #15
 80023de:	d007      	beq.n	80023f0 <HAL_GPIO_Init+0x38c>
 80023e0:	21de      	movs	r1, #222	; 0xde
 80023e2:	4802      	ldr	r0, [pc, #8]	; (80023ec <HAL_GPIO_Init+0x388>)
 80023e4:	f7fe fbf6 	bl	8000bd4 <assert_failed>
 80023e8:	e002      	b.n	80023f0 <HAL_GPIO_Init+0x38c>
 80023ea:	bf00      	nop
 80023ec:	080050e0 	.word	0x080050e0
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	08da      	lsrs	r2, r3, #3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3208      	adds	r2, #8
 80023f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	220f      	movs	r2, #15
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	43db      	mvns	r3, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4013      	ands	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	691a      	ldr	r2, [r3, #16]
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4313      	orrs	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	08da      	lsrs	r2, r3, #3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	3208      	adds	r2, #8
 8002432:	69b9      	ldr	r1, [r7, #24]
 8002434:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	2203      	movs	r2, #3
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	43db      	mvns	r3, r3
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4013      	ands	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 0203 	and.w	r2, r3, #3
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4313      	orrs	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002474:	2b00      	cmp	r3, #0
 8002476:	f000 80b4 	beq.w	80025e2 <HAL_GPIO_Init+0x57e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	4b5f      	ldr	r3, [pc, #380]	; (80025fc <HAL_GPIO_Init+0x598>)
 8002480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002482:	4a5e      	ldr	r2, [pc, #376]	; (80025fc <HAL_GPIO_Init+0x598>)
 8002484:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002488:	6453      	str	r3, [r2, #68]	; 0x44
 800248a:	4b5c      	ldr	r3, [pc, #368]	; (80025fc <HAL_GPIO_Init+0x598>)
 800248c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002496:	4a5a      	ldr	r2, [pc, #360]	; (8002600 <HAL_GPIO_Init+0x59c>)
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	089b      	lsrs	r3, r3, #2
 800249c:	3302      	adds	r3, #2
 800249e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	220f      	movs	r2, #15
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	43db      	mvns	r3, r3
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	4013      	ands	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a51      	ldr	r2, [pc, #324]	; (8002604 <HAL_GPIO_Init+0x5a0>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d02b      	beq.n	800251a <HAL_GPIO_Init+0x4b6>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a50      	ldr	r2, [pc, #320]	; (8002608 <HAL_GPIO_Init+0x5a4>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d025      	beq.n	8002516 <HAL_GPIO_Init+0x4b2>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a4f      	ldr	r2, [pc, #316]	; (800260c <HAL_GPIO_Init+0x5a8>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d01f      	beq.n	8002512 <HAL_GPIO_Init+0x4ae>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a4e      	ldr	r2, [pc, #312]	; (8002610 <HAL_GPIO_Init+0x5ac>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d019      	beq.n	800250e <HAL_GPIO_Init+0x4aa>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a4d      	ldr	r2, [pc, #308]	; (8002614 <HAL_GPIO_Init+0x5b0>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d013      	beq.n	800250a <HAL_GPIO_Init+0x4a6>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a4c      	ldr	r2, [pc, #304]	; (8002618 <HAL_GPIO_Init+0x5b4>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d00d      	beq.n	8002506 <HAL_GPIO_Init+0x4a2>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a4b      	ldr	r2, [pc, #300]	; (800261c <HAL_GPIO_Init+0x5b8>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d007      	beq.n	8002502 <HAL_GPIO_Init+0x49e>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a4a      	ldr	r2, [pc, #296]	; (8002620 <HAL_GPIO_Init+0x5bc>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d101      	bne.n	80024fe <HAL_GPIO_Init+0x49a>
 80024fa:	2307      	movs	r3, #7
 80024fc:	e00e      	b.n	800251c <HAL_GPIO_Init+0x4b8>
 80024fe:	2308      	movs	r3, #8
 8002500:	e00c      	b.n	800251c <HAL_GPIO_Init+0x4b8>
 8002502:	2306      	movs	r3, #6
 8002504:	e00a      	b.n	800251c <HAL_GPIO_Init+0x4b8>
 8002506:	2305      	movs	r3, #5
 8002508:	e008      	b.n	800251c <HAL_GPIO_Init+0x4b8>
 800250a:	2304      	movs	r3, #4
 800250c:	e006      	b.n	800251c <HAL_GPIO_Init+0x4b8>
 800250e:	2303      	movs	r3, #3
 8002510:	e004      	b.n	800251c <HAL_GPIO_Init+0x4b8>
 8002512:	2302      	movs	r3, #2
 8002514:	e002      	b.n	800251c <HAL_GPIO_Init+0x4b8>
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <HAL_GPIO_Init+0x4b8>
 800251a:	2300      	movs	r3, #0
 800251c:	69fa      	ldr	r2, [r7, #28]
 800251e:	f002 0203 	and.w	r2, r2, #3
 8002522:	0092      	lsls	r2, r2, #2
 8002524:	4093      	lsls	r3, r2
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4313      	orrs	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800252c:	4934      	ldr	r1, [pc, #208]	; (8002600 <HAL_GPIO_Init+0x59c>)
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	089b      	lsrs	r3, r3, #2
 8002532:	3302      	adds	r3, #2
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800253a:	4b3a      	ldr	r3, [pc, #232]	; (8002624 <HAL_GPIO_Init+0x5c0>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	43db      	mvns	r3, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4013      	ands	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_GPIO_Init+0x4fa>
        {
          temp |= iocurrent;
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	4313      	orrs	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800255e:	4a31      	ldr	r2, [pc, #196]	; (8002624 <HAL_GPIO_Init+0x5c0>)
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002564:	4b2f      	ldr	r3, [pc, #188]	; (8002624 <HAL_GPIO_Init+0x5c0>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	43db      	mvns	r3, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4013      	ands	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d003      	beq.n	8002588 <HAL_GPIO_Init+0x524>
        {
          temp |= iocurrent;
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	4313      	orrs	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002588:	4a26      	ldr	r2, [pc, #152]	; (8002624 <HAL_GPIO_Init+0x5c0>)
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800258e:	4b25      	ldr	r3, [pc, #148]	; (8002624 <HAL_GPIO_Init+0x5c0>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	43db      	mvns	r3, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4013      	ands	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_GPIO_Init+0x54e>
        {
          temp |= iocurrent;
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025b2:	4a1c      	ldr	r2, [pc, #112]	; (8002624 <HAL_GPIO_Init+0x5c0>)
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025b8:	4b1a      	ldr	r3, [pc, #104]	; (8002624 <HAL_GPIO_Init+0x5c0>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	43db      	mvns	r3, r3
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4013      	ands	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d003      	beq.n	80025dc <HAL_GPIO_Init+0x578>
        {
          temp |= iocurrent;
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	4313      	orrs	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025dc:	4a11      	ldr	r2, [pc, #68]	; (8002624 <HAL_GPIO_Init+0x5c0>)
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	3301      	adds	r3, #1
 80025e6:	61fb      	str	r3, [r7, #28]
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	2b0f      	cmp	r3, #15
 80025ec:	f67f adce 	bls.w	800218c <HAL_GPIO_Init+0x128>
      }
    }
  }
}
 80025f0:	bf00      	nop
 80025f2:	bf00      	nop
 80025f4:	3720      	adds	r7, #32
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	40023800 	.word	0x40023800
 8002600:	40013800 	.word	0x40013800
 8002604:	40020000 	.word	0x40020000
 8002608:	40020400 	.word	0x40020400
 800260c:	40020800 	.word	0x40020800
 8002610:	40020c00 	.word	0x40020c00
 8002614:	40021000 	.word	0x40021000
 8002618:	40021400 	.word	0x40021400
 800261c:	40021800 	.word	0x40021800
 8002620:	40021c00 	.word	0x40021c00
 8002624:	40013c00 	.word	0x40013c00

08002628 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e1bd      	b.n	80029b6 <HAL_I2C_Init+0x38e>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a93      	ldr	r2, [pc, #588]	; (800288c <HAL_I2C_Init+0x264>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d00e      	beq.n	8002662 <HAL_I2C_Init+0x3a>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a91      	ldr	r2, [pc, #580]	; (8002890 <HAL_I2C_Init+0x268>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d009      	beq.n	8002662 <HAL_I2C_Init+0x3a>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a90      	ldr	r2, [pc, #576]	; (8002894 <HAL_I2C_Init+0x26c>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d004      	beq.n	8002662 <HAL_I2C_Init+0x3a>
 8002658:	f44f 71df 	mov.w	r1, #446	; 0x1be
 800265c:	488e      	ldr	r0, [pc, #568]	; (8002898 <HAL_I2C_Init+0x270>)
 800265e:	f7fe fab9 	bl	8000bd4 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d004      	beq.n	8002674 <HAL_I2C_Init+0x4c>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	4a8b      	ldr	r2, [pc, #556]	; (800289c <HAL_I2C_Init+0x274>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d904      	bls.n	800267e <HAL_I2C_Init+0x56>
 8002674:	f240 11bf 	movw	r1, #447	; 0x1bf
 8002678:	4887      	ldr	r0, [pc, #540]	; (8002898 <HAL_I2C_Init+0x270>)
 800267a:	f7fe faab 	bl	8000bd4 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d009      	beq.n	800269a <HAL_I2C_Init+0x72>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800268e:	d004      	beq.n	800269a <HAL_I2C_Init+0x72>
 8002690:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8002694:	4880      	ldr	r0, [pc, #512]	; (8002898 <HAL_I2C_Init+0x270>)
 8002696:	f7fe fa9d 	bl	8000bd4 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80026a2:	f023 0303 	bic.w	r3, r3, #3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d004      	beq.n	80026b4 <HAL_I2C_Init+0x8c>
 80026aa:	f240 11c1 	movw	r1, #449	; 0x1c1
 80026ae:	487a      	ldr	r0, [pc, #488]	; (8002898 <HAL_I2C_Init+0x270>)
 80026b0:	f7fe fa90 	bl	8000bd4 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026bc:	d009      	beq.n	80026d2 <HAL_I2C_Init+0xaa>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80026c6:	d004      	beq.n	80026d2 <HAL_I2C_Init+0xaa>
 80026c8:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 80026cc:	4872      	ldr	r0, [pc, #456]	; (8002898 <HAL_I2C_Init+0x270>)
 80026ce:	f7fe fa81 	bl	8000bd4 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d008      	beq.n	80026ec <HAL_I2C_Init+0xc4>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d004      	beq.n	80026ec <HAL_I2C_Init+0xc4>
 80026e2:	f240 11c3 	movw	r1, #451	; 0x1c3
 80026e6:	486c      	ldr	r0, [pc, #432]	; (8002898 <HAL_I2C_Init+0x270>)
 80026e8:	f7fe fa74 	bl	8000bd4 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d004      	beq.n	8002702 <HAL_I2C_Init+0xda>
 80026f8:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 80026fc:	4866      	ldr	r0, [pc, #408]	; (8002898 <HAL_I2C_Init+0x270>)
 80026fe:	f7fe fa69 	bl	8000bd4 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d008      	beq.n	800271c <HAL_I2C_Init+0xf4>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	2b40      	cmp	r3, #64	; 0x40
 8002710:	d004      	beq.n	800271c <HAL_I2C_Init+0xf4>
 8002712:	f240 11c5 	movw	r1, #453	; 0x1c5
 8002716:	4860      	ldr	r0, [pc, #384]	; (8002898 <HAL_I2C_Init+0x270>)
 8002718:	f7fe fa5c 	bl	8000bd4 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d008      	beq.n	8002736 <HAL_I2C_Init+0x10e>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	2b80      	cmp	r3, #128	; 0x80
 800272a:	d004      	beq.n	8002736 <HAL_I2C_Init+0x10e>
 800272c:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8002730:	4859      	ldr	r0, [pc, #356]	; (8002898 <HAL_I2C_Init+0x270>)
 8002732:	f7fe fa4f 	bl	8000bd4 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d106      	bne.n	8002750 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7fe f880 	bl	8000850 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2224      	movs	r2, #36	; 0x24
 8002754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 0201 	bic.w	r2, r2, #1
 8002766:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002776:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002786:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002788:	f000 f926 	bl	80029d8 <HAL_RCC_GetPCLK1Freq>
 800278c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	4a43      	ldr	r2, [pc, #268]	; (80028a0 <HAL_I2C_Init+0x278>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d807      	bhi.n	80027a8 <HAL_I2C_Init+0x180>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	4a42      	ldr	r2, [pc, #264]	; (80028a4 <HAL_I2C_Init+0x27c>)
 800279c:	4293      	cmp	r3, r2
 800279e:	bf94      	ite	ls
 80027a0:	2301      	movls	r3, #1
 80027a2:	2300      	movhi	r3, #0
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	e006      	b.n	80027b6 <HAL_I2C_Init+0x18e>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	4a3f      	ldr	r2, [pc, #252]	; (80028a8 <HAL_I2C_Init+0x280>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	bf94      	ite	ls
 80027b0:	2301      	movls	r3, #1
 80027b2:	2300      	movhi	r3, #0
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e0fb      	b.n	80029b6 <HAL_I2C_Init+0x38e>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	4a3a      	ldr	r2, [pc, #232]	; (80028ac <HAL_I2C_Init+0x284>)
 80027c2:	fba2 2303 	umull	r2, r3, r2, r3
 80027c6:	0c9b      	lsrs	r3, r3, #18
 80027c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68ba      	ldr	r2, [r7, #8]
 80027da:	430a      	orrs	r2, r1
 80027dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	4a2c      	ldr	r2, [pc, #176]	; (80028a0 <HAL_I2C_Init+0x278>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d802      	bhi.n	80027f8 <HAL_I2C_Init+0x1d0>
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	3301      	adds	r3, #1
 80027f6:	e009      	b.n	800280c <HAL_I2C_Init+0x1e4>
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80027fe:	fb02 f303 	mul.w	r3, r2, r3
 8002802:	4a2b      	ldr	r2, [pc, #172]	; (80028b0 <HAL_I2C_Init+0x288>)
 8002804:	fba2 2303 	umull	r2, r3, r2, r3
 8002808:	099b      	lsrs	r3, r3, #6
 800280a:	3301      	adds	r3, #1
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	6812      	ldr	r2, [r2, #0]
 8002810:	430b      	orrs	r3, r1
 8002812:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800281e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	491e      	ldr	r1, [pc, #120]	; (80028a0 <HAL_I2C_Init+0x278>)
 8002828:	428b      	cmp	r3, r1
 800282a:	d819      	bhi.n	8002860 <HAL_I2C_Init+0x238>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	1e59      	subs	r1, r3, #1
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	fbb1 f3f3 	udiv	r3, r1, r3
 800283a:	1c59      	adds	r1, r3, #1
 800283c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002840:	400b      	ands	r3, r1
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00a      	beq.n	800285c <HAL_I2C_Init+0x234>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	1e59      	subs	r1, r3, #1
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	fbb1 f3f3 	udiv	r3, r1, r3
 8002854:	3301      	adds	r3, #1
 8002856:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800285a:	e065      	b.n	8002928 <HAL_I2C_Init+0x300>
 800285c:	2304      	movs	r3, #4
 800285e:	e063      	b.n	8002928 <HAL_I2C_Init+0x300>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d125      	bne.n	80028b4 <HAL_I2C_Init+0x28c>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	1e58      	subs	r0, r3, #1
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6859      	ldr	r1, [r3, #4]
 8002870:	460b      	mov	r3, r1
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	440b      	add	r3, r1
 8002876:	fbb0 f3f3 	udiv	r3, r0, r3
 800287a:	3301      	adds	r3, #1
 800287c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002880:	2b00      	cmp	r3, #0
 8002882:	bf0c      	ite	eq
 8002884:	2301      	moveq	r3, #1
 8002886:	2300      	movne	r3, #0
 8002888:	b2db      	uxtb	r3, r3
 800288a:	e026      	b.n	80028da <HAL_I2C_Init+0x2b2>
 800288c:	40005400 	.word	0x40005400
 8002890:	40005800 	.word	0x40005800
 8002894:	40005c00 	.word	0x40005c00
 8002898:	0800511c 	.word	0x0800511c
 800289c:	00061a80 	.word	0x00061a80
 80028a0:	000186a0 	.word	0x000186a0
 80028a4:	001e847f 	.word	0x001e847f
 80028a8:	003d08ff 	.word	0x003d08ff
 80028ac:	431bde83 	.word	0x431bde83
 80028b0:	10624dd3 	.word	0x10624dd3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	1e58      	subs	r0, r3, #1
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6859      	ldr	r1, [r3, #4]
 80028bc:	460b      	mov	r3, r1
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	0099      	lsls	r1, r3, #2
 80028c4:	440b      	add	r3, r1
 80028c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ca:	3301      	adds	r3, #1
 80028cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	bf0c      	ite	eq
 80028d4:	2301      	moveq	r3, #1
 80028d6:	2300      	movne	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <HAL_I2C_Init+0x2ba>
 80028de:	2301      	movs	r3, #1
 80028e0:	e022      	b.n	8002928 <HAL_I2C_Init+0x300>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10e      	bne.n	8002908 <HAL_I2C_Init+0x2e0>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	1e58      	subs	r0, r3, #1
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6859      	ldr	r1, [r3, #4]
 80028f2:	460b      	mov	r3, r1
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	440b      	add	r3, r1
 80028f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80028fc:	3301      	adds	r3, #1
 80028fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002906:	e00f      	b.n	8002928 <HAL_I2C_Init+0x300>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	1e58      	subs	r0, r3, #1
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6859      	ldr	r1, [r3, #4]
 8002910:	460b      	mov	r3, r1
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	0099      	lsls	r1, r3, #2
 8002918:	440b      	add	r3, r1
 800291a:	fbb0 f3f3 	udiv	r3, r0, r3
 800291e:	3301      	adds	r3, #1
 8002920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002924:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002928:	6879      	ldr	r1, [r7, #4]
 800292a:	6809      	ldr	r1, [r1, #0]
 800292c:	4313      	orrs	r3, r2
 800292e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69da      	ldr	r2, [r3, #28]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	431a      	orrs	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	430a      	orrs	r2, r1
 800294a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002956:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	6911      	ldr	r1, [r2, #16]
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	68d2      	ldr	r2, [r2, #12]
 8002962:	4311      	orrs	r1, r2
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	6812      	ldr	r2, [r2, #0]
 8002968:	430b      	orrs	r3, r1
 800296a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	695a      	ldr	r2, [r3, #20]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	431a      	orrs	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f042 0201 	orr.w	r2, r2, #1
 8002996:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2220      	movs	r2, #32
 80029a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop

080029c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029c4:	4b03      	ldr	r3, [pc, #12]	; (80029d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80029c6:	681b      	ldr	r3, [r3, #0]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	20000000 	.word	0x20000000

080029d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029dc:	f7ff fff0 	bl	80029c0 <HAL_RCC_GetHCLKFreq>
 80029e0:	4602      	mov	r2, r0
 80029e2:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	0a9b      	lsrs	r3, r3, #10
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	4903      	ldr	r1, [pc, #12]	; (80029fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80029ee:	5ccb      	ldrb	r3, [r1, r3]
 80029f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40023800 	.word	0x40023800
 80029fc:	080051c8 	.word	0x080051c8

08002a00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a04:	f7ff ffdc 	bl	80029c0 <HAL_RCC_GetHCLKFreq>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	0b5b      	lsrs	r3, r3, #13
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	4903      	ldr	r1, [pc, #12]	; (8002a24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a16:	5ccb      	ldrb	r3, [r1, r3]
 8002a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40023800 	.word	0x40023800
 8002a24:	080051c8 	.word	0x080051c8

08002a28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e0bf      	b.n	8002bba <HAL_UART_Init+0x192>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d031      	beq.n	8002aa6 <HAL_UART_Init+0x7e>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a5f      	ldr	r2, [pc, #380]	; (8002bc4 <HAL_UART_Init+0x19c>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d013      	beq.n	8002a74 <HAL_UART_Init+0x4c>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a5d      	ldr	r2, [pc, #372]	; (8002bc8 <HAL_UART_Init+0x1a0>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d00e      	beq.n	8002a74 <HAL_UART_Init+0x4c>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a5c      	ldr	r2, [pc, #368]	; (8002bcc <HAL_UART_Init+0x1a4>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d009      	beq.n	8002a74 <HAL_UART_Init+0x4c>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a5a      	ldr	r2, [pc, #360]	; (8002bd0 <HAL_UART_Init+0x1a8>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d004      	beq.n	8002a74 <HAL_UART_Init+0x4c>
 8002a6a:	f240 1173 	movw	r1, #371	; 0x173
 8002a6e:	4859      	ldr	r0, [pc, #356]	; (8002bd4 <HAL_UART_Init+0x1ac>)
 8002a70:	f7fe f8b0 	bl	8000bd4 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d037      	beq.n	8002aec <HAL_UART_Init+0xc4>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a84:	d032      	beq.n	8002aec <HAL_UART_Init+0xc4>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a8e:	d02d      	beq.n	8002aec <HAL_UART_Init+0xc4>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a98:	d028      	beq.n	8002aec <HAL_UART_Init+0xc4>
 8002a9a:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8002a9e:	484d      	ldr	r0, [pc, #308]	; (8002bd4 <HAL_UART_Init+0x1ac>)
 8002aa0:	f7fe f898 	bl	8000bd4 <assert_failed>
 8002aa4:	e022      	b.n	8002aec <HAL_UART_Init+0xc4>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a46      	ldr	r2, [pc, #280]	; (8002bc4 <HAL_UART_Init+0x19c>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d01d      	beq.n	8002aec <HAL_UART_Init+0xc4>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a44      	ldr	r2, [pc, #272]	; (8002bc8 <HAL_UART_Init+0x1a0>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d018      	beq.n	8002aec <HAL_UART_Init+0xc4>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a43      	ldr	r2, [pc, #268]	; (8002bcc <HAL_UART_Init+0x1a4>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d013      	beq.n	8002aec <HAL_UART_Init+0xc4>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a43      	ldr	r2, [pc, #268]	; (8002bd8 <HAL_UART_Init+0x1b0>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d00e      	beq.n	8002aec <HAL_UART_Init+0xc4>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a42      	ldr	r2, [pc, #264]	; (8002bdc <HAL_UART_Init+0x1b4>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d009      	beq.n	8002aec <HAL_UART_Init+0xc4>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a3c      	ldr	r2, [pc, #240]	; (8002bd0 <HAL_UART_Init+0x1a8>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d004      	beq.n	8002aec <HAL_UART_Init+0xc4>
 8002ae2:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8002ae6:	483b      	ldr	r0, [pc, #236]	; (8002bd4 <HAL_UART_Init+0x1ac>)
 8002ae8:	f7fe f874 	bl	8000bd4 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d009      	beq.n	8002b08 <HAL_UART_Init+0xe0>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002afc:	d004      	beq.n	8002b08 <HAL_UART_Init+0xe0>
 8002afe:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8002b02:	4834      	ldr	r0, [pc, #208]	; (8002bd4 <HAL_UART_Init+0x1ac>)
 8002b04:	f7fe f866 	bl	8000bd4 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	69db      	ldr	r3, [r3, #28]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d009      	beq.n	8002b24 <HAL_UART_Init+0xfc>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b18:	d004      	beq.n	8002b24 <HAL_UART_Init+0xfc>
 8002b1a:	f240 117b 	movw	r1, #379	; 0x17b
 8002b1e:	482d      	ldr	r0, [pc, #180]	; (8002bd4 <HAL_UART_Init+0x1ac>)
 8002b20:	f7fe f858 	bl	8000bd4 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d111      	bne.n	8002b54 <HAL_UART_Init+0x12c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 fb37 	bl	80031ac <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d102      	bne.n	8002b4c <HAL_UART_Init+0x124>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a25      	ldr	r2, [pc, #148]	; (8002be0 <HAL_UART_Init+0x1b8>)
 8002b4a:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2224      	movs	r2, #36	; 0x24
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68da      	ldr	r2, [r3, #12]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 fcf3 	bl	8003558 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	691a      	ldr	r2, [r3, #16]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	695a      	ldr	r2, [r3, #20]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68da      	ldr	r2, [r3, #12]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ba0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2220      	movs	r2, #32
 8002bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	40011000 	.word	0x40011000
 8002bc8:	40004400 	.word	0x40004400
 8002bcc:	40004800 	.word	0x40004800
 8002bd0:	40011400 	.word	0x40011400
 8002bd4:	08005154 	.word	0x08005154
 8002bd8:	40004c00 	.word	0x40004c00
 8002bdc:	40005000 	.word	0x40005000
 8002be0:	08000e85 	.word	0x08000e85

08002be4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b0ba      	sub	sp, #232	; 0xe8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002c22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10f      	bne.n	8002c4a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c2e:	f003 0320 	and.w	r3, r3, #32
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d009      	beq.n	8002c4a <HAL_UART_IRQHandler+0x66>
 8002c36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c3a:	f003 0320 	and.w	r3, r3, #32
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 fbcb 	bl	80033de <UART_Receive_IT>
      return;
 8002c48:	e25b      	b.n	8003102 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002c4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	f000 80e1 	beq.w	8002e16 <HAL_UART_IRQHandler+0x232>
 8002c54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d106      	bne.n	8002c6e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c64:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f000 80d4 	beq.w	8002e16 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00b      	beq.n	8002c92 <HAL_UART_IRQHandler+0xae>
 8002c7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d005      	beq.n	8002c92 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	f043 0201 	orr.w	r2, r3, #1
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c96:	f003 0304 	and.w	r3, r3, #4
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00b      	beq.n	8002cb6 <HAL_UART_IRQHandler+0xd2>
 8002c9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d005      	beq.n	8002cb6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	f043 0202 	orr.w	r2, r3, #2
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00b      	beq.n	8002cda <HAL_UART_IRQHandler+0xf6>
 8002cc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d005      	beq.n	8002cda <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	f043 0204 	orr.w	r2, r3, #4
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cde:	f003 0308 	and.w	r3, r3, #8
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d011      	beq.n	8002d0a <HAL_UART_IRQHandler+0x126>
 8002ce6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cea:	f003 0320 	and.w	r3, r3, #32
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d105      	bne.n	8002cfe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002cf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d005      	beq.n	8002d0a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	f043 0208 	orr.w	r2, r3, #8
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 81f2 	beq.w	80030f8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d18:	f003 0320 	and.w	r3, r3, #32
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d008      	beq.n	8002d32 <HAL_UART_IRQHandler+0x14e>
 8002d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d24:	f003 0320 	and.w	r3, r3, #32
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d002      	beq.n	8002d32 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 fb56 	bl	80033de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3c:	2b40      	cmp	r3, #64	; 0x40
 8002d3e:	bf0c      	ite	eq
 8002d40:	2301      	moveq	r3, #1
 8002d42:	2300      	movne	r3, #0
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	f003 0308 	and.w	r3, r3, #8
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d103      	bne.n	8002d5e <HAL_UART_IRQHandler+0x17a>
 8002d56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d051      	beq.n	8002e02 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 fa5c 	bl	800321c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d6e:	2b40      	cmp	r3, #64	; 0x40
 8002d70:	d142      	bne.n	8002df8 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	3314      	adds	r3, #20
 8002d78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d80:	e853 3f00 	ldrex	r3, [r3]
 8002d84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002d88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	3314      	adds	r3, #20
 8002d9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002d9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002da2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002da6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002daa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002dae:	e841 2300 	strex	r3, r2, [r1]
 8002db2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002db6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1d9      	bne.n	8002d72 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d013      	beq.n	8002dee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dca:	4a7f      	ldr	r2, [pc, #508]	; (8002fc8 <HAL_UART_IRQHandler+0x3e4>)
 8002dcc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff f924 	bl	8002020 <HAL_DMA_Abort_IT>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d019      	beq.n	8002e12 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002de8:	4610      	mov	r0, r2
 8002dea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dec:	e011      	b.n	8002e12 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002df6:	e00c      	b.n	8002e12 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e00:	e007      	b.n	8002e12 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002e10:	e172      	b.n	80030f8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e12:	bf00      	nop
    return;
 8002e14:	e170      	b.n	80030f8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	f040 814c 	bne.w	80030b8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e24:	f003 0310 	and.w	r3, r3, #16
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 8145 	beq.w	80030b8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002e2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e32:	f003 0310 	and.w	r3, r3, #16
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 813e 	beq.w	80030b8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	60bb      	str	r3, [r7, #8]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	60bb      	str	r3, [r7, #8]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	60bb      	str	r3, [r7, #8]
 8002e50:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e5c:	2b40      	cmp	r3, #64	; 0x40
 8002e5e:	f040 80b5 	bne.w	8002fcc <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002e6e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f000 8142 	beq.w	80030fc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e7c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e80:	429a      	cmp	r2, r3
 8002e82:	f080 813b 	bcs.w	80030fc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e8c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e92:	69db      	ldr	r3, [r3, #28]
 8002e94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e98:	f000 8088 	beq.w	8002fac <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	330c      	adds	r3, #12
 8002ea2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002eaa:	e853 3f00 	ldrex	r3, [r3]
 8002eae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002eb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002eb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002eba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	330c      	adds	r3, #12
 8002ec4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002ec8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002ecc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002ed4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002ed8:	e841 2300 	strex	r3, r2, [r1]
 8002edc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002ee0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1d9      	bne.n	8002e9c <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	3314      	adds	r3, #20
 8002eee:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ef2:	e853 3f00 	ldrex	r3, [r3]
 8002ef6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002ef8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002efa:	f023 0301 	bic.w	r3, r3, #1
 8002efe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	3314      	adds	r3, #20
 8002f08:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f0c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002f10:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f12:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002f14:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f18:	e841 2300 	strex	r3, r2, [r1]
 8002f1c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002f1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1e1      	bne.n	8002ee8 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	3314      	adds	r3, #20
 8002f2a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f2e:	e853 3f00 	ldrex	r3, [r3]
 8002f32:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002f34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	3314      	adds	r3, #20
 8002f44:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002f48:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f4a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f4c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002f4e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f50:	e841 2300 	strex	r3, r2, [r1]
 8002f54:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002f56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1e3      	bne.n	8002f24 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	330c      	adds	r3, #12
 8002f70:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f74:	e853 3f00 	ldrex	r3, [r3]
 8002f78:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002f7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f7c:	f023 0310 	bic.w	r3, r3, #16
 8002f80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	330c      	adds	r3, #12
 8002f8a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002f8e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002f90:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f92:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f96:	e841 2300 	strex	r3, r2, [r1]
 8002f9a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002f9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1e3      	bne.n	8002f6a <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fe ffca 	bl	8001f40 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8002fb8:	b292      	uxth	r2, r2
 8002fba:	1a8a      	subs	r2, r1, r2
 8002fbc:	b292      	uxth	r2, r2
 8002fbe:	4611      	mov	r1, r2
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002fc4:	e09a      	b.n	80030fc <HAL_UART_IRQHandler+0x518>
 8002fc6:	bf00      	nop
 8002fc8:	080032e3 	.word	0x080032e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f000 808c 	beq.w	8003100 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002fe8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f000 8087 	beq.w	8003100 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	330c      	adds	r3, #12
 8002ff8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ffc:	e853 3f00 	ldrex	r3, [r3]
 8003000:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003004:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003008:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	330c      	adds	r3, #12
 8003012:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003016:	647a      	str	r2, [r7, #68]	; 0x44
 8003018:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800301a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800301c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800301e:	e841 2300 	strex	r3, r2, [r1]
 8003022:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1e3      	bne.n	8002ff2 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	3314      	adds	r3, #20
 8003030:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	e853 3f00 	ldrex	r3, [r3]
 8003038:	623b      	str	r3, [r7, #32]
   return(result);
 800303a:	6a3b      	ldr	r3, [r7, #32]
 800303c:	f023 0301 	bic.w	r3, r3, #1
 8003040:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	3314      	adds	r3, #20
 800304a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800304e:	633a      	str	r2, [r7, #48]	; 0x30
 8003050:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003052:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003054:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003056:	e841 2300 	strex	r3, r2, [r1]
 800305a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800305c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1e3      	bne.n	800302a <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2220      	movs	r2, #32
 8003066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	330c      	adds	r3, #12
 8003076:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	e853 3f00 	ldrex	r3, [r3]
 800307e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f023 0310 	bic.w	r3, r3, #16
 8003086:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	330c      	adds	r3, #12
 8003090:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003094:	61fa      	str	r2, [r7, #28]
 8003096:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003098:	69b9      	ldr	r1, [r7, #24]
 800309a:	69fa      	ldr	r2, [r7, #28]
 800309c:	e841 2300 	strex	r3, r2, [r1]
 80030a0:	617b      	str	r3, [r7, #20]
   return(result);
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1e3      	bne.n	8003070 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030ac:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 80030b0:	4611      	mov	r1, r2
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80030b6:	e023      	b.n	8003100 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80030b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d009      	beq.n	80030d8 <HAL_UART_IRQHandler+0x4f4>
 80030c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d003      	beq.n	80030d8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 f91b 	bl	800330c <UART_Transmit_IT>
    return;
 80030d6:	e014      	b.n	8003102 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80030d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00e      	beq.n	8003102 <HAL_UART_IRQHandler+0x51e>
 80030e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d008      	beq.n	8003102 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 f95b 	bl	80033ac <UART_EndTransmit_IT>
    return;
 80030f6:	e004      	b.n	8003102 <HAL_UART_IRQHandler+0x51e>
    return;
 80030f8:	bf00      	nop
 80030fa:	e002      	b.n	8003102 <HAL_UART_IRQHandler+0x51e>
      return;
 80030fc:	bf00      	nop
 80030fe:	e000      	b.n	8003102 <HAL_UART_IRQHandler+0x51e>
      return;
 8003100:	bf00      	nop
  }
}
 8003102:	37e8      	adds	r7, #232	; 0xe8
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	460b      	mov	r3, r1
 800319e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a10      	ldr	r2, [pc, #64]	; (80031f8 <UART_InitCallbacksToDefault+0x4c>)
 80031b8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a0f      	ldr	r2, [pc, #60]	; (80031fc <UART_InitCallbacksToDefault+0x50>)
 80031be:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a0f      	ldr	r2, [pc, #60]	; (8003200 <UART_InitCallbacksToDefault+0x54>)
 80031c4:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a0e      	ldr	r2, [pc, #56]	; (8003204 <UART_InitCallbacksToDefault+0x58>)
 80031ca:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a0e      	ldr	r2, [pc, #56]	; (8003208 <UART_InitCallbacksToDefault+0x5c>)
 80031d0:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a0d      	ldr	r2, [pc, #52]	; (800320c <UART_InitCallbacksToDefault+0x60>)
 80031d6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a0d      	ldr	r2, [pc, #52]	; (8003210 <UART_InitCallbacksToDefault+0x64>)
 80031dc:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a0c      	ldr	r2, [pc, #48]	; (8003214 <UART_InitCallbacksToDefault+0x68>)
 80031e2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a0c      	ldr	r2, [pc, #48]	; (8003218 <UART_InitCallbacksToDefault+0x6c>)
 80031e8:	669a      	str	r2, [r3, #104]	; 0x68

}
 80031ea:	bf00      	nop
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	0800311d 	.word	0x0800311d
 80031fc:	08003109 	.word	0x08003109
 8003200:	08003131 	.word	0x08003131
 8003204:	08000bb5 	.word	0x08000bb5
 8003208:	08003145 	.word	0x08003145
 800320c:	08003159 	.word	0x08003159
 8003210:	0800316d 	.word	0x0800316d
 8003214:	08003181 	.word	0x08003181
 8003218:	08003195 	.word	0x08003195

0800321c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800321c:	b480      	push	{r7}
 800321e:	b095      	sub	sp, #84	; 0x54
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	330c      	adds	r3, #12
 800322a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800322c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800322e:	e853 3f00 	ldrex	r3, [r3]
 8003232:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003236:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800323a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	330c      	adds	r3, #12
 8003242:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003244:	643a      	str	r2, [r7, #64]	; 0x40
 8003246:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003248:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800324a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800324c:	e841 2300 	strex	r3, r2, [r1]
 8003250:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1e5      	bne.n	8003224 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	3314      	adds	r3, #20
 800325e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003260:	6a3b      	ldr	r3, [r7, #32]
 8003262:	e853 3f00 	ldrex	r3, [r3]
 8003266:	61fb      	str	r3, [r7, #28]
   return(result);
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	f023 0301 	bic.w	r3, r3, #1
 800326e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	3314      	adds	r3, #20
 8003276:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003278:	62fa      	str	r2, [r7, #44]	; 0x2c
 800327a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800327c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800327e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003280:	e841 2300 	strex	r3, r2, [r1]
 8003284:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1e5      	bne.n	8003258 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003290:	2b01      	cmp	r3, #1
 8003292:	d119      	bne.n	80032c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	330c      	adds	r3, #12
 800329a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	e853 3f00 	ldrex	r3, [r3]
 80032a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	f023 0310 	bic.w	r3, r3, #16
 80032aa:	647b      	str	r3, [r7, #68]	; 0x44
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	330c      	adds	r3, #12
 80032b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032b4:	61ba      	str	r2, [r7, #24]
 80032b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b8:	6979      	ldr	r1, [r7, #20]
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	e841 2300 	strex	r3, r2, [r1]
 80032c0:	613b      	str	r3, [r7, #16]
   return(result);
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1e5      	bne.n	8003294 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2220      	movs	r2, #32
 80032cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80032d6:	bf00      	nop
 80032d8:	3754      	adds	r7, #84	; 0x54
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b084      	sub	sp, #16
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003300:	68f8      	ldr	r0, [r7, #12]
 8003302:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003304:	bf00      	nop
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b21      	cmp	r3, #33	; 0x21
 800331e:	d13e      	bne.n	800339e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003328:	d114      	bne.n	8003354 <UART_Transmit_IT+0x48>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d110      	bne.n	8003354 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	881b      	ldrh	r3, [r3, #0]
 800333c:	461a      	mov	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003346:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	1c9a      	adds	r2, r3, #2
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	621a      	str	r2, [r3, #32]
 8003352:	e008      	b.n	8003366 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	1c59      	adds	r1, r3, #1
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	6211      	str	r1, [r2, #32]
 800335e:	781a      	ldrb	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800336a:	b29b      	uxth	r3, r3
 800336c:	3b01      	subs	r3, #1
 800336e:	b29b      	uxth	r3, r3
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	4619      	mov	r1, r3
 8003374:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10f      	bne.n	800339a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68da      	ldr	r2, [r3, #12]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003388:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68da      	ldr	r2, [r3, #12]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003398:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800339a:	2300      	movs	r3, #0
 800339c:	e000      	b.n	80033a0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800339e:	2302      	movs	r3, #2
  }
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3714      	adds	r7, #20
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68da      	ldr	r2, [r3, #12]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033c2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2220      	movs	r2, #32
 80033c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b08c      	sub	sp, #48	; 0x30
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b22      	cmp	r3, #34	; 0x22
 80033f0:	f040 80ad 	bne.w	800354e <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033fc:	d117      	bne.n	800342e <UART_Receive_IT+0x50>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d113      	bne.n	800342e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003406:	2300      	movs	r3, #0
 8003408:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	b29b      	uxth	r3, r3
 8003418:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800341c:	b29a      	uxth	r2, r3
 800341e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003420:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003426:	1c9a      	adds	r2, r3, #2
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	629a      	str	r2, [r3, #40]	; 0x28
 800342c:	e026      	b.n	800347c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003432:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003434:	2300      	movs	r3, #0
 8003436:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003440:	d007      	beq.n	8003452 <UART_Receive_IT+0x74>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10a      	bne.n	8003460 <UART_Receive_IT+0x82>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d106      	bne.n	8003460 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	b2da      	uxtb	r2, r3
 800345a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800345c:	701a      	strb	r2, [r3, #0]
 800345e:	e008      	b.n	8003472 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	b2db      	uxtb	r3, r3
 8003468:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800346c:	b2da      	uxtb	r2, r3
 800346e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003470:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003476:	1c5a      	adds	r2, r3, #1
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003480:	b29b      	uxth	r3, r3
 8003482:	3b01      	subs	r3, #1
 8003484:	b29b      	uxth	r3, r3
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	4619      	mov	r1, r3
 800348a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800348c:	2b00      	cmp	r3, #0
 800348e:	d15c      	bne.n	800354a <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68da      	ldr	r2, [r3, #12]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 0220 	bic.w	r2, r2, #32
 800349e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68da      	ldr	r2, [r3, #12]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	695a      	ldr	r2, [r3, #20]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0201 	bic.w	r2, r2, #1
 80034be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2220      	movs	r2, #32
 80034c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d136      	bne.n	800353e <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	330c      	adds	r3, #12
 80034dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	e853 3f00 	ldrex	r3, [r3]
 80034e4:	613b      	str	r3, [r7, #16]
   return(result);
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	f023 0310 	bic.w	r3, r3, #16
 80034ec:	627b      	str	r3, [r7, #36]	; 0x24
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	330c      	adds	r3, #12
 80034f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034f6:	623a      	str	r2, [r7, #32]
 80034f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fa:	69f9      	ldr	r1, [r7, #28]
 80034fc:	6a3a      	ldr	r2, [r7, #32]
 80034fe:	e841 2300 	strex	r3, r2, [r1]
 8003502:	61bb      	str	r3, [r7, #24]
   return(result);
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1e5      	bne.n	80034d6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0310 	and.w	r3, r3, #16
 8003514:	2b10      	cmp	r3, #16
 8003516:	d10a      	bne.n	800352e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003518:	2300      	movs	r3, #0
 800351a:	60fb      	str	r3, [r7, #12]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	60fb      	str	r3, [r7, #12]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8003536:	4611      	mov	r1, r2
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	4798      	blx	r3
 800353c:	e003      	b.n	8003546 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003546:	2300      	movs	r3, #0
 8003548:	e002      	b.n	8003550 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800354a:	2300      	movs	r3, #0
 800354c:	e000      	b.n	8003550 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800354e:	2302      	movs	r3, #2
  }
}
 8003550:	4618      	mov	r0, r3
 8003552:	3730      	adds	r7, #48	; 0x30
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003558:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800355c:	b0c0      	sub	sp, #256	; 0x100
 800355e:	af00      	add	r7, sp, #0
 8003560:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8003564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	4bcf      	ldr	r3, [pc, #828]	; (80038a8 <UART_SetConfig+0x350>)
 800356c:	429a      	cmp	r2, r3
 800356e:	d904      	bls.n	800357a <UART_SetConfig+0x22>
 8003570:	f640 6161 	movw	r1, #3681	; 0xe61
 8003574:	48cd      	ldr	r0, [pc, #820]	; (80038ac <UART_SetConfig+0x354>)
 8003576:	f7fd fb2d 	bl	8000bd4 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800357a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00a      	beq.n	800359a <UART_SetConfig+0x42>
 8003584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800358e:	d004      	beq.n	800359a <UART_SetConfig+0x42>
 8003590:	f640 6162 	movw	r1, #3682	; 0xe62
 8003594:	48c5      	ldr	r0, [pc, #788]	; (80038ac <UART_SetConfig+0x354>)
 8003596:	f7fd fb1d 	bl	8000bd4 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800359a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d010      	beq.n	80035c6 <UART_SetConfig+0x6e>
 80035a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035ae:	d00a      	beq.n	80035c6 <UART_SetConfig+0x6e>
 80035b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80035ba:	d004      	beq.n	80035c6 <UART_SetConfig+0x6e>
 80035bc:	f640 6163 	movw	r1, #3683	; 0xe63
 80035c0:	48ba      	ldr	r0, [pc, #744]	; (80038ac <UART_SetConfig+0x354>)
 80035c2:	f7fd fb07 	bl	8000bd4 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80035c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ca:	695a      	ldr	r2, [r3, #20]
 80035cc:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80035d0:	4013      	ands	r3, r2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d104      	bne.n	80035e0 <UART_SetConfig+0x88>
 80035d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d104      	bne.n	80035ea <UART_SetConfig+0x92>
 80035e0:	f640 6164 	movw	r1, #3684	; 0xe64
 80035e4:	48b1      	ldr	r0, [pc, #708]	; (80038ac <UART_SetConfig+0x354>)
 80035e6:	f7fd faf5 	bl	8000bd4 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80035f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035fa:	68d9      	ldr	r1, [r3, #12]
 80035fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	ea40 0301 	orr.w	r3, r0, r1
 8003606:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800360c:	689a      	ldr	r2, [r3, #8]
 800360e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	431a      	orrs	r2, r3
 8003616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800361a:	695b      	ldr	r3, [r3, #20]
 800361c:	431a      	orrs	r2, r3
 800361e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003622:	69db      	ldr	r3, [r3, #28]
 8003624:	4313      	orrs	r3, r2
 8003626:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800362a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003636:	f021 010c 	bic.w	r1, r1, #12
 800363a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003644:	430b      	orrs	r3, r1
 8003646:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003658:	6999      	ldr	r1, [r3, #24]
 800365a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	ea40 0301 	orr.w	r3, r0, r1
 8003664:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	4b90      	ldr	r3, [pc, #576]	; (80038b0 <UART_SetConfig+0x358>)
 800366e:	429a      	cmp	r2, r3
 8003670:	d005      	beq.n	800367e <UART_SetConfig+0x126>
 8003672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	4b8e      	ldr	r3, [pc, #568]	; (80038b4 <UART_SetConfig+0x35c>)
 800367a:	429a      	cmp	r2, r3
 800367c:	d104      	bne.n	8003688 <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800367e:	f7ff f9bf 	bl	8002a00 <HAL_RCC_GetPCLK2Freq>
 8003682:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003686:	e003      	b.n	8003690 <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003688:	f7ff f9a6 	bl	80029d8 <HAL_RCC_GetPCLK1Freq>
 800368c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800369a:	f040 810f 	bne.w	80038bc <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800369e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036a2:	2200      	movs	r2, #0
 80036a4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80036a8:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80036ac:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80036b0:	4622      	mov	r2, r4
 80036b2:	462b      	mov	r3, r5
 80036b4:	1891      	adds	r1, r2, r2
 80036b6:	65b9      	str	r1, [r7, #88]	; 0x58
 80036b8:	415b      	adcs	r3, r3
 80036ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036bc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80036c0:	4621      	mov	r1, r4
 80036c2:	eb12 0801 	adds.w	r8, r2, r1
 80036c6:	4629      	mov	r1, r5
 80036c8:	eb43 0901 	adc.w	r9, r3, r1
 80036cc:	f04f 0200 	mov.w	r2, #0
 80036d0:	f04f 0300 	mov.w	r3, #0
 80036d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036dc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036e0:	4690      	mov	r8, r2
 80036e2:	4699      	mov	r9, r3
 80036e4:	4623      	mov	r3, r4
 80036e6:	eb18 0303 	adds.w	r3, r8, r3
 80036ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80036ee:	462b      	mov	r3, r5
 80036f0:	eb49 0303 	adc.w	r3, r9, r3
 80036f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80036f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003704:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003708:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800370c:	460b      	mov	r3, r1
 800370e:	18db      	adds	r3, r3, r3
 8003710:	653b      	str	r3, [r7, #80]	; 0x50
 8003712:	4613      	mov	r3, r2
 8003714:	eb42 0303 	adc.w	r3, r2, r3
 8003718:	657b      	str	r3, [r7, #84]	; 0x54
 800371a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800371e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003722:	f7fc fda5 	bl	8000270 <__aeabi_uldivmod>
 8003726:	4602      	mov	r2, r0
 8003728:	460b      	mov	r3, r1
 800372a:	4b63      	ldr	r3, [pc, #396]	; (80038b8 <UART_SetConfig+0x360>)
 800372c:	fba3 2302 	umull	r2, r3, r3, r2
 8003730:	095b      	lsrs	r3, r3, #5
 8003732:	011c      	lsls	r4, r3, #4
 8003734:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003738:	2200      	movs	r2, #0
 800373a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800373e:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003742:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003746:	4642      	mov	r2, r8
 8003748:	464b      	mov	r3, r9
 800374a:	1891      	adds	r1, r2, r2
 800374c:	64b9      	str	r1, [r7, #72]	; 0x48
 800374e:	415b      	adcs	r3, r3
 8003750:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003752:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003756:	4641      	mov	r1, r8
 8003758:	eb12 0a01 	adds.w	sl, r2, r1
 800375c:	4649      	mov	r1, r9
 800375e:	eb43 0b01 	adc.w	fp, r3, r1
 8003762:	f04f 0200 	mov.w	r2, #0
 8003766:	f04f 0300 	mov.w	r3, #0
 800376a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800376e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003772:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003776:	4692      	mov	sl, r2
 8003778:	469b      	mov	fp, r3
 800377a:	4643      	mov	r3, r8
 800377c:	eb1a 0303 	adds.w	r3, sl, r3
 8003780:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003784:	464b      	mov	r3, r9
 8003786:	eb4b 0303 	adc.w	r3, fp, r3
 800378a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800378e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800379a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800379e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80037a2:	460b      	mov	r3, r1
 80037a4:	18db      	adds	r3, r3, r3
 80037a6:	643b      	str	r3, [r7, #64]	; 0x40
 80037a8:	4613      	mov	r3, r2
 80037aa:	eb42 0303 	adc.w	r3, r2, r3
 80037ae:	647b      	str	r3, [r7, #68]	; 0x44
 80037b0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80037b4:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80037b8:	f7fc fd5a 	bl	8000270 <__aeabi_uldivmod>
 80037bc:	4602      	mov	r2, r0
 80037be:	460b      	mov	r3, r1
 80037c0:	4611      	mov	r1, r2
 80037c2:	4b3d      	ldr	r3, [pc, #244]	; (80038b8 <UART_SetConfig+0x360>)
 80037c4:	fba3 2301 	umull	r2, r3, r3, r1
 80037c8:	095b      	lsrs	r3, r3, #5
 80037ca:	2264      	movs	r2, #100	; 0x64
 80037cc:	fb02 f303 	mul.w	r3, r2, r3
 80037d0:	1acb      	subs	r3, r1, r3
 80037d2:	00db      	lsls	r3, r3, #3
 80037d4:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80037d8:	4b37      	ldr	r3, [pc, #220]	; (80038b8 <UART_SetConfig+0x360>)
 80037da:	fba3 2302 	umull	r2, r3, r3, r2
 80037de:	095b      	lsrs	r3, r3, #5
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80037e6:	441c      	add	r4, r3
 80037e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037ec:	2200      	movs	r2, #0
 80037ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80037f2:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80037f6:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80037fa:	4642      	mov	r2, r8
 80037fc:	464b      	mov	r3, r9
 80037fe:	1891      	adds	r1, r2, r2
 8003800:	63b9      	str	r1, [r7, #56]	; 0x38
 8003802:	415b      	adcs	r3, r3
 8003804:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003806:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800380a:	4641      	mov	r1, r8
 800380c:	1851      	adds	r1, r2, r1
 800380e:	6339      	str	r1, [r7, #48]	; 0x30
 8003810:	4649      	mov	r1, r9
 8003812:	414b      	adcs	r3, r1
 8003814:	637b      	str	r3, [r7, #52]	; 0x34
 8003816:	f04f 0200 	mov.w	r2, #0
 800381a:	f04f 0300 	mov.w	r3, #0
 800381e:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003822:	4659      	mov	r1, fp
 8003824:	00cb      	lsls	r3, r1, #3
 8003826:	4651      	mov	r1, sl
 8003828:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800382c:	4651      	mov	r1, sl
 800382e:	00ca      	lsls	r2, r1, #3
 8003830:	4610      	mov	r0, r2
 8003832:	4619      	mov	r1, r3
 8003834:	4603      	mov	r3, r0
 8003836:	4642      	mov	r2, r8
 8003838:	189b      	adds	r3, r3, r2
 800383a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800383e:	464b      	mov	r3, r9
 8003840:	460a      	mov	r2, r1
 8003842:	eb42 0303 	adc.w	r3, r2, r3
 8003846:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800384a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003856:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800385a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800385e:	460b      	mov	r3, r1
 8003860:	18db      	adds	r3, r3, r3
 8003862:	62bb      	str	r3, [r7, #40]	; 0x28
 8003864:	4613      	mov	r3, r2
 8003866:	eb42 0303 	adc.w	r3, r2, r3
 800386a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800386c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003870:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003874:	f7fc fcfc 	bl	8000270 <__aeabi_uldivmod>
 8003878:	4602      	mov	r2, r0
 800387a:	460b      	mov	r3, r1
 800387c:	4b0e      	ldr	r3, [pc, #56]	; (80038b8 <UART_SetConfig+0x360>)
 800387e:	fba3 1302 	umull	r1, r3, r3, r2
 8003882:	095b      	lsrs	r3, r3, #5
 8003884:	2164      	movs	r1, #100	; 0x64
 8003886:	fb01 f303 	mul.w	r3, r1, r3
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	00db      	lsls	r3, r3, #3
 800388e:	3332      	adds	r3, #50	; 0x32
 8003890:	4a09      	ldr	r2, [pc, #36]	; (80038b8 <UART_SetConfig+0x360>)
 8003892:	fba2 2303 	umull	r2, r3, r2, r3
 8003896:	095b      	lsrs	r3, r3, #5
 8003898:	f003 0207 	and.w	r2, r3, #7
 800389c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4422      	add	r2, r4
 80038a4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80038a6:	e108      	b.n	8003aba <UART_SetConfig+0x562>
 80038a8:	00a037a0 	.word	0x00a037a0
 80038ac:	08005154 	.word	0x08005154
 80038b0:	40011000 	.word	0x40011000
 80038b4:	40011400 	.word	0x40011400
 80038b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038c0:	2200      	movs	r2, #0
 80038c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80038c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80038ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80038ce:	4642      	mov	r2, r8
 80038d0:	464b      	mov	r3, r9
 80038d2:	1891      	adds	r1, r2, r2
 80038d4:	6239      	str	r1, [r7, #32]
 80038d6:	415b      	adcs	r3, r3
 80038d8:	627b      	str	r3, [r7, #36]	; 0x24
 80038da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80038de:	4641      	mov	r1, r8
 80038e0:	1854      	adds	r4, r2, r1
 80038e2:	4649      	mov	r1, r9
 80038e4:	eb43 0501 	adc.w	r5, r3, r1
 80038e8:	f04f 0200 	mov.w	r2, #0
 80038ec:	f04f 0300 	mov.w	r3, #0
 80038f0:	00eb      	lsls	r3, r5, #3
 80038f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038f6:	00e2      	lsls	r2, r4, #3
 80038f8:	4614      	mov	r4, r2
 80038fa:	461d      	mov	r5, r3
 80038fc:	4643      	mov	r3, r8
 80038fe:	18e3      	adds	r3, r4, r3
 8003900:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003904:	464b      	mov	r3, r9
 8003906:	eb45 0303 	adc.w	r3, r5, r3
 800390a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800390e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800391a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800391e:	f04f 0200 	mov.w	r2, #0
 8003922:	f04f 0300 	mov.w	r3, #0
 8003926:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800392a:	4629      	mov	r1, r5
 800392c:	008b      	lsls	r3, r1, #2
 800392e:	4621      	mov	r1, r4
 8003930:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003934:	4621      	mov	r1, r4
 8003936:	008a      	lsls	r2, r1, #2
 8003938:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800393c:	f7fc fc98 	bl	8000270 <__aeabi_uldivmod>
 8003940:	4602      	mov	r2, r0
 8003942:	460b      	mov	r3, r1
 8003944:	4b60      	ldr	r3, [pc, #384]	; (8003ac8 <UART_SetConfig+0x570>)
 8003946:	fba3 2302 	umull	r2, r3, r3, r2
 800394a:	095b      	lsrs	r3, r3, #5
 800394c:	011c      	lsls	r4, r3, #4
 800394e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003952:	2200      	movs	r2, #0
 8003954:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003958:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800395c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003960:	4642      	mov	r2, r8
 8003962:	464b      	mov	r3, r9
 8003964:	1891      	adds	r1, r2, r2
 8003966:	61b9      	str	r1, [r7, #24]
 8003968:	415b      	adcs	r3, r3
 800396a:	61fb      	str	r3, [r7, #28]
 800396c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003970:	4641      	mov	r1, r8
 8003972:	1851      	adds	r1, r2, r1
 8003974:	6139      	str	r1, [r7, #16]
 8003976:	4649      	mov	r1, r9
 8003978:	414b      	adcs	r3, r1
 800397a:	617b      	str	r3, [r7, #20]
 800397c:	f04f 0200 	mov.w	r2, #0
 8003980:	f04f 0300 	mov.w	r3, #0
 8003984:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003988:	4659      	mov	r1, fp
 800398a:	00cb      	lsls	r3, r1, #3
 800398c:	4651      	mov	r1, sl
 800398e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003992:	4651      	mov	r1, sl
 8003994:	00ca      	lsls	r2, r1, #3
 8003996:	4610      	mov	r0, r2
 8003998:	4619      	mov	r1, r3
 800399a:	4603      	mov	r3, r0
 800399c:	4642      	mov	r2, r8
 800399e:	189b      	adds	r3, r3, r2
 80039a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80039a4:	464b      	mov	r3, r9
 80039a6:	460a      	mov	r2, r1
 80039a8:	eb42 0303 	adc.w	r3, r2, r3
 80039ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80039b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80039ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80039bc:	f04f 0200 	mov.w	r2, #0
 80039c0:	f04f 0300 	mov.w	r3, #0
 80039c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80039c8:	4649      	mov	r1, r9
 80039ca:	008b      	lsls	r3, r1, #2
 80039cc:	4641      	mov	r1, r8
 80039ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039d2:	4641      	mov	r1, r8
 80039d4:	008a      	lsls	r2, r1, #2
 80039d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80039da:	f7fc fc49 	bl	8000270 <__aeabi_uldivmod>
 80039de:	4602      	mov	r2, r0
 80039e0:	460b      	mov	r3, r1
 80039e2:	4b39      	ldr	r3, [pc, #228]	; (8003ac8 <UART_SetConfig+0x570>)
 80039e4:	fba3 1302 	umull	r1, r3, r3, r2
 80039e8:	095b      	lsrs	r3, r3, #5
 80039ea:	2164      	movs	r1, #100	; 0x64
 80039ec:	fb01 f303 	mul.w	r3, r1, r3
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	011b      	lsls	r3, r3, #4
 80039f4:	3332      	adds	r3, #50	; 0x32
 80039f6:	4a34      	ldr	r2, [pc, #208]	; (8003ac8 <UART_SetConfig+0x570>)
 80039f8:	fba2 2303 	umull	r2, r3, r2, r3
 80039fc:	095b      	lsrs	r3, r3, #5
 80039fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a02:	441c      	add	r4, r3
 8003a04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a08:	2200      	movs	r2, #0
 8003a0a:	673b      	str	r3, [r7, #112]	; 0x70
 8003a0c:	677a      	str	r2, [r7, #116]	; 0x74
 8003a0e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003a12:	4642      	mov	r2, r8
 8003a14:	464b      	mov	r3, r9
 8003a16:	1891      	adds	r1, r2, r2
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	415b      	adcs	r3, r3
 8003a1c:	60fb      	str	r3, [r7, #12]
 8003a1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a22:	4641      	mov	r1, r8
 8003a24:	1851      	adds	r1, r2, r1
 8003a26:	6039      	str	r1, [r7, #0]
 8003a28:	4649      	mov	r1, r9
 8003a2a:	414b      	adcs	r3, r1
 8003a2c:	607b      	str	r3, [r7, #4]
 8003a2e:	f04f 0200 	mov.w	r2, #0
 8003a32:	f04f 0300 	mov.w	r3, #0
 8003a36:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003a3a:	4659      	mov	r1, fp
 8003a3c:	00cb      	lsls	r3, r1, #3
 8003a3e:	4651      	mov	r1, sl
 8003a40:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a44:	4651      	mov	r1, sl
 8003a46:	00ca      	lsls	r2, r1, #3
 8003a48:	4610      	mov	r0, r2
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	4642      	mov	r2, r8
 8003a50:	189b      	adds	r3, r3, r2
 8003a52:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a54:	464b      	mov	r3, r9
 8003a56:	460a      	mov	r2, r1
 8003a58:	eb42 0303 	adc.w	r3, r2, r3
 8003a5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	663b      	str	r3, [r7, #96]	; 0x60
 8003a68:	667a      	str	r2, [r7, #100]	; 0x64
 8003a6a:	f04f 0200 	mov.w	r2, #0
 8003a6e:	f04f 0300 	mov.w	r3, #0
 8003a72:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003a76:	4649      	mov	r1, r9
 8003a78:	008b      	lsls	r3, r1, #2
 8003a7a:	4641      	mov	r1, r8
 8003a7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a80:	4641      	mov	r1, r8
 8003a82:	008a      	lsls	r2, r1, #2
 8003a84:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003a88:	f7fc fbf2 	bl	8000270 <__aeabi_uldivmod>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	460b      	mov	r3, r1
 8003a90:	4b0d      	ldr	r3, [pc, #52]	; (8003ac8 <UART_SetConfig+0x570>)
 8003a92:	fba3 1302 	umull	r1, r3, r3, r2
 8003a96:	095b      	lsrs	r3, r3, #5
 8003a98:	2164      	movs	r1, #100	; 0x64
 8003a9a:	fb01 f303 	mul.w	r3, r1, r3
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	011b      	lsls	r3, r3, #4
 8003aa2:	3332      	adds	r3, #50	; 0x32
 8003aa4:	4a08      	ldr	r2, [pc, #32]	; (8003ac8 <UART_SetConfig+0x570>)
 8003aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aaa:	095b      	lsrs	r3, r3, #5
 8003aac:	f003 020f 	and.w	r2, r3, #15
 8003ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4422      	add	r2, r4
 8003ab8:	609a      	str	r2, [r3, #8]
}
 8003aba:	bf00      	nop
 8003abc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ac6:	bf00      	nop
 8003ac8:	51eb851f 	.word	0x51eb851f

08003acc <LL_GPIO_SetPinMode>:
{
 8003acc:	b480      	push	{r7}
 8003ace:	b089      	sub	sp, #36	; 0x24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	fa93 f3a3 	rbit	r3, r3
 8003ae6:	613b      	str	r3, [r7, #16]
  return result;
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	fab3 f383 	clz	r3, r3
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	2103      	movs	r1, #3
 8003af4:	fa01 f303 	lsl.w	r3, r1, r3
 8003af8:	43db      	mvns	r3, r3
 8003afa:	401a      	ands	r2, r3
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	fa93 f3a3 	rbit	r3, r3
 8003b06:	61bb      	str	r3, [r7, #24]
  return result;
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	fab3 f383 	clz	r3, r3
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	005b      	lsls	r3, r3, #1
 8003b12:	6879      	ldr	r1, [r7, #4]
 8003b14:	fa01 f303 	lsl.w	r3, r1, r3
 8003b18:	431a      	orrs	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	601a      	str	r2, [r3, #0]
}
 8003b1e:	bf00      	nop
 8003b20:	3724      	adds	r7, #36	; 0x24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <LL_GPIO_SetPinOutputType>:
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b085      	sub	sp, #20
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	60f8      	str	r0, [r7, #12]
 8003b32:	60b9      	str	r1, [r7, #8]
 8003b34:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	43db      	mvns	r3, r3
 8003b3e:	401a      	ands	r2, r3
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	6879      	ldr	r1, [r7, #4]
 8003b44:	fb01 f303 	mul.w	r3, r1, r3
 8003b48:	431a      	orrs	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	605a      	str	r2, [r3, #4]
}
 8003b4e:	bf00      	nop
 8003b50:	3714      	adds	r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <LL_GPIO_SetPinSpeed>:
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b089      	sub	sp, #36	; 0x24
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	60f8      	str	r0, [r7, #12]
 8003b62:	60b9      	str	r1, [r7, #8]
 8003b64:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	689a      	ldr	r2, [r3, #8]
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	fa93 f3a3 	rbit	r3, r3
 8003b74:	613b      	str	r3, [r7, #16]
  return result;
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	fab3 f383 	clz	r3, r3
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	2103      	movs	r1, #3
 8003b82:	fa01 f303 	lsl.w	r3, r1, r3
 8003b86:	43db      	mvns	r3, r3
 8003b88:	401a      	ands	r2, r3
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	fa93 f3a3 	rbit	r3, r3
 8003b94:	61bb      	str	r3, [r7, #24]
  return result;
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	fab3 f383 	clz	r3, r3
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	6879      	ldr	r1, [r7, #4]
 8003ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	609a      	str	r2, [r3, #8]
}
 8003bac:	bf00      	nop
 8003bae:	3724      	adds	r7, #36	; 0x24
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <LL_GPIO_SetPinPull>:
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b089      	sub	sp, #36	; 0x24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	68da      	ldr	r2, [r3, #12]
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	fa93 f3a3 	rbit	r3, r3
 8003bd2:	613b      	str	r3, [r7, #16]
  return result;
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	fab3 f383 	clz	r3, r3
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	2103      	movs	r1, #3
 8003be0:	fa01 f303 	lsl.w	r3, r1, r3
 8003be4:	43db      	mvns	r3, r3
 8003be6:	401a      	ands	r2, r3
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	fa93 f3a3 	rbit	r3, r3
 8003bf2:	61bb      	str	r3, [r7, #24]
  return result;
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	fab3 f383 	clz	r3, r3
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	005b      	lsls	r3, r3, #1
 8003bfe:	6879      	ldr	r1, [r7, #4]
 8003c00:	fa01 f303 	lsl.w	r3, r1, r3
 8003c04:	431a      	orrs	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	60da      	str	r2, [r3, #12]
}
 8003c0a:	bf00      	nop
 8003c0c:	3724      	adds	r7, #36	; 0x24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <LL_GPIO_SetAFPin_0_7>:
{
 8003c16:	b480      	push	{r7}
 8003c18:	b089      	sub	sp, #36	; 0x24
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	60f8      	str	r0, [r7, #12]
 8003c1e:	60b9      	str	r1, [r7, #8]
 8003c20:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6a1a      	ldr	r2, [r3, #32]
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	fa93 f3a3 	rbit	r3, r3
 8003c30:	613b      	str	r3, [r7, #16]
  return result;
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	fab3 f383 	clz	r3, r3
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	210f      	movs	r1, #15
 8003c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c42:	43db      	mvns	r3, r3
 8003c44:	401a      	ands	r2, r3
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	fa93 f3a3 	rbit	r3, r3
 8003c50:	61bb      	str	r3, [r7, #24]
  return result;
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	fab3 f383 	clz	r3, r3
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	6879      	ldr	r1, [r7, #4]
 8003c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c62:	431a      	orrs	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	621a      	str	r2, [r3, #32]
}
 8003c68:	bf00      	nop
 8003c6a:	3724      	adds	r7, #36	; 0x24
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <LL_GPIO_SetAFPin_8_15>:
{
 8003c74:	b480      	push	{r7}
 8003c76:	b089      	sub	sp, #36	; 0x24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	0a1b      	lsrs	r3, r3, #8
 8003c88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	fa93 f3a3 	rbit	r3, r3
 8003c90:	613b      	str	r3, [r7, #16]
  return result;
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	fab3 f383 	clz	r3, r3
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	210f      	movs	r1, #15
 8003c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca2:	43db      	mvns	r3, r3
 8003ca4:	401a      	ands	r2, r3
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	0a1b      	lsrs	r3, r3, #8
 8003caa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	fa93 f3a3 	rbit	r3, r3
 8003cb2:	61bb      	str	r3, [r7, #24]
  return result;
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	fab3 f383 	clz	r3, r3
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	6879      	ldr	r1, [r7, #4]
 8003cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003cca:	bf00      	nop
 8003ccc:	3724      	adds	r7, #36	; 0x24
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
	...

08003cd8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b088      	sub	sp, #32
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a84      	ldr	r2, [pc, #528]	; (8003f00 <LL_GPIO_Init+0x228>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d023      	beq.n	8003d3a <LL_GPIO_Init+0x62>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a83      	ldr	r2, [pc, #524]	; (8003f04 <LL_GPIO_Init+0x22c>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d01f      	beq.n	8003d3a <LL_GPIO_Init+0x62>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a82      	ldr	r2, [pc, #520]	; (8003f08 <LL_GPIO_Init+0x230>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d01b      	beq.n	8003d3a <LL_GPIO_Init+0x62>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a81      	ldr	r2, [pc, #516]	; (8003f0c <LL_GPIO_Init+0x234>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d017      	beq.n	8003d3a <LL_GPIO_Init+0x62>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a80      	ldr	r2, [pc, #512]	; (8003f10 <LL_GPIO_Init+0x238>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d013      	beq.n	8003d3a <LL_GPIO_Init+0x62>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a7f      	ldr	r2, [pc, #508]	; (8003f14 <LL_GPIO_Init+0x23c>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d00f      	beq.n	8003d3a <LL_GPIO_Init+0x62>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a7e      	ldr	r2, [pc, #504]	; (8003f18 <LL_GPIO_Init+0x240>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d00b      	beq.n	8003d3a <LL_GPIO_Init+0x62>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a7d      	ldr	r2, [pc, #500]	; (8003f1c <LL_GPIO_Init+0x244>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d007      	beq.n	8003d3a <LL_GPIO_Init+0x62>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a7c      	ldr	r2, [pc, #496]	; (8003f20 <LL_GPIO_Init+0x248>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d003      	beq.n	8003d3a <LL_GPIO_Init+0x62>
 8003d32:	21cd      	movs	r1, #205	; 0xcd
 8003d34:	487b      	ldr	r0, [pc, #492]	; (8003f24 <LL_GPIO_Init+0x24c>)
 8003d36:	f7fc ff4d 	bl	8000bd4 <assert_failed>
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d004      	beq.n	8003d4c <LL_GPIO_Init+0x74>
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d4a:	d303      	bcc.n	8003d54 <LL_GPIO_Init+0x7c>
 8003d4c:	21ce      	movs	r1, #206	; 0xce
 8003d4e:	4875      	ldr	r0, [pc, #468]	; (8003f24 <LL_GPIO_Init+0x24c>)
 8003d50:	f7fc ff40 	bl	8000bd4 <assert_failed>
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00f      	beq.n	8003d7c <LL_GPIO_Init+0xa4>
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d00b      	beq.n	8003d7c <LL_GPIO_Init+0xa4>
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d007      	beq.n	8003d7c <LL_GPIO_Init+0xa4>
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	2b03      	cmp	r3, #3
 8003d72:	d003      	beq.n	8003d7c <LL_GPIO_Init+0xa4>
 8003d74:	21cf      	movs	r1, #207	; 0xcf
 8003d76:	486b      	ldr	r0, [pc, #428]	; (8003f24 <LL_GPIO_Init+0x24c>)
 8003d78:	f7fc ff2c 	bl	8000bd4 <assert_failed>
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00b      	beq.n	8003d9c <LL_GPIO_Init+0xc4>
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d007      	beq.n	8003d9c <LL_GPIO_Init+0xc4>
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d003      	beq.n	8003d9c <LL_GPIO_Init+0xc4>
 8003d94:	21d0      	movs	r1, #208	; 0xd0
 8003d96:	4863      	ldr	r0, [pc, #396]	; (8003f24 <LL_GPIO_Init+0x24c>)
 8003d98:	f7fc ff1c 	bl	8000bd4 <assert_failed>

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	fa93 f3a3 	rbit	r3, r3
 8003da8:	613b      	str	r3, [r7, #16]
  return result;
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	fab3 f383 	clz	r3, r3
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003db4:	e0c9      	b.n	8003f4a <LL_GPIO_Init+0x272>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	2101      	movs	r1, #1
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 80bb 	beq.w	8003f44 <LL_GPIO_Init+0x26c>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d003      	beq.n	8003dde <LL_GPIO_Init+0x106>
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d12d      	bne.n	8003e3a <LL_GPIO_Init+0x162>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00f      	beq.n	8003e06 <LL_GPIO_Init+0x12e>
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d00b      	beq.n	8003e06 <LL_GPIO_Init+0x12e>
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d007      	beq.n	8003e06 <LL_GPIO_Init+0x12e>
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	2b03      	cmp	r3, #3
 8003dfc:	d003      	beq.n	8003e06 <LL_GPIO_Init+0x12e>
 8003dfe:	21e2      	movs	r1, #226	; 0xe2
 8003e00:	4848      	ldr	r0, [pc, #288]	; (8003f24 <LL_GPIO_Init+0x24c>)
 8003e02:	f7fc fee7 	bl	8000bd4 <assert_failed>
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	69b9      	ldr	r1, [r7, #24]
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7ff fea3 	bl	8003b5a <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d007      	beq.n	8003e2c <LL_GPIO_Init+0x154>
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d003      	beq.n	8003e2c <LL_GPIO_Init+0x154>
 8003e24:	21e8      	movs	r1, #232	; 0xe8
 8003e26:	483f      	ldr	r0, [pc, #252]	; (8003f24 <LL_GPIO_Init+0x24c>)
 8003e28:	f7fc fed4 	bl	8000bd4 <assert_failed>
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	461a      	mov	r2, r3
 8003e32:	69b9      	ldr	r1, [r7, #24]
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f7ff fe78 	bl	8003b2a <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	69b9      	ldr	r1, [r7, #24]
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f7ff feb8 	bl	8003bb8 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d172      	bne.n	8003f36 <LL_GPIO_Init+0x25e>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	695b      	ldr	r3, [r3, #20]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d03f      	beq.n	8003ed8 <LL_GPIO_Init+0x200>
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	695b      	ldr	r3, [r3, #20]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d03b      	beq.n	8003ed8 <LL_GPIO_Init+0x200>
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	695b      	ldr	r3, [r3, #20]
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d037      	beq.n	8003ed8 <LL_GPIO_Init+0x200>
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	2b03      	cmp	r3, #3
 8003e6e:	d033      	beq.n	8003ed8 <LL_GPIO_Init+0x200>
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	2b04      	cmp	r3, #4
 8003e76:	d02f      	beq.n	8003ed8 <LL_GPIO_Init+0x200>
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	2b05      	cmp	r3, #5
 8003e7e:	d02b      	beq.n	8003ed8 <LL_GPIO_Init+0x200>
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	2b06      	cmp	r3, #6
 8003e86:	d027      	beq.n	8003ed8 <LL_GPIO_Init+0x200>
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	2b07      	cmp	r3, #7
 8003e8e:	d023      	beq.n	8003ed8 <LL_GPIO_Init+0x200>
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	2b08      	cmp	r3, #8
 8003e96:	d01f      	beq.n	8003ed8 <LL_GPIO_Init+0x200>
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	2b09      	cmp	r3, #9
 8003e9e:	d01b      	beq.n	8003ed8 <LL_GPIO_Init+0x200>
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	2b0a      	cmp	r3, #10
 8003ea6:	d017      	beq.n	8003ed8 <LL_GPIO_Init+0x200>
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	2b0b      	cmp	r3, #11
 8003eae:	d013      	beq.n	8003ed8 <LL_GPIO_Init+0x200>
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	2b0c      	cmp	r3, #12
 8003eb6:	d00f      	beq.n	8003ed8 <LL_GPIO_Init+0x200>
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	695b      	ldr	r3, [r3, #20]
 8003ebc:	2b0d      	cmp	r3, #13
 8003ebe:	d00b      	beq.n	8003ed8 <LL_GPIO_Init+0x200>
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	2b0e      	cmp	r3, #14
 8003ec6:	d007      	beq.n	8003ed8 <LL_GPIO_Init+0x200>
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	2b0f      	cmp	r3, #15
 8003ece:	d003      	beq.n	8003ed8 <LL_GPIO_Init+0x200>
 8003ed0:	21f4      	movs	r1, #244	; 0xf4
 8003ed2:	4814      	ldr	r0, [pc, #80]	; (8003f24 <LL_GPIO_Init+0x24c>)
 8003ed4:	f7fc fe7e 	bl	8000bd4 <assert_failed>
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	fa93 f3a3 	rbit	r3, r3
 8003ee2:	60bb      	str	r3, [r7, #8]
  return result;
 8003ee4:	68bb      	ldr	r3, [r7, #8]
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003ee6:	fab3 f383 	clz	r3, r3
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2b07      	cmp	r3, #7
 8003eee:	d81b      	bhi.n	8003f28 <LL_GPIO_Init+0x250>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	69b9      	ldr	r1, [r7, #24]
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f7ff fe8c 	bl	8003c16 <LL_GPIO_SetAFPin_0_7>
 8003efe:	e01a      	b.n	8003f36 <LL_GPIO_Init+0x25e>
 8003f00:	40020000 	.word	0x40020000
 8003f04:	40020400 	.word	0x40020400
 8003f08:	40020800 	.word	0x40020800
 8003f0c:	40020c00 	.word	0x40020c00
 8003f10:	40021000 	.word	0x40021000
 8003f14:	40021400 	.word	0x40021400
 8003f18:	40021800 	.word	0x40021800
 8003f1c:	40021c00 	.word	0x40021c00
 8003f20:	40022000 	.word	0x40022000
 8003f24:	08005190 	.word	0x08005190
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	695b      	ldr	r3, [r3, #20]
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	69b9      	ldr	r1, [r7, #24]
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f7ff fe9f 	bl	8003c74 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	69b9      	ldr	r1, [r7, #24]
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7ff fdc4 	bl	8003acc <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	3301      	adds	r3, #1
 8003f48:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	fa22 f303 	lsr.w	r3, r2, r3
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f47f af2e 	bne.w	8003db6 <LL_GPIO_Init+0xde>
  }

  return (SUCCESS);
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3720      	adds	r7, #32
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003f6c:	4a04      	ldr	r2, [pc, #16]	; (8003f80 <LL_SetSystemCoreClock+0x1c>)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6013      	str	r3, [r2, #0]
}
 8003f72:	bf00      	nop
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	20000000 	.word	0x20000000

08003f84 <__errno>:
 8003f84:	4b01      	ldr	r3, [pc, #4]	; (8003f8c <__errno+0x8>)
 8003f86:	6818      	ldr	r0, [r3, #0]
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	2000000c 	.word	0x2000000c

08003f90 <__libc_init_array>:
 8003f90:	b570      	push	{r4, r5, r6, lr}
 8003f92:	4d0d      	ldr	r5, [pc, #52]	; (8003fc8 <__libc_init_array+0x38>)
 8003f94:	4c0d      	ldr	r4, [pc, #52]	; (8003fcc <__libc_init_array+0x3c>)
 8003f96:	1b64      	subs	r4, r4, r5
 8003f98:	10a4      	asrs	r4, r4, #2
 8003f9a:	2600      	movs	r6, #0
 8003f9c:	42a6      	cmp	r6, r4
 8003f9e:	d109      	bne.n	8003fb4 <__libc_init_array+0x24>
 8003fa0:	4d0b      	ldr	r5, [pc, #44]	; (8003fd0 <__libc_init_array+0x40>)
 8003fa2:	4c0c      	ldr	r4, [pc, #48]	; (8003fd4 <__libc_init_array+0x44>)
 8003fa4:	f001 f824 	bl	8004ff0 <_init>
 8003fa8:	1b64      	subs	r4, r4, r5
 8003faa:	10a4      	asrs	r4, r4, #2
 8003fac:	2600      	movs	r6, #0
 8003fae:	42a6      	cmp	r6, r4
 8003fb0:	d105      	bne.n	8003fbe <__libc_init_array+0x2e>
 8003fb2:	bd70      	pop	{r4, r5, r6, pc}
 8003fb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fb8:	4798      	blx	r3
 8003fba:	3601      	adds	r6, #1
 8003fbc:	e7ee      	b.n	8003f9c <__libc_init_array+0xc>
 8003fbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fc2:	4798      	blx	r3
 8003fc4:	3601      	adds	r6, #1
 8003fc6:	e7f2      	b.n	8003fae <__libc_init_array+0x1e>
 8003fc8:	08005270 	.word	0x08005270
 8003fcc:	08005270 	.word	0x08005270
 8003fd0:	08005270 	.word	0x08005270
 8003fd4:	08005274 	.word	0x08005274

08003fd8 <memset>:
 8003fd8:	4402      	add	r2, r0
 8003fda:	4603      	mov	r3, r0
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d100      	bne.n	8003fe2 <memset+0xa>
 8003fe0:	4770      	bx	lr
 8003fe2:	f803 1b01 	strb.w	r1, [r3], #1
 8003fe6:	e7f9      	b.n	8003fdc <memset+0x4>

08003fe8 <iprintf>:
 8003fe8:	b40f      	push	{r0, r1, r2, r3}
 8003fea:	4b0a      	ldr	r3, [pc, #40]	; (8004014 <iprintf+0x2c>)
 8003fec:	b513      	push	{r0, r1, r4, lr}
 8003fee:	681c      	ldr	r4, [r3, #0]
 8003ff0:	b124      	cbz	r4, 8003ffc <iprintf+0x14>
 8003ff2:	69a3      	ldr	r3, [r4, #24]
 8003ff4:	b913      	cbnz	r3, 8003ffc <iprintf+0x14>
 8003ff6:	4620      	mov	r0, r4
 8003ff8:	f000 fa5e 	bl	80044b8 <__sinit>
 8003ffc:	ab05      	add	r3, sp, #20
 8003ffe:	9a04      	ldr	r2, [sp, #16]
 8004000:	68a1      	ldr	r1, [r4, #8]
 8004002:	9301      	str	r3, [sp, #4]
 8004004:	4620      	mov	r0, r4
 8004006:	f000 fc67 	bl	80048d8 <_vfiprintf_r>
 800400a:	b002      	add	sp, #8
 800400c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004010:	b004      	add	sp, #16
 8004012:	4770      	bx	lr
 8004014:	2000000c 	.word	0x2000000c

08004018 <_puts_r>:
 8004018:	b570      	push	{r4, r5, r6, lr}
 800401a:	460e      	mov	r6, r1
 800401c:	4605      	mov	r5, r0
 800401e:	b118      	cbz	r0, 8004028 <_puts_r+0x10>
 8004020:	6983      	ldr	r3, [r0, #24]
 8004022:	b90b      	cbnz	r3, 8004028 <_puts_r+0x10>
 8004024:	f000 fa48 	bl	80044b8 <__sinit>
 8004028:	69ab      	ldr	r3, [r5, #24]
 800402a:	68ac      	ldr	r4, [r5, #8]
 800402c:	b913      	cbnz	r3, 8004034 <_puts_r+0x1c>
 800402e:	4628      	mov	r0, r5
 8004030:	f000 fa42 	bl	80044b8 <__sinit>
 8004034:	4b2c      	ldr	r3, [pc, #176]	; (80040e8 <_puts_r+0xd0>)
 8004036:	429c      	cmp	r4, r3
 8004038:	d120      	bne.n	800407c <_puts_r+0x64>
 800403a:	686c      	ldr	r4, [r5, #4]
 800403c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800403e:	07db      	lsls	r3, r3, #31
 8004040:	d405      	bmi.n	800404e <_puts_r+0x36>
 8004042:	89a3      	ldrh	r3, [r4, #12]
 8004044:	0598      	lsls	r0, r3, #22
 8004046:	d402      	bmi.n	800404e <_puts_r+0x36>
 8004048:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800404a:	f000 fad3 	bl	80045f4 <__retarget_lock_acquire_recursive>
 800404e:	89a3      	ldrh	r3, [r4, #12]
 8004050:	0719      	lsls	r1, r3, #28
 8004052:	d51d      	bpl.n	8004090 <_puts_r+0x78>
 8004054:	6923      	ldr	r3, [r4, #16]
 8004056:	b1db      	cbz	r3, 8004090 <_puts_r+0x78>
 8004058:	3e01      	subs	r6, #1
 800405a:	68a3      	ldr	r3, [r4, #8]
 800405c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004060:	3b01      	subs	r3, #1
 8004062:	60a3      	str	r3, [r4, #8]
 8004064:	bb39      	cbnz	r1, 80040b6 <_puts_r+0x9e>
 8004066:	2b00      	cmp	r3, #0
 8004068:	da38      	bge.n	80040dc <_puts_r+0xc4>
 800406a:	4622      	mov	r2, r4
 800406c:	210a      	movs	r1, #10
 800406e:	4628      	mov	r0, r5
 8004070:	f000 f848 	bl	8004104 <__swbuf_r>
 8004074:	3001      	adds	r0, #1
 8004076:	d011      	beq.n	800409c <_puts_r+0x84>
 8004078:	250a      	movs	r5, #10
 800407a:	e011      	b.n	80040a0 <_puts_r+0x88>
 800407c:	4b1b      	ldr	r3, [pc, #108]	; (80040ec <_puts_r+0xd4>)
 800407e:	429c      	cmp	r4, r3
 8004080:	d101      	bne.n	8004086 <_puts_r+0x6e>
 8004082:	68ac      	ldr	r4, [r5, #8]
 8004084:	e7da      	b.n	800403c <_puts_r+0x24>
 8004086:	4b1a      	ldr	r3, [pc, #104]	; (80040f0 <_puts_r+0xd8>)
 8004088:	429c      	cmp	r4, r3
 800408a:	bf08      	it	eq
 800408c:	68ec      	ldreq	r4, [r5, #12]
 800408e:	e7d5      	b.n	800403c <_puts_r+0x24>
 8004090:	4621      	mov	r1, r4
 8004092:	4628      	mov	r0, r5
 8004094:	f000 f888 	bl	80041a8 <__swsetup_r>
 8004098:	2800      	cmp	r0, #0
 800409a:	d0dd      	beq.n	8004058 <_puts_r+0x40>
 800409c:	f04f 35ff 	mov.w	r5, #4294967295
 80040a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040a2:	07da      	lsls	r2, r3, #31
 80040a4:	d405      	bmi.n	80040b2 <_puts_r+0x9a>
 80040a6:	89a3      	ldrh	r3, [r4, #12]
 80040a8:	059b      	lsls	r3, r3, #22
 80040aa:	d402      	bmi.n	80040b2 <_puts_r+0x9a>
 80040ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040ae:	f000 faa2 	bl	80045f6 <__retarget_lock_release_recursive>
 80040b2:	4628      	mov	r0, r5
 80040b4:	bd70      	pop	{r4, r5, r6, pc}
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	da04      	bge.n	80040c4 <_puts_r+0xac>
 80040ba:	69a2      	ldr	r2, [r4, #24]
 80040bc:	429a      	cmp	r2, r3
 80040be:	dc06      	bgt.n	80040ce <_puts_r+0xb6>
 80040c0:	290a      	cmp	r1, #10
 80040c2:	d004      	beq.n	80040ce <_puts_r+0xb6>
 80040c4:	6823      	ldr	r3, [r4, #0]
 80040c6:	1c5a      	adds	r2, r3, #1
 80040c8:	6022      	str	r2, [r4, #0]
 80040ca:	7019      	strb	r1, [r3, #0]
 80040cc:	e7c5      	b.n	800405a <_puts_r+0x42>
 80040ce:	4622      	mov	r2, r4
 80040d0:	4628      	mov	r0, r5
 80040d2:	f000 f817 	bl	8004104 <__swbuf_r>
 80040d6:	3001      	adds	r0, #1
 80040d8:	d1bf      	bne.n	800405a <_puts_r+0x42>
 80040da:	e7df      	b.n	800409c <_puts_r+0x84>
 80040dc:	6823      	ldr	r3, [r4, #0]
 80040de:	250a      	movs	r5, #10
 80040e0:	1c5a      	adds	r2, r3, #1
 80040e2:	6022      	str	r2, [r4, #0]
 80040e4:	701d      	strb	r5, [r3, #0]
 80040e6:	e7db      	b.n	80040a0 <_puts_r+0x88>
 80040e8:	080051f4 	.word	0x080051f4
 80040ec:	08005214 	.word	0x08005214
 80040f0:	080051d4 	.word	0x080051d4

080040f4 <puts>:
 80040f4:	4b02      	ldr	r3, [pc, #8]	; (8004100 <puts+0xc>)
 80040f6:	4601      	mov	r1, r0
 80040f8:	6818      	ldr	r0, [r3, #0]
 80040fa:	f7ff bf8d 	b.w	8004018 <_puts_r>
 80040fe:	bf00      	nop
 8004100:	2000000c 	.word	0x2000000c

08004104 <__swbuf_r>:
 8004104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004106:	460e      	mov	r6, r1
 8004108:	4614      	mov	r4, r2
 800410a:	4605      	mov	r5, r0
 800410c:	b118      	cbz	r0, 8004116 <__swbuf_r+0x12>
 800410e:	6983      	ldr	r3, [r0, #24]
 8004110:	b90b      	cbnz	r3, 8004116 <__swbuf_r+0x12>
 8004112:	f000 f9d1 	bl	80044b8 <__sinit>
 8004116:	4b21      	ldr	r3, [pc, #132]	; (800419c <__swbuf_r+0x98>)
 8004118:	429c      	cmp	r4, r3
 800411a:	d12b      	bne.n	8004174 <__swbuf_r+0x70>
 800411c:	686c      	ldr	r4, [r5, #4]
 800411e:	69a3      	ldr	r3, [r4, #24]
 8004120:	60a3      	str	r3, [r4, #8]
 8004122:	89a3      	ldrh	r3, [r4, #12]
 8004124:	071a      	lsls	r2, r3, #28
 8004126:	d52f      	bpl.n	8004188 <__swbuf_r+0x84>
 8004128:	6923      	ldr	r3, [r4, #16]
 800412a:	b36b      	cbz	r3, 8004188 <__swbuf_r+0x84>
 800412c:	6923      	ldr	r3, [r4, #16]
 800412e:	6820      	ldr	r0, [r4, #0]
 8004130:	1ac0      	subs	r0, r0, r3
 8004132:	6963      	ldr	r3, [r4, #20]
 8004134:	b2f6      	uxtb	r6, r6
 8004136:	4283      	cmp	r3, r0
 8004138:	4637      	mov	r7, r6
 800413a:	dc04      	bgt.n	8004146 <__swbuf_r+0x42>
 800413c:	4621      	mov	r1, r4
 800413e:	4628      	mov	r0, r5
 8004140:	f000 f926 	bl	8004390 <_fflush_r>
 8004144:	bb30      	cbnz	r0, 8004194 <__swbuf_r+0x90>
 8004146:	68a3      	ldr	r3, [r4, #8]
 8004148:	3b01      	subs	r3, #1
 800414a:	60a3      	str	r3, [r4, #8]
 800414c:	6823      	ldr	r3, [r4, #0]
 800414e:	1c5a      	adds	r2, r3, #1
 8004150:	6022      	str	r2, [r4, #0]
 8004152:	701e      	strb	r6, [r3, #0]
 8004154:	6963      	ldr	r3, [r4, #20]
 8004156:	3001      	adds	r0, #1
 8004158:	4283      	cmp	r3, r0
 800415a:	d004      	beq.n	8004166 <__swbuf_r+0x62>
 800415c:	89a3      	ldrh	r3, [r4, #12]
 800415e:	07db      	lsls	r3, r3, #31
 8004160:	d506      	bpl.n	8004170 <__swbuf_r+0x6c>
 8004162:	2e0a      	cmp	r6, #10
 8004164:	d104      	bne.n	8004170 <__swbuf_r+0x6c>
 8004166:	4621      	mov	r1, r4
 8004168:	4628      	mov	r0, r5
 800416a:	f000 f911 	bl	8004390 <_fflush_r>
 800416e:	b988      	cbnz	r0, 8004194 <__swbuf_r+0x90>
 8004170:	4638      	mov	r0, r7
 8004172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004174:	4b0a      	ldr	r3, [pc, #40]	; (80041a0 <__swbuf_r+0x9c>)
 8004176:	429c      	cmp	r4, r3
 8004178:	d101      	bne.n	800417e <__swbuf_r+0x7a>
 800417a:	68ac      	ldr	r4, [r5, #8]
 800417c:	e7cf      	b.n	800411e <__swbuf_r+0x1a>
 800417e:	4b09      	ldr	r3, [pc, #36]	; (80041a4 <__swbuf_r+0xa0>)
 8004180:	429c      	cmp	r4, r3
 8004182:	bf08      	it	eq
 8004184:	68ec      	ldreq	r4, [r5, #12]
 8004186:	e7ca      	b.n	800411e <__swbuf_r+0x1a>
 8004188:	4621      	mov	r1, r4
 800418a:	4628      	mov	r0, r5
 800418c:	f000 f80c 	bl	80041a8 <__swsetup_r>
 8004190:	2800      	cmp	r0, #0
 8004192:	d0cb      	beq.n	800412c <__swbuf_r+0x28>
 8004194:	f04f 37ff 	mov.w	r7, #4294967295
 8004198:	e7ea      	b.n	8004170 <__swbuf_r+0x6c>
 800419a:	bf00      	nop
 800419c:	080051f4 	.word	0x080051f4
 80041a0:	08005214 	.word	0x08005214
 80041a4:	080051d4 	.word	0x080051d4

080041a8 <__swsetup_r>:
 80041a8:	4b32      	ldr	r3, [pc, #200]	; (8004274 <__swsetup_r+0xcc>)
 80041aa:	b570      	push	{r4, r5, r6, lr}
 80041ac:	681d      	ldr	r5, [r3, #0]
 80041ae:	4606      	mov	r6, r0
 80041b0:	460c      	mov	r4, r1
 80041b2:	b125      	cbz	r5, 80041be <__swsetup_r+0x16>
 80041b4:	69ab      	ldr	r3, [r5, #24]
 80041b6:	b913      	cbnz	r3, 80041be <__swsetup_r+0x16>
 80041b8:	4628      	mov	r0, r5
 80041ba:	f000 f97d 	bl	80044b8 <__sinit>
 80041be:	4b2e      	ldr	r3, [pc, #184]	; (8004278 <__swsetup_r+0xd0>)
 80041c0:	429c      	cmp	r4, r3
 80041c2:	d10f      	bne.n	80041e4 <__swsetup_r+0x3c>
 80041c4:	686c      	ldr	r4, [r5, #4]
 80041c6:	89a3      	ldrh	r3, [r4, #12]
 80041c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80041cc:	0719      	lsls	r1, r3, #28
 80041ce:	d42c      	bmi.n	800422a <__swsetup_r+0x82>
 80041d0:	06dd      	lsls	r5, r3, #27
 80041d2:	d411      	bmi.n	80041f8 <__swsetup_r+0x50>
 80041d4:	2309      	movs	r3, #9
 80041d6:	6033      	str	r3, [r6, #0]
 80041d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80041dc:	81a3      	strh	r3, [r4, #12]
 80041de:	f04f 30ff 	mov.w	r0, #4294967295
 80041e2:	e03e      	b.n	8004262 <__swsetup_r+0xba>
 80041e4:	4b25      	ldr	r3, [pc, #148]	; (800427c <__swsetup_r+0xd4>)
 80041e6:	429c      	cmp	r4, r3
 80041e8:	d101      	bne.n	80041ee <__swsetup_r+0x46>
 80041ea:	68ac      	ldr	r4, [r5, #8]
 80041ec:	e7eb      	b.n	80041c6 <__swsetup_r+0x1e>
 80041ee:	4b24      	ldr	r3, [pc, #144]	; (8004280 <__swsetup_r+0xd8>)
 80041f0:	429c      	cmp	r4, r3
 80041f2:	bf08      	it	eq
 80041f4:	68ec      	ldreq	r4, [r5, #12]
 80041f6:	e7e6      	b.n	80041c6 <__swsetup_r+0x1e>
 80041f8:	0758      	lsls	r0, r3, #29
 80041fa:	d512      	bpl.n	8004222 <__swsetup_r+0x7a>
 80041fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041fe:	b141      	cbz	r1, 8004212 <__swsetup_r+0x6a>
 8004200:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004204:	4299      	cmp	r1, r3
 8004206:	d002      	beq.n	800420e <__swsetup_r+0x66>
 8004208:	4630      	mov	r0, r6
 800420a:	f000 fa5b 	bl	80046c4 <_free_r>
 800420e:	2300      	movs	r3, #0
 8004210:	6363      	str	r3, [r4, #52]	; 0x34
 8004212:	89a3      	ldrh	r3, [r4, #12]
 8004214:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004218:	81a3      	strh	r3, [r4, #12]
 800421a:	2300      	movs	r3, #0
 800421c:	6063      	str	r3, [r4, #4]
 800421e:	6923      	ldr	r3, [r4, #16]
 8004220:	6023      	str	r3, [r4, #0]
 8004222:	89a3      	ldrh	r3, [r4, #12]
 8004224:	f043 0308 	orr.w	r3, r3, #8
 8004228:	81a3      	strh	r3, [r4, #12]
 800422a:	6923      	ldr	r3, [r4, #16]
 800422c:	b94b      	cbnz	r3, 8004242 <__swsetup_r+0x9a>
 800422e:	89a3      	ldrh	r3, [r4, #12]
 8004230:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004238:	d003      	beq.n	8004242 <__swsetup_r+0x9a>
 800423a:	4621      	mov	r1, r4
 800423c:	4630      	mov	r0, r6
 800423e:	f000 fa01 	bl	8004644 <__smakebuf_r>
 8004242:	89a0      	ldrh	r0, [r4, #12]
 8004244:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004248:	f010 0301 	ands.w	r3, r0, #1
 800424c:	d00a      	beq.n	8004264 <__swsetup_r+0xbc>
 800424e:	2300      	movs	r3, #0
 8004250:	60a3      	str	r3, [r4, #8]
 8004252:	6963      	ldr	r3, [r4, #20]
 8004254:	425b      	negs	r3, r3
 8004256:	61a3      	str	r3, [r4, #24]
 8004258:	6923      	ldr	r3, [r4, #16]
 800425a:	b943      	cbnz	r3, 800426e <__swsetup_r+0xc6>
 800425c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004260:	d1ba      	bne.n	80041d8 <__swsetup_r+0x30>
 8004262:	bd70      	pop	{r4, r5, r6, pc}
 8004264:	0781      	lsls	r1, r0, #30
 8004266:	bf58      	it	pl
 8004268:	6963      	ldrpl	r3, [r4, #20]
 800426a:	60a3      	str	r3, [r4, #8]
 800426c:	e7f4      	b.n	8004258 <__swsetup_r+0xb0>
 800426e:	2000      	movs	r0, #0
 8004270:	e7f7      	b.n	8004262 <__swsetup_r+0xba>
 8004272:	bf00      	nop
 8004274:	2000000c 	.word	0x2000000c
 8004278:	080051f4 	.word	0x080051f4
 800427c:	08005214 	.word	0x08005214
 8004280:	080051d4 	.word	0x080051d4

08004284 <__sflush_r>:
 8004284:	898a      	ldrh	r2, [r1, #12]
 8004286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800428a:	4605      	mov	r5, r0
 800428c:	0710      	lsls	r0, r2, #28
 800428e:	460c      	mov	r4, r1
 8004290:	d458      	bmi.n	8004344 <__sflush_r+0xc0>
 8004292:	684b      	ldr	r3, [r1, #4]
 8004294:	2b00      	cmp	r3, #0
 8004296:	dc05      	bgt.n	80042a4 <__sflush_r+0x20>
 8004298:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800429a:	2b00      	cmp	r3, #0
 800429c:	dc02      	bgt.n	80042a4 <__sflush_r+0x20>
 800429e:	2000      	movs	r0, #0
 80042a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80042a6:	2e00      	cmp	r6, #0
 80042a8:	d0f9      	beq.n	800429e <__sflush_r+0x1a>
 80042aa:	2300      	movs	r3, #0
 80042ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80042b0:	682f      	ldr	r7, [r5, #0]
 80042b2:	602b      	str	r3, [r5, #0]
 80042b4:	d032      	beq.n	800431c <__sflush_r+0x98>
 80042b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80042b8:	89a3      	ldrh	r3, [r4, #12]
 80042ba:	075a      	lsls	r2, r3, #29
 80042bc:	d505      	bpl.n	80042ca <__sflush_r+0x46>
 80042be:	6863      	ldr	r3, [r4, #4]
 80042c0:	1ac0      	subs	r0, r0, r3
 80042c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80042c4:	b10b      	cbz	r3, 80042ca <__sflush_r+0x46>
 80042c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80042c8:	1ac0      	subs	r0, r0, r3
 80042ca:	2300      	movs	r3, #0
 80042cc:	4602      	mov	r2, r0
 80042ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80042d0:	6a21      	ldr	r1, [r4, #32]
 80042d2:	4628      	mov	r0, r5
 80042d4:	47b0      	blx	r6
 80042d6:	1c43      	adds	r3, r0, #1
 80042d8:	89a3      	ldrh	r3, [r4, #12]
 80042da:	d106      	bne.n	80042ea <__sflush_r+0x66>
 80042dc:	6829      	ldr	r1, [r5, #0]
 80042de:	291d      	cmp	r1, #29
 80042e0:	d82c      	bhi.n	800433c <__sflush_r+0xb8>
 80042e2:	4a2a      	ldr	r2, [pc, #168]	; (800438c <__sflush_r+0x108>)
 80042e4:	40ca      	lsrs	r2, r1
 80042e6:	07d6      	lsls	r6, r2, #31
 80042e8:	d528      	bpl.n	800433c <__sflush_r+0xb8>
 80042ea:	2200      	movs	r2, #0
 80042ec:	6062      	str	r2, [r4, #4]
 80042ee:	04d9      	lsls	r1, r3, #19
 80042f0:	6922      	ldr	r2, [r4, #16]
 80042f2:	6022      	str	r2, [r4, #0]
 80042f4:	d504      	bpl.n	8004300 <__sflush_r+0x7c>
 80042f6:	1c42      	adds	r2, r0, #1
 80042f8:	d101      	bne.n	80042fe <__sflush_r+0x7a>
 80042fa:	682b      	ldr	r3, [r5, #0]
 80042fc:	b903      	cbnz	r3, 8004300 <__sflush_r+0x7c>
 80042fe:	6560      	str	r0, [r4, #84]	; 0x54
 8004300:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004302:	602f      	str	r7, [r5, #0]
 8004304:	2900      	cmp	r1, #0
 8004306:	d0ca      	beq.n	800429e <__sflush_r+0x1a>
 8004308:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800430c:	4299      	cmp	r1, r3
 800430e:	d002      	beq.n	8004316 <__sflush_r+0x92>
 8004310:	4628      	mov	r0, r5
 8004312:	f000 f9d7 	bl	80046c4 <_free_r>
 8004316:	2000      	movs	r0, #0
 8004318:	6360      	str	r0, [r4, #52]	; 0x34
 800431a:	e7c1      	b.n	80042a0 <__sflush_r+0x1c>
 800431c:	6a21      	ldr	r1, [r4, #32]
 800431e:	2301      	movs	r3, #1
 8004320:	4628      	mov	r0, r5
 8004322:	47b0      	blx	r6
 8004324:	1c41      	adds	r1, r0, #1
 8004326:	d1c7      	bne.n	80042b8 <__sflush_r+0x34>
 8004328:	682b      	ldr	r3, [r5, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d0c4      	beq.n	80042b8 <__sflush_r+0x34>
 800432e:	2b1d      	cmp	r3, #29
 8004330:	d001      	beq.n	8004336 <__sflush_r+0xb2>
 8004332:	2b16      	cmp	r3, #22
 8004334:	d101      	bne.n	800433a <__sflush_r+0xb6>
 8004336:	602f      	str	r7, [r5, #0]
 8004338:	e7b1      	b.n	800429e <__sflush_r+0x1a>
 800433a:	89a3      	ldrh	r3, [r4, #12]
 800433c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004340:	81a3      	strh	r3, [r4, #12]
 8004342:	e7ad      	b.n	80042a0 <__sflush_r+0x1c>
 8004344:	690f      	ldr	r7, [r1, #16]
 8004346:	2f00      	cmp	r7, #0
 8004348:	d0a9      	beq.n	800429e <__sflush_r+0x1a>
 800434a:	0793      	lsls	r3, r2, #30
 800434c:	680e      	ldr	r6, [r1, #0]
 800434e:	bf08      	it	eq
 8004350:	694b      	ldreq	r3, [r1, #20]
 8004352:	600f      	str	r7, [r1, #0]
 8004354:	bf18      	it	ne
 8004356:	2300      	movne	r3, #0
 8004358:	eba6 0807 	sub.w	r8, r6, r7
 800435c:	608b      	str	r3, [r1, #8]
 800435e:	f1b8 0f00 	cmp.w	r8, #0
 8004362:	dd9c      	ble.n	800429e <__sflush_r+0x1a>
 8004364:	6a21      	ldr	r1, [r4, #32]
 8004366:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004368:	4643      	mov	r3, r8
 800436a:	463a      	mov	r2, r7
 800436c:	4628      	mov	r0, r5
 800436e:	47b0      	blx	r6
 8004370:	2800      	cmp	r0, #0
 8004372:	dc06      	bgt.n	8004382 <__sflush_r+0xfe>
 8004374:	89a3      	ldrh	r3, [r4, #12]
 8004376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800437a:	81a3      	strh	r3, [r4, #12]
 800437c:	f04f 30ff 	mov.w	r0, #4294967295
 8004380:	e78e      	b.n	80042a0 <__sflush_r+0x1c>
 8004382:	4407      	add	r7, r0
 8004384:	eba8 0800 	sub.w	r8, r8, r0
 8004388:	e7e9      	b.n	800435e <__sflush_r+0xda>
 800438a:	bf00      	nop
 800438c:	20400001 	.word	0x20400001

08004390 <_fflush_r>:
 8004390:	b538      	push	{r3, r4, r5, lr}
 8004392:	690b      	ldr	r3, [r1, #16]
 8004394:	4605      	mov	r5, r0
 8004396:	460c      	mov	r4, r1
 8004398:	b913      	cbnz	r3, 80043a0 <_fflush_r+0x10>
 800439a:	2500      	movs	r5, #0
 800439c:	4628      	mov	r0, r5
 800439e:	bd38      	pop	{r3, r4, r5, pc}
 80043a0:	b118      	cbz	r0, 80043aa <_fflush_r+0x1a>
 80043a2:	6983      	ldr	r3, [r0, #24]
 80043a4:	b90b      	cbnz	r3, 80043aa <_fflush_r+0x1a>
 80043a6:	f000 f887 	bl	80044b8 <__sinit>
 80043aa:	4b14      	ldr	r3, [pc, #80]	; (80043fc <_fflush_r+0x6c>)
 80043ac:	429c      	cmp	r4, r3
 80043ae:	d11b      	bne.n	80043e8 <_fflush_r+0x58>
 80043b0:	686c      	ldr	r4, [r5, #4]
 80043b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d0ef      	beq.n	800439a <_fflush_r+0xa>
 80043ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80043bc:	07d0      	lsls	r0, r2, #31
 80043be:	d404      	bmi.n	80043ca <_fflush_r+0x3a>
 80043c0:	0599      	lsls	r1, r3, #22
 80043c2:	d402      	bmi.n	80043ca <_fflush_r+0x3a>
 80043c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043c6:	f000 f915 	bl	80045f4 <__retarget_lock_acquire_recursive>
 80043ca:	4628      	mov	r0, r5
 80043cc:	4621      	mov	r1, r4
 80043ce:	f7ff ff59 	bl	8004284 <__sflush_r>
 80043d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043d4:	07da      	lsls	r2, r3, #31
 80043d6:	4605      	mov	r5, r0
 80043d8:	d4e0      	bmi.n	800439c <_fflush_r+0xc>
 80043da:	89a3      	ldrh	r3, [r4, #12]
 80043dc:	059b      	lsls	r3, r3, #22
 80043de:	d4dd      	bmi.n	800439c <_fflush_r+0xc>
 80043e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80043e2:	f000 f908 	bl	80045f6 <__retarget_lock_release_recursive>
 80043e6:	e7d9      	b.n	800439c <_fflush_r+0xc>
 80043e8:	4b05      	ldr	r3, [pc, #20]	; (8004400 <_fflush_r+0x70>)
 80043ea:	429c      	cmp	r4, r3
 80043ec:	d101      	bne.n	80043f2 <_fflush_r+0x62>
 80043ee:	68ac      	ldr	r4, [r5, #8]
 80043f0:	e7df      	b.n	80043b2 <_fflush_r+0x22>
 80043f2:	4b04      	ldr	r3, [pc, #16]	; (8004404 <_fflush_r+0x74>)
 80043f4:	429c      	cmp	r4, r3
 80043f6:	bf08      	it	eq
 80043f8:	68ec      	ldreq	r4, [r5, #12]
 80043fa:	e7da      	b.n	80043b2 <_fflush_r+0x22>
 80043fc:	080051f4 	.word	0x080051f4
 8004400:	08005214 	.word	0x08005214
 8004404:	080051d4 	.word	0x080051d4

08004408 <std>:
 8004408:	2300      	movs	r3, #0
 800440a:	b510      	push	{r4, lr}
 800440c:	4604      	mov	r4, r0
 800440e:	e9c0 3300 	strd	r3, r3, [r0]
 8004412:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004416:	6083      	str	r3, [r0, #8]
 8004418:	8181      	strh	r1, [r0, #12]
 800441a:	6643      	str	r3, [r0, #100]	; 0x64
 800441c:	81c2      	strh	r2, [r0, #14]
 800441e:	6183      	str	r3, [r0, #24]
 8004420:	4619      	mov	r1, r3
 8004422:	2208      	movs	r2, #8
 8004424:	305c      	adds	r0, #92	; 0x5c
 8004426:	f7ff fdd7 	bl	8003fd8 <memset>
 800442a:	4b05      	ldr	r3, [pc, #20]	; (8004440 <std+0x38>)
 800442c:	6263      	str	r3, [r4, #36]	; 0x24
 800442e:	4b05      	ldr	r3, [pc, #20]	; (8004444 <std+0x3c>)
 8004430:	62a3      	str	r3, [r4, #40]	; 0x28
 8004432:	4b05      	ldr	r3, [pc, #20]	; (8004448 <std+0x40>)
 8004434:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004436:	4b05      	ldr	r3, [pc, #20]	; (800444c <std+0x44>)
 8004438:	6224      	str	r4, [r4, #32]
 800443a:	6323      	str	r3, [r4, #48]	; 0x30
 800443c:	bd10      	pop	{r4, pc}
 800443e:	bf00      	nop
 8004440:	08004e81 	.word	0x08004e81
 8004444:	08004ea3 	.word	0x08004ea3
 8004448:	08004edb 	.word	0x08004edb
 800444c:	08004eff 	.word	0x08004eff

08004450 <_cleanup_r>:
 8004450:	4901      	ldr	r1, [pc, #4]	; (8004458 <_cleanup_r+0x8>)
 8004452:	f000 b8af 	b.w	80045b4 <_fwalk_reent>
 8004456:	bf00      	nop
 8004458:	08004391 	.word	0x08004391

0800445c <__sfmoreglue>:
 800445c:	b570      	push	{r4, r5, r6, lr}
 800445e:	2268      	movs	r2, #104	; 0x68
 8004460:	1e4d      	subs	r5, r1, #1
 8004462:	4355      	muls	r5, r2
 8004464:	460e      	mov	r6, r1
 8004466:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800446a:	f000 f997 	bl	800479c <_malloc_r>
 800446e:	4604      	mov	r4, r0
 8004470:	b140      	cbz	r0, 8004484 <__sfmoreglue+0x28>
 8004472:	2100      	movs	r1, #0
 8004474:	e9c0 1600 	strd	r1, r6, [r0]
 8004478:	300c      	adds	r0, #12
 800447a:	60a0      	str	r0, [r4, #8]
 800447c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004480:	f7ff fdaa 	bl	8003fd8 <memset>
 8004484:	4620      	mov	r0, r4
 8004486:	bd70      	pop	{r4, r5, r6, pc}

08004488 <__sfp_lock_acquire>:
 8004488:	4801      	ldr	r0, [pc, #4]	; (8004490 <__sfp_lock_acquire+0x8>)
 800448a:	f000 b8b3 	b.w	80045f4 <__retarget_lock_acquire_recursive>
 800448e:	bf00      	nop
 8004490:	200001a5 	.word	0x200001a5

08004494 <__sfp_lock_release>:
 8004494:	4801      	ldr	r0, [pc, #4]	; (800449c <__sfp_lock_release+0x8>)
 8004496:	f000 b8ae 	b.w	80045f6 <__retarget_lock_release_recursive>
 800449a:	bf00      	nop
 800449c:	200001a5 	.word	0x200001a5

080044a0 <__sinit_lock_acquire>:
 80044a0:	4801      	ldr	r0, [pc, #4]	; (80044a8 <__sinit_lock_acquire+0x8>)
 80044a2:	f000 b8a7 	b.w	80045f4 <__retarget_lock_acquire_recursive>
 80044a6:	bf00      	nop
 80044a8:	200001a6 	.word	0x200001a6

080044ac <__sinit_lock_release>:
 80044ac:	4801      	ldr	r0, [pc, #4]	; (80044b4 <__sinit_lock_release+0x8>)
 80044ae:	f000 b8a2 	b.w	80045f6 <__retarget_lock_release_recursive>
 80044b2:	bf00      	nop
 80044b4:	200001a6 	.word	0x200001a6

080044b8 <__sinit>:
 80044b8:	b510      	push	{r4, lr}
 80044ba:	4604      	mov	r4, r0
 80044bc:	f7ff fff0 	bl	80044a0 <__sinit_lock_acquire>
 80044c0:	69a3      	ldr	r3, [r4, #24]
 80044c2:	b11b      	cbz	r3, 80044cc <__sinit+0x14>
 80044c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044c8:	f7ff bff0 	b.w	80044ac <__sinit_lock_release>
 80044cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80044d0:	6523      	str	r3, [r4, #80]	; 0x50
 80044d2:	4b13      	ldr	r3, [pc, #76]	; (8004520 <__sinit+0x68>)
 80044d4:	4a13      	ldr	r2, [pc, #76]	; (8004524 <__sinit+0x6c>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80044da:	42a3      	cmp	r3, r4
 80044dc:	bf04      	itt	eq
 80044de:	2301      	moveq	r3, #1
 80044e0:	61a3      	streq	r3, [r4, #24]
 80044e2:	4620      	mov	r0, r4
 80044e4:	f000 f820 	bl	8004528 <__sfp>
 80044e8:	6060      	str	r0, [r4, #4]
 80044ea:	4620      	mov	r0, r4
 80044ec:	f000 f81c 	bl	8004528 <__sfp>
 80044f0:	60a0      	str	r0, [r4, #8]
 80044f2:	4620      	mov	r0, r4
 80044f4:	f000 f818 	bl	8004528 <__sfp>
 80044f8:	2200      	movs	r2, #0
 80044fa:	60e0      	str	r0, [r4, #12]
 80044fc:	2104      	movs	r1, #4
 80044fe:	6860      	ldr	r0, [r4, #4]
 8004500:	f7ff ff82 	bl	8004408 <std>
 8004504:	68a0      	ldr	r0, [r4, #8]
 8004506:	2201      	movs	r2, #1
 8004508:	2109      	movs	r1, #9
 800450a:	f7ff ff7d 	bl	8004408 <std>
 800450e:	68e0      	ldr	r0, [r4, #12]
 8004510:	2202      	movs	r2, #2
 8004512:	2112      	movs	r1, #18
 8004514:	f7ff ff78 	bl	8004408 <std>
 8004518:	2301      	movs	r3, #1
 800451a:	61a3      	str	r3, [r4, #24]
 800451c:	e7d2      	b.n	80044c4 <__sinit+0xc>
 800451e:	bf00      	nop
 8004520:	080051d0 	.word	0x080051d0
 8004524:	08004451 	.word	0x08004451

08004528 <__sfp>:
 8004528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800452a:	4607      	mov	r7, r0
 800452c:	f7ff ffac 	bl	8004488 <__sfp_lock_acquire>
 8004530:	4b1e      	ldr	r3, [pc, #120]	; (80045ac <__sfp+0x84>)
 8004532:	681e      	ldr	r6, [r3, #0]
 8004534:	69b3      	ldr	r3, [r6, #24]
 8004536:	b913      	cbnz	r3, 800453e <__sfp+0x16>
 8004538:	4630      	mov	r0, r6
 800453a:	f7ff ffbd 	bl	80044b8 <__sinit>
 800453e:	3648      	adds	r6, #72	; 0x48
 8004540:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004544:	3b01      	subs	r3, #1
 8004546:	d503      	bpl.n	8004550 <__sfp+0x28>
 8004548:	6833      	ldr	r3, [r6, #0]
 800454a:	b30b      	cbz	r3, 8004590 <__sfp+0x68>
 800454c:	6836      	ldr	r6, [r6, #0]
 800454e:	e7f7      	b.n	8004540 <__sfp+0x18>
 8004550:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004554:	b9d5      	cbnz	r5, 800458c <__sfp+0x64>
 8004556:	4b16      	ldr	r3, [pc, #88]	; (80045b0 <__sfp+0x88>)
 8004558:	60e3      	str	r3, [r4, #12]
 800455a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800455e:	6665      	str	r5, [r4, #100]	; 0x64
 8004560:	f000 f847 	bl	80045f2 <__retarget_lock_init_recursive>
 8004564:	f7ff ff96 	bl	8004494 <__sfp_lock_release>
 8004568:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800456c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004570:	6025      	str	r5, [r4, #0]
 8004572:	61a5      	str	r5, [r4, #24]
 8004574:	2208      	movs	r2, #8
 8004576:	4629      	mov	r1, r5
 8004578:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800457c:	f7ff fd2c 	bl	8003fd8 <memset>
 8004580:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004584:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004588:	4620      	mov	r0, r4
 800458a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800458c:	3468      	adds	r4, #104	; 0x68
 800458e:	e7d9      	b.n	8004544 <__sfp+0x1c>
 8004590:	2104      	movs	r1, #4
 8004592:	4638      	mov	r0, r7
 8004594:	f7ff ff62 	bl	800445c <__sfmoreglue>
 8004598:	4604      	mov	r4, r0
 800459a:	6030      	str	r0, [r6, #0]
 800459c:	2800      	cmp	r0, #0
 800459e:	d1d5      	bne.n	800454c <__sfp+0x24>
 80045a0:	f7ff ff78 	bl	8004494 <__sfp_lock_release>
 80045a4:	230c      	movs	r3, #12
 80045a6:	603b      	str	r3, [r7, #0]
 80045a8:	e7ee      	b.n	8004588 <__sfp+0x60>
 80045aa:	bf00      	nop
 80045ac:	080051d0 	.word	0x080051d0
 80045b0:	ffff0001 	.word	0xffff0001

080045b4 <_fwalk_reent>:
 80045b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045b8:	4606      	mov	r6, r0
 80045ba:	4688      	mov	r8, r1
 80045bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80045c0:	2700      	movs	r7, #0
 80045c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80045c6:	f1b9 0901 	subs.w	r9, r9, #1
 80045ca:	d505      	bpl.n	80045d8 <_fwalk_reent+0x24>
 80045cc:	6824      	ldr	r4, [r4, #0]
 80045ce:	2c00      	cmp	r4, #0
 80045d0:	d1f7      	bne.n	80045c2 <_fwalk_reent+0xe>
 80045d2:	4638      	mov	r0, r7
 80045d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045d8:	89ab      	ldrh	r3, [r5, #12]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d907      	bls.n	80045ee <_fwalk_reent+0x3a>
 80045de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80045e2:	3301      	adds	r3, #1
 80045e4:	d003      	beq.n	80045ee <_fwalk_reent+0x3a>
 80045e6:	4629      	mov	r1, r5
 80045e8:	4630      	mov	r0, r6
 80045ea:	47c0      	blx	r8
 80045ec:	4307      	orrs	r7, r0
 80045ee:	3568      	adds	r5, #104	; 0x68
 80045f0:	e7e9      	b.n	80045c6 <_fwalk_reent+0x12>

080045f2 <__retarget_lock_init_recursive>:
 80045f2:	4770      	bx	lr

080045f4 <__retarget_lock_acquire_recursive>:
 80045f4:	4770      	bx	lr

080045f6 <__retarget_lock_release_recursive>:
 80045f6:	4770      	bx	lr

080045f8 <__swhatbuf_r>:
 80045f8:	b570      	push	{r4, r5, r6, lr}
 80045fa:	460e      	mov	r6, r1
 80045fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004600:	2900      	cmp	r1, #0
 8004602:	b096      	sub	sp, #88	; 0x58
 8004604:	4614      	mov	r4, r2
 8004606:	461d      	mov	r5, r3
 8004608:	da08      	bge.n	800461c <__swhatbuf_r+0x24>
 800460a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	602a      	str	r2, [r5, #0]
 8004612:	061a      	lsls	r2, r3, #24
 8004614:	d410      	bmi.n	8004638 <__swhatbuf_r+0x40>
 8004616:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800461a:	e00e      	b.n	800463a <__swhatbuf_r+0x42>
 800461c:	466a      	mov	r2, sp
 800461e:	f000 fc95 	bl	8004f4c <_fstat_r>
 8004622:	2800      	cmp	r0, #0
 8004624:	dbf1      	blt.n	800460a <__swhatbuf_r+0x12>
 8004626:	9a01      	ldr	r2, [sp, #4]
 8004628:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800462c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004630:	425a      	negs	r2, r3
 8004632:	415a      	adcs	r2, r3
 8004634:	602a      	str	r2, [r5, #0]
 8004636:	e7ee      	b.n	8004616 <__swhatbuf_r+0x1e>
 8004638:	2340      	movs	r3, #64	; 0x40
 800463a:	2000      	movs	r0, #0
 800463c:	6023      	str	r3, [r4, #0]
 800463e:	b016      	add	sp, #88	; 0x58
 8004640:	bd70      	pop	{r4, r5, r6, pc}
	...

08004644 <__smakebuf_r>:
 8004644:	898b      	ldrh	r3, [r1, #12]
 8004646:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004648:	079d      	lsls	r5, r3, #30
 800464a:	4606      	mov	r6, r0
 800464c:	460c      	mov	r4, r1
 800464e:	d507      	bpl.n	8004660 <__smakebuf_r+0x1c>
 8004650:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004654:	6023      	str	r3, [r4, #0]
 8004656:	6123      	str	r3, [r4, #16]
 8004658:	2301      	movs	r3, #1
 800465a:	6163      	str	r3, [r4, #20]
 800465c:	b002      	add	sp, #8
 800465e:	bd70      	pop	{r4, r5, r6, pc}
 8004660:	ab01      	add	r3, sp, #4
 8004662:	466a      	mov	r2, sp
 8004664:	f7ff ffc8 	bl	80045f8 <__swhatbuf_r>
 8004668:	9900      	ldr	r1, [sp, #0]
 800466a:	4605      	mov	r5, r0
 800466c:	4630      	mov	r0, r6
 800466e:	f000 f895 	bl	800479c <_malloc_r>
 8004672:	b948      	cbnz	r0, 8004688 <__smakebuf_r+0x44>
 8004674:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004678:	059a      	lsls	r2, r3, #22
 800467a:	d4ef      	bmi.n	800465c <__smakebuf_r+0x18>
 800467c:	f023 0303 	bic.w	r3, r3, #3
 8004680:	f043 0302 	orr.w	r3, r3, #2
 8004684:	81a3      	strh	r3, [r4, #12]
 8004686:	e7e3      	b.n	8004650 <__smakebuf_r+0xc>
 8004688:	4b0d      	ldr	r3, [pc, #52]	; (80046c0 <__smakebuf_r+0x7c>)
 800468a:	62b3      	str	r3, [r6, #40]	; 0x28
 800468c:	89a3      	ldrh	r3, [r4, #12]
 800468e:	6020      	str	r0, [r4, #0]
 8004690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004694:	81a3      	strh	r3, [r4, #12]
 8004696:	9b00      	ldr	r3, [sp, #0]
 8004698:	6163      	str	r3, [r4, #20]
 800469a:	9b01      	ldr	r3, [sp, #4]
 800469c:	6120      	str	r0, [r4, #16]
 800469e:	b15b      	cbz	r3, 80046b8 <__smakebuf_r+0x74>
 80046a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046a4:	4630      	mov	r0, r6
 80046a6:	f000 fc63 	bl	8004f70 <_isatty_r>
 80046aa:	b128      	cbz	r0, 80046b8 <__smakebuf_r+0x74>
 80046ac:	89a3      	ldrh	r3, [r4, #12]
 80046ae:	f023 0303 	bic.w	r3, r3, #3
 80046b2:	f043 0301 	orr.w	r3, r3, #1
 80046b6:	81a3      	strh	r3, [r4, #12]
 80046b8:	89a0      	ldrh	r0, [r4, #12]
 80046ba:	4305      	orrs	r5, r0
 80046bc:	81a5      	strh	r5, [r4, #12]
 80046be:	e7cd      	b.n	800465c <__smakebuf_r+0x18>
 80046c0:	08004451 	.word	0x08004451

080046c4 <_free_r>:
 80046c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80046c6:	2900      	cmp	r1, #0
 80046c8:	d044      	beq.n	8004754 <_free_r+0x90>
 80046ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046ce:	9001      	str	r0, [sp, #4]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f1a1 0404 	sub.w	r4, r1, #4
 80046d6:	bfb8      	it	lt
 80046d8:	18e4      	addlt	r4, r4, r3
 80046da:	f000 fc6b 	bl	8004fb4 <__malloc_lock>
 80046de:	4a1e      	ldr	r2, [pc, #120]	; (8004758 <_free_r+0x94>)
 80046e0:	9801      	ldr	r0, [sp, #4]
 80046e2:	6813      	ldr	r3, [r2, #0]
 80046e4:	b933      	cbnz	r3, 80046f4 <_free_r+0x30>
 80046e6:	6063      	str	r3, [r4, #4]
 80046e8:	6014      	str	r4, [r2, #0]
 80046ea:	b003      	add	sp, #12
 80046ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80046f0:	f000 bc66 	b.w	8004fc0 <__malloc_unlock>
 80046f4:	42a3      	cmp	r3, r4
 80046f6:	d908      	bls.n	800470a <_free_r+0x46>
 80046f8:	6825      	ldr	r5, [r4, #0]
 80046fa:	1961      	adds	r1, r4, r5
 80046fc:	428b      	cmp	r3, r1
 80046fe:	bf01      	itttt	eq
 8004700:	6819      	ldreq	r1, [r3, #0]
 8004702:	685b      	ldreq	r3, [r3, #4]
 8004704:	1949      	addeq	r1, r1, r5
 8004706:	6021      	streq	r1, [r4, #0]
 8004708:	e7ed      	b.n	80046e6 <_free_r+0x22>
 800470a:	461a      	mov	r2, r3
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	b10b      	cbz	r3, 8004714 <_free_r+0x50>
 8004710:	42a3      	cmp	r3, r4
 8004712:	d9fa      	bls.n	800470a <_free_r+0x46>
 8004714:	6811      	ldr	r1, [r2, #0]
 8004716:	1855      	adds	r5, r2, r1
 8004718:	42a5      	cmp	r5, r4
 800471a:	d10b      	bne.n	8004734 <_free_r+0x70>
 800471c:	6824      	ldr	r4, [r4, #0]
 800471e:	4421      	add	r1, r4
 8004720:	1854      	adds	r4, r2, r1
 8004722:	42a3      	cmp	r3, r4
 8004724:	6011      	str	r1, [r2, #0]
 8004726:	d1e0      	bne.n	80046ea <_free_r+0x26>
 8004728:	681c      	ldr	r4, [r3, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	6053      	str	r3, [r2, #4]
 800472e:	4421      	add	r1, r4
 8004730:	6011      	str	r1, [r2, #0]
 8004732:	e7da      	b.n	80046ea <_free_r+0x26>
 8004734:	d902      	bls.n	800473c <_free_r+0x78>
 8004736:	230c      	movs	r3, #12
 8004738:	6003      	str	r3, [r0, #0]
 800473a:	e7d6      	b.n	80046ea <_free_r+0x26>
 800473c:	6825      	ldr	r5, [r4, #0]
 800473e:	1961      	adds	r1, r4, r5
 8004740:	428b      	cmp	r3, r1
 8004742:	bf04      	itt	eq
 8004744:	6819      	ldreq	r1, [r3, #0]
 8004746:	685b      	ldreq	r3, [r3, #4]
 8004748:	6063      	str	r3, [r4, #4]
 800474a:	bf04      	itt	eq
 800474c:	1949      	addeq	r1, r1, r5
 800474e:	6021      	streq	r1, [r4, #0]
 8004750:	6054      	str	r4, [r2, #4]
 8004752:	e7ca      	b.n	80046ea <_free_r+0x26>
 8004754:	b003      	add	sp, #12
 8004756:	bd30      	pop	{r4, r5, pc}
 8004758:	200001a8 	.word	0x200001a8

0800475c <sbrk_aligned>:
 800475c:	b570      	push	{r4, r5, r6, lr}
 800475e:	4e0e      	ldr	r6, [pc, #56]	; (8004798 <sbrk_aligned+0x3c>)
 8004760:	460c      	mov	r4, r1
 8004762:	6831      	ldr	r1, [r6, #0]
 8004764:	4605      	mov	r5, r0
 8004766:	b911      	cbnz	r1, 800476e <sbrk_aligned+0x12>
 8004768:	f000 fb7a 	bl	8004e60 <_sbrk_r>
 800476c:	6030      	str	r0, [r6, #0]
 800476e:	4621      	mov	r1, r4
 8004770:	4628      	mov	r0, r5
 8004772:	f000 fb75 	bl	8004e60 <_sbrk_r>
 8004776:	1c43      	adds	r3, r0, #1
 8004778:	d00a      	beq.n	8004790 <sbrk_aligned+0x34>
 800477a:	1cc4      	adds	r4, r0, #3
 800477c:	f024 0403 	bic.w	r4, r4, #3
 8004780:	42a0      	cmp	r0, r4
 8004782:	d007      	beq.n	8004794 <sbrk_aligned+0x38>
 8004784:	1a21      	subs	r1, r4, r0
 8004786:	4628      	mov	r0, r5
 8004788:	f000 fb6a 	bl	8004e60 <_sbrk_r>
 800478c:	3001      	adds	r0, #1
 800478e:	d101      	bne.n	8004794 <sbrk_aligned+0x38>
 8004790:	f04f 34ff 	mov.w	r4, #4294967295
 8004794:	4620      	mov	r0, r4
 8004796:	bd70      	pop	{r4, r5, r6, pc}
 8004798:	200001ac 	.word	0x200001ac

0800479c <_malloc_r>:
 800479c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047a0:	1ccd      	adds	r5, r1, #3
 80047a2:	f025 0503 	bic.w	r5, r5, #3
 80047a6:	3508      	adds	r5, #8
 80047a8:	2d0c      	cmp	r5, #12
 80047aa:	bf38      	it	cc
 80047ac:	250c      	movcc	r5, #12
 80047ae:	2d00      	cmp	r5, #0
 80047b0:	4607      	mov	r7, r0
 80047b2:	db01      	blt.n	80047b8 <_malloc_r+0x1c>
 80047b4:	42a9      	cmp	r1, r5
 80047b6:	d905      	bls.n	80047c4 <_malloc_r+0x28>
 80047b8:	230c      	movs	r3, #12
 80047ba:	603b      	str	r3, [r7, #0]
 80047bc:	2600      	movs	r6, #0
 80047be:	4630      	mov	r0, r6
 80047c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047c4:	4e2e      	ldr	r6, [pc, #184]	; (8004880 <_malloc_r+0xe4>)
 80047c6:	f000 fbf5 	bl	8004fb4 <__malloc_lock>
 80047ca:	6833      	ldr	r3, [r6, #0]
 80047cc:	461c      	mov	r4, r3
 80047ce:	bb34      	cbnz	r4, 800481e <_malloc_r+0x82>
 80047d0:	4629      	mov	r1, r5
 80047d2:	4638      	mov	r0, r7
 80047d4:	f7ff ffc2 	bl	800475c <sbrk_aligned>
 80047d8:	1c43      	adds	r3, r0, #1
 80047da:	4604      	mov	r4, r0
 80047dc:	d14d      	bne.n	800487a <_malloc_r+0xde>
 80047de:	6834      	ldr	r4, [r6, #0]
 80047e0:	4626      	mov	r6, r4
 80047e2:	2e00      	cmp	r6, #0
 80047e4:	d140      	bne.n	8004868 <_malloc_r+0xcc>
 80047e6:	6823      	ldr	r3, [r4, #0]
 80047e8:	4631      	mov	r1, r6
 80047ea:	4638      	mov	r0, r7
 80047ec:	eb04 0803 	add.w	r8, r4, r3
 80047f0:	f000 fb36 	bl	8004e60 <_sbrk_r>
 80047f4:	4580      	cmp	r8, r0
 80047f6:	d13a      	bne.n	800486e <_malloc_r+0xd2>
 80047f8:	6821      	ldr	r1, [r4, #0]
 80047fa:	3503      	adds	r5, #3
 80047fc:	1a6d      	subs	r5, r5, r1
 80047fe:	f025 0503 	bic.w	r5, r5, #3
 8004802:	3508      	adds	r5, #8
 8004804:	2d0c      	cmp	r5, #12
 8004806:	bf38      	it	cc
 8004808:	250c      	movcc	r5, #12
 800480a:	4629      	mov	r1, r5
 800480c:	4638      	mov	r0, r7
 800480e:	f7ff ffa5 	bl	800475c <sbrk_aligned>
 8004812:	3001      	adds	r0, #1
 8004814:	d02b      	beq.n	800486e <_malloc_r+0xd2>
 8004816:	6823      	ldr	r3, [r4, #0]
 8004818:	442b      	add	r3, r5
 800481a:	6023      	str	r3, [r4, #0]
 800481c:	e00e      	b.n	800483c <_malloc_r+0xa0>
 800481e:	6822      	ldr	r2, [r4, #0]
 8004820:	1b52      	subs	r2, r2, r5
 8004822:	d41e      	bmi.n	8004862 <_malloc_r+0xc6>
 8004824:	2a0b      	cmp	r2, #11
 8004826:	d916      	bls.n	8004856 <_malloc_r+0xba>
 8004828:	1961      	adds	r1, r4, r5
 800482a:	42a3      	cmp	r3, r4
 800482c:	6025      	str	r5, [r4, #0]
 800482e:	bf18      	it	ne
 8004830:	6059      	strne	r1, [r3, #4]
 8004832:	6863      	ldr	r3, [r4, #4]
 8004834:	bf08      	it	eq
 8004836:	6031      	streq	r1, [r6, #0]
 8004838:	5162      	str	r2, [r4, r5]
 800483a:	604b      	str	r3, [r1, #4]
 800483c:	4638      	mov	r0, r7
 800483e:	f104 060b 	add.w	r6, r4, #11
 8004842:	f000 fbbd 	bl	8004fc0 <__malloc_unlock>
 8004846:	f026 0607 	bic.w	r6, r6, #7
 800484a:	1d23      	adds	r3, r4, #4
 800484c:	1af2      	subs	r2, r6, r3
 800484e:	d0b6      	beq.n	80047be <_malloc_r+0x22>
 8004850:	1b9b      	subs	r3, r3, r6
 8004852:	50a3      	str	r3, [r4, r2]
 8004854:	e7b3      	b.n	80047be <_malloc_r+0x22>
 8004856:	6862      	ldr	r2, [r4, #4]
 8004858:	42a3      	cmp	r3, r4
 800485a:	bf0c      	ite	eq
 800485c:	6032      	streq	r2, [r6, #0]
 800485e:	605a      	strne	r2, [r3, #4]
 8004860:	e7ec      	b.n	800483c <_malloc_r+0xa0>
 8004862:	4623      	mov	r3, r4
 8004864:	6864      	ldr	r4, [r4, #4]
 8004866:	e7b2      	b.n	80047ce <_malloc_r+0x32>
 8004868:	4634      	mov	r4, r6
 800486a:	6876      	ldr	r6, [r6, #4]
 800486c:	e7b9      	b.n	80047e2 <_malloc_r+0x46>
 800486e:	230c      	movs	r3, #12
 8004870:	603b      	str	r3, [r7, #0]
 8004872:	4638      	mov	r0, r7
 8004874:	f000 fba4 	bl	8004fc0 <__malloc_unlock>
 8004878:	e7a1      	b.n	80047be <_malloc_r+0x22>
 800487a:	6025      	str	r5, [r4, #0]
 800487c:	e7de      	b.n	800483c <_malloc_r+0xa0>
 800487e:	bf00      	nop
 8004880:	200001a8 	.word	0x200001a8

08004884 <__sfputc_r>:
 8004884:	6893      	ldr	r3, [r2, #8]
 8004886:	3b01      	subs	r3, #1
 8004888:	2b00      	cmp	r3, #0
 800488a:	b410      	push	{r4}
 800488c:	6093      	str	r3, [r2, #8]
 800488e:	da08      	bge.n	80048a2 <__sfputc_r+0x1e>
 8004890:	6994      	ldr	r4, [r2, #24]
 8004892:	42a3      	cmp	r3, r4
 8004894:	db01      	blt.n	800489a <__sfputc_r+0x16>
 8004896:	290a      	cmp	r1, #10
 8004898:	d103      	bne.n	80048a2 <__sfputc_r+0x1e>
 800489a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800489e:	f7ff bc31 	b.w	8004104 <__swbuf_r>
 80048a2:	6813      	ldr	r3, [r2, #0]
 80048a4:	1c58      	adds	r0, r3, #1
 80048a6:	6010      	str	r0, [r2, #0]
 80048a8:	7019      	strb	r1, [r3, #0]
 80048aa:	4608      	mov	r0, r1
 80048ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048b0:	4770      	bx	lr

080048b2 <__sfputs_r>:
 80048b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048b4:	4606      	mov	r6, r0
 80048b6:	460f      	mov	r7, r1
 80048b8:	4614      	mov	r4, r2
 80048ba:	18d5      	adds	r5, r2, r3
 80048bc:	42ac      	cmp	r4, r5
 80048be:	d101      	bne.n	80048c4 <__sfputs_r+0x12>
 80048c0:	2000      	movs	r0, #0
 80048c2:	e007      	b.n	80048d4 <__sfputs_r+0x22>
 80048c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048c8:	463a      	mov	r2, r7
 80048ca:	4630      	mov	r0, r6
 80048cc:	f7ff ffda 	bl	8004884 <__sfputc_r>
 80048d0:	1c43      	adds	r3, r0, #1
 80048d2:	d1f3      	bne.n	80048bc <__sfputs_r+0xa>
 80048d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080048d8 <_vfiprintf_r>:
 80048d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048dc:	460d      	mov	r5, r1
 80048de:	b09d      	sub	sp, #116	; 0x74
 80048e0:	4614      	mov	r4, r2
 80048e2:	4698      	mov	r8, r3
 80048e4:	4606      	mov	r6, r0
 80048e6:	b118      	cbz	r0, 80048f0 <_vfiprintf_r+0x18>
 80048e8:	6983      	ldr	r3, [r0, #24]
 80048ea:	b90b      	cbnz	r3, 80048f0 <_vfiprintf_r+0x18>
 80048ec:	f7ff fde4 	bl	80044b8 <__sinit>
 80048f0:	4b89      	ldr	r3, [pc, #548]	; (8004b18 <_vfiprintf_r+0x240>)
 80048f2:	429d      	cmp	r5, r3
 80048f4:	d11b      	bne.n	800492e <_vfiprintf_r+0x56>
 80048f6:	6875      	ldr	r5, [r6, #4]
 80048f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048fa:	07d9      	lsls	r1, r3, #31
 80048fc:	d405      	bmi.n	800490a <_vfiprintf_r+0x32>
 80048fe:	89ab      	ldrh	r3, [r5, #12]
 8004900:	059a      	lsls	r2, r3, #22
 8004902:	d402      	bmi.n	800490a <_vfiprintf_r+0x32>
 8004904:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004906:	f7ff fe75 	bl	80045f4 <__retarget_lock_acquire_recursive>
 800490a:	89ab      	ldrh	r3, [r5, #12]
 800490c:	071b      	lsls	r3, r3, #28
 800490e:	d501      	bpl.n	8004914 <_vfiprintf_r+0x3c>
 8004910:	692b      	ldr	r3, [r5, #16]
 8004912:	b9eb      	cbnz	r3, 8004950 <_vfiprintf_r+0x78>
 8004914:	4629      	mov	r1, r5
 8004916:	4630      	mov	r0, r6
 8004918:	f7ff fc46 	bl	80041a8 <__swsetup_r>
 800491c:	b1c0      	cbz	r0, 8004950 <_vfiprintf_r+0x78>
 800491e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004920:	07dc      	lsls	r4, r3, #31
 8004922:	d50e      	bpl.n	8004942 <_vfiprintf_r+0x6a>
 8004924:	f04f 30ff 	mov.w	r0, #4294967295
 8004928:	b01d      	add	sp, #116	; 0x74
 800492a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800492e:	4b7b      	ldr	r3, [pc, #492]	; (8004b1c <_vfiprintf_r+0x244>)
 8004930:	429d      	cmp	r5, r3
 8004932:	d101      	bne.n	8004938 <_vfiprintf_r+0x60>
 8004934:	68b5      	ldr	r5, [r6, #8]
 8004936:	e7df      	b.n	80048f8 <_vfiprintf_r+0x20>
 8004938:	4b79      	ldr	r3, [pc, #484]	; (8004b20 <_vfiprintf_r+0x248>)
 800493a:	429d      	cmp	r5, r3
 800493c:	bf08      	it	eq
 800493e:	68f5      	ldreq	r5, [r6, #12]
 8004940:	e7da      	b.n	80048f8 <_vfiprintf_r+0x20>
 8004942:	89ab      	ldrh	r3, [r5, #12]
 8004944:	0598      	lsls	r0, r3, #22
 8004946:	d4ed      	bmi.n	8004924 <_vfiprintf_r+0x4c>
 8004948:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800494a:	f7ff fe54 	bl	80045f6 <__retarget_lock_release_recursive>
 800494e:	e7e9      	b.n	8004924 <_vfiprintf_r+0x4c>
 8004950:	2300      	movs	r3, #0
 8004952:	9309      	str	r3, [sp, #36]	; 0x24
 8004954:	2320      	movs	r3, #32
 8004956:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800495a:	f8cd 800c 	str.w	r8, [sp, #12]
 800495e:	2330      	movs	r3, #48	; 0x30
 8004960:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004b24 <_vfiprintf_r+0x24c>
 8004964:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004968:	f04f 0901 	mov.w	r9, #1
 800496c:	4623      	mov	r3, r4
 800496e:	469a      	mov	sl, r3
 8004970:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004974:	b10a      	cbz	r2, 800497a <_vfiprintf_r+0xa2>
 8004976:	2a25      	cmp	r2, #37	; 0x25
 8004978:	d1f9      	bne.n	800496e <_vfiprintf_r+0x96>
 800497a:	ebba 0b04 	subs.w	fp, sl, r4
 800497e:	d00b      	beq.n	8004998 <_vfiprintf_r+0xc0>
 8004980:	465b      	mov	r3, fp
 8004982:	4622      	mov	r2, r4
 8004984:	4629      	mov	r1, r5
 8004986:	4630      	mov	r0, r6
 8004988:	f7ff ff93 	bl	80048b2 <__sfputs_r>
 800498c:	3001      	adds	r0, #1
 800498e:	f000 80aa 	beq.w	8004ae6 <_vfiprintf_r+0x20e>
 8004992:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004994:	445a      	add	r2, fp
 8004996:	9209      	str	r2, [sp, #36]	; 0x24
 8004998:	f89a 3000 	ldrb.w	r3, [sl]
 800499c:	2b00      	cmp	r3, #0
 800499e:	f000 80a2 	beq.w	8004ae6 <_vfiprintf_r+0x20e>
 80049a2:	2300      	movs	r3, #0
 80049a4:	f04f 32ff 	mov.w	r2, #4294967295
 80049a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049ac:	f10a 0a01 	add.w	sl, sl, #1
 80049b0:	9304      	str	r3, [sp, #16]
 80049b2:	9307      	str	r3, [sp, #28]
 80049b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80049b8:	931a      	str	r3, [sp, #104]	; 0x68
 80049ba:	4654      	mov	r4, sl
 80049bc:	2205      	movs	r2, #5
 80049be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049c2:	4858      	ldr	r0, [pc, #352]	; (8004b24 <_vfiprintf_r+0x24c>)
 80049c4:	f7fb fc04 	bl	80001d0 <memchr>
 80049c8:	9a04      	ldr	r2, [sp, #16]
 80049ca:	b9d8      	cbnz	r0, 8004a04 <_vfiprintf_r+0x12c>
 80049cc:	06d1      	lsls	r1, r2, #27
 80049ce:	bf44      	itt	mi
 80049d0:	2320      	movmi	r3, #32
 80049d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049d6:	0713      	lsls	r3, r2, #28
 80049d8:	bf44      	itt	mi
 80049da:	232b      	movmi	r3, #43	; 0x2b
 80049dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049e0:	f89a 3000 	ldrb.w	r3, [sl]
 80049e4:	2b2a      	cmp	r3, #42	; 0x2a
 80049e6:	d015      	beq.n	8004a14 <_vfiprintf_r+0x13c>
 80049e8:	9a07      	ldr	r2, [sp, #28]
 80049ea:	4654      	mov	r4, sl
 80049ec:	2000      	movs	r0, #0
 80049ee:	f04f 0c0a 	mov.w	ip, #10
 80049f2:	4621      	mov	r1, r4
 80049f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049f8:	3b30      	subs	r3, #48	; 0x30
 80049fa:	2b09      	cmp	r3, #9
 80049fc:	d94e      	bls.n	8004a9c <_vfiprintf_r+0x1c4>
 80049fe:	b1b0      	cbz	r0, 8004a2e <_vfiprintf_r+0x156>
 8004a00:	9207      	str	r2, [sp, #28]
 8004a02:	e014      	b.n	8004a2e <_vfiprintf_r+0x156>
 8004a04:	eba0 0308 	sub.w	r3, r0, r8
 8004a08:	fa09 f303 	lsl.w	r3, r9, r3
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	9304      	str	r3, [sp, #16]
 8004a10:	46a2      	mov	sl, r4
 8004a12:	e7d2      	b.n	80049ba <_vfiprintf_r+0xe2>
 8004a14:	9b03      	ldr	r3, [sp, #12]
 8004a16:	1d19      	adds	r1, r3, #4
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	9103      	str	r1, [sp, #12]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	bfbb      	ittet	lt
 8004a20:	425b      	neglt	r3, r3
 8004a22:	f042 0202 	orrlt.w	r2, r2, #2
 8004a26:	9307      	strge	r3, [sp, #28]
 8004a28:	9307      	strlt	r3, [sp, #28]
 8004a2a:	bfb8      	it	lt
 8004a2c:	9204      	strlt	r2, [sp, #16]
 8004a2e:	7823      	ldrb	r3, [r4, #0]
 8004a30:	2b2e      	cmp	r3, #46	; 0x2e
 8004a32:	d10c      	bne.n	8004a4e <_vfiprintf_r+0x176>
 8004a34:	7863      	ldrb	r3, [r4, #1]
 8004a36:	2b2a      	cmp	r3, #42	; 0x2a
 8004a38:	d135      	bne.n	8004aa6 <_vfiprintf_r+0x1ce>
 8004a3a:	9b03      	ldr	r3, [sp, #12]
 8004a3c:	1d1a      	adds	r2, r3, #4
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	9203      	str	r2, [sp, #12]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	bfb8      	it	lt
 8004a46:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a4a:	3402      	adds	r4, #2
 8004a4c:	9305      	str	r3, [sp, #20]
 8004a4e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004b34 <_vfiprintf_r+0x25c>
 8004a52:	7821      	ldrb	r1, [r4, #0]
 8004a54:	2203      	movs	r2, #3
 8004a56:	4650      	mov	r0, sl
 8004a58:	f7fb fbba 	bl	80001d0 <memchr>
 8004a5c:	b140      	cbz	r0, 8004a70 <_vfiprintf_r+0x198>
 8004a5e:	2340      	movs	r3, #64	; 0x40
 8004a60:	eba0 000a 	sub.w	r0, r0, sl
 8004a64:	fa03 f000 	lsl.w	r0, r3, r0
 8004a68:	9b04      	ldr	r3, [sp, #16]
 8004a6a:	4303      	orrs	r3, r0
 8004a6c:	3401      	adds	r4, #1
 8004a6e:	9304      	str	r3, [sp, #16]
 8004a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a74:	482c      	ldr	r0, [pc, #176]	; (8004b28 <_vfiprintf_r+0x250>)
 8004a76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a7a:	2206      	movs	r2, #6
 8004a7c:	f7fb fba8 	bl	80001d0 <memchr>
 8004a80:	2800      	cmp	r0, #0
 8004a82:	d03f      	beq.n	8004b04 <_vfiprintf_r+0x22c>
 8004a84:	4b29      	ldr	r3, [pc, #164]	; (8004b2c <_vfiprintf_r+0x254>)
 8004a86:	bb1b      	cbnz	r3, 8004ad0 <_vfiprintf_r+0x1f8>
 8004a88:	9b03      	ldr	r3, [sp, #12]
 8004a8a:	3307      	adds	r3, #7
 8004a8c:	f023 0307 	bic.w	r3, r3, #7
 8004a90:	3308      	adds	r3, #8
 8004a92:	9303      	str	r3, [sp, #12]
 8004a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a96:	443b      	add	r3, r7
 8004a98:	9309      	str	r3, [sp, #36]	; 0x24
 8004a9a:	e767      	b.n	800496c <_vfiprintf_r+0x94>
 8004a9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004aa0:	460c      	mov	r4, r1
 8004aa2:	2001      	movs	r0, #1
 8004aa4:	e7a5      	b.n	80049f2 <_vfiprintf_r+0x11a>
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	3401      	adds	r4, #1
 8004aaa:	9305      	str	r3, [sp, #20]
 8004aac:	4619      	mov	r1, r3
 8004aae:	f04f 0c0a 	mov.w	ip, #10
 8004ab2:	4620      	mov	r0, r4
 8004ab4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ab8:	3a30      	subs	r2, #48	; 0x30
 8004aba:	2a09      	cmp	r2, #9
 8004abc:	d903      	bls.n	8004ac6 <_vfiprintf_r+0x1ee>
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d0c5      	beq.n	8004a4e <_vfiprintf_r+0x176>
 8004ac2:	9105      	str	r1, [sp, #20]
 8004ac4:	e7c3      	b.n	8004a4e <_vfiprintf_r+0x176>
 8004ac6:	fb0c 2101 	mla	r1, ip, r1, r2
 8004aca:	4604      	mov	r4, r0
 8004acc:	2301      	movs	r3, #1
 8004ace:	e7f0      	b.n	8004ab2 <_vfiprintf_r+0x1da>
 8004ad0:	ab03      	add	r3, sp, #12
 8004ad2:	9300      	str	r3, [sp, #0]
 8004ad4:	462a      	mov	r2, r5
 8004ad6:	4b16      	ldr	r3, [pc, #88]	; (8004b30 <_vfiprintf_r+0x258>)
 8004ad8:	a904      	add	r1, sp, #16
 8004ada:	4630      	mov	r0, r6
 8004adc:	f3af 8000 	nop.w
 8004ae0:	4607      	mov	r7, r0
 8004ae2:	1c78      	adds	r0, r7, #1
 8004ae4:	d1d6      	bne.n	8004a94 <_vfiprintf_r+0x1bc>
 8004ae6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ae8:	07d9      	lsls	r1, r3, #31
 8004aea:	d405      	bmi.n	8004af8 <_vfiprintf_r+0x220>
 8004aec:	89ab      	ldrh	r3, [r5, #12]
 8004aee:	059a      	lsls	r2, r3, #22
 8004af0:	d402      	bmi.n	8004af8 <_vfiprintf_r+0x220>
 8004af2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004af4:	f7ff fd7f 	bl	80045f6 <__retarget_lock_release_recursive>
 8004af8:	89ab      	ldrh	r3, [r5, #12]
 8004afa:	065b      	lsls	r3, r3, #25
 8004afc:	f53f af12 	bmi.w	8004924 <_vfiprintf_r+0x4c>
 8004b00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b02:	e711      	b.n	8004928 <_vfiprintf_r+0x50>
 8004b04:	ab03      	add	r3, sp, #12
 8004b06:	9300      	str	r3, [sp, #0]
 8004b08:	462a      	mov	r2, r5
 8004b0a:	4b09      	ldr	r3, [pc, #36]	; (8004b30 <_vfiprintf_r+0x258>)
 8004b0c:	a904      	add	r1, sp, #16
 8004b0e:	4630      	mov	r0, r6
 8004b10:	f000 f880 	bl	8004c14 <_printf_i>
 8004b14:	e7e4      	b.n	8004ae0 <_vfiprintf_r+0x208>
 8004b16:	bf00      	nop
 8004b18:	080051f4 	.word	0x080051f4
 8004b1c:	08005214 	.word	0x08005214
 8004b20:	080051d4 	.word	0x080051d4
 8004b24:	08005234 	.word	0x08005234
 8004b28:	0800523e 	.word	0x0800523e
 8004b2c:	00000000 	.word	0x00000000
 8004b30:	080048b3 	.word	0x080048b3
 8004b34:	0800523a 	.word	0x0800523a

08004b38 <_printf_common>:
 8004b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b3c:	4616      	mov	r6, r2
 8004b3e:	4699      	mov	r9, r3
 8004b40:	688a      	ldr	r2, [r1, #8]
 8004b42:	690b      	ldr	r3, [r1, #16]
 8004b44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	bfb8      	it	lt
 8004b4c:	4613      	movlt	r3, r2
 8004b4e:	6033      	str	r3, [r6, #0]
 8004b50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b54:	4607      	mov	r7, r0
 8004b56:	460c      	mov	r4, r1
 8004b58:	b10a      	cbz	r2, 8004b5e <_printf_common+0x26>
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	6033      	str	r3, [r6, #0]
 8004b5e:	6823      	ldr	r3, [r4, #0]
 8004b60:	0699      	lsls	r1, r3, #26
 8004b62:	bf42      	ittt	mi
 8004b64:	6833      	ldrmi	r3, [r6, #0]
 8004b66:	3302      	addmi	r3, #2
 8004b68:	6033      	strmi	r3, [r6, #0]
 8004b6a:	6825      	ldr	r5, [r4, #0]
 8004b6c:	f015 0506 	ands.w	r5, r5, #6
 8004b70:	d106      	bne.n	8004b80 <_printf_common+0x48>
 8004b72:	f104 0a19 	add.w	sl, r4, #25
 8004b76:	68e3      	ldr	r3, [r4, #12]
 8004b78:	6832      	ldr	r2, [r6, #0]
 8004b7a:	1a9b      	subs	r3, r3, r2
 8004b7c:	42ab      	cmp	r3, r5
 8004b7e:	dc26      	bgt.n	8004bce <_printf_common+0x96>
 8004b80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b84:	1e13      	subs	r3, r2, #0
 8004b86:	6822      	ldr	r2, [r4, #0]
 8004b88:	bf18      	it	ne
 8004b8a:	2301      	movne	r3, #1
 8004b8c:	0692      	lsls	r2, r2, #26
 8004b8e:	d42b      	bmi.n	8004be8 <_printf_common+0xb0>
 8004b90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b94:	4649      	mov	r1, r9
 8004b96:	4638      	mov	r0, r7
 8004b98:	47c0      	blx	r8
 8004b9a:	3001      	adds	r0, #1
 8004b9c:	d01e      	beq.n	8004bdc <_printf_common+0xa4>
 8004b9e:	6823      	ldr	r3, [r4, #0]
 8004ba0:	68e5      	ldr	r5, [r4, #12]
 8004ba2:	6832      	ldr	r2, [r6, #0]
 8004ba4:	f003 0306 	and.w	r3, r3, #6
 8004ba8:	2b04      	cmp	r3, #4
 8004baa:	bf08      	it	eq
 8004bac:	1aad      	subeq	r5, r5, r2
 8004bae:	68a3      	ldr	r3, [r4, #8]
 8004bb0:	6922      	ldr	r2, [r4, #16]
 8004bb2:	bf0c      	ite	eq
 8004bb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bb8:	2500      	movne	r5, #0
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	bfc4      	itt	gt
 8004bbe:	1a9b      	subgt	r3, r3, r2
 8004bc0:	18ed      	addgt	r5, r5, r3
 8004bc2:	2600      	movs	r6, #0
 8004bc4:	341a      	adds	r4, #26
 8004bc6:	42b5      	cmp	r5, r6
 8004bc8:	d11a      	bne.n	8004c00 <_printf_common+0xc8>
 8004bca:	2000      	movs	r0, #0
 8004bcc:	e008      	b.n	8004be0 <_printf_common+0xa8>
 8004bce:	2301      	movs	r3, #1
 8004bd0:	4652      	mov	r2, sl
 8004bd2:	4649      	mov	r1, r9
 8004bd4:	4638      	mov	r0, r7
 8004bd6:	47c0      	blx	r8
 8004bd8:	3001      	adds	r0, #1
 8004bda:	d103      	bne.n	8004be4 <_printf_common+0xac>
 8004bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8004be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004be4:	3501      	adds	r5, #1
 8004be6:	e7c6      	b.n	8004b76 <_printf_common+0x3e>
 8004be8:	18e1      	adds	r1, r4, r3
 8004bea:	1c5a      	adds	r2, r3, #1
 8004bec:	2030      	movs	r0, #48	; 0x30
 8004bee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bf2:	4422      	add	r2, r4
 8004bf4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bf8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bfc:	3302      	adds	r3, #2
 8004bfe:	e7c7      	b.n	8004b90 <_printf_common+0x58>
 8004c00:	2301      	movs	r3, #1
 8004c02:	4622      	mov	r2, r4
 8004c04:	4649      	mov	r1, r9
 8004c06:	4638      	mov	r0, r7
 8004c08:	47c0      	blx	r8
 8004c0a:	3001      	adds	r0, #1
 8004c0c:	d0e6      	beq.n	8004bdc <_printf_common+0xa4>
 8004c0e:	3601      	adds	r6, #1
 8004c10:	e7d9      	b.n	8004bc6 <_printf_common+0x8e>
	...

08004c14 <_printf_i>:
 8004c14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c18:	7e0f      	ldrb	r7, [r1, #24]
 8004c1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c1c:	2f78      	cmp	r7, #120	; 0x78
 8004c1e:	4691      	mov	r9, r2
 8004c20:	4680      	mov	r8, r0
 8004c22:	460c      	mov	r4, r1
 8004c24:	469a      	mov	sl, r3
 8004c26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c2a:	d807      	bhi.n	8004c3c <_printf_i+0x28>
 8004c2c:	2f62      	cmp	r7, #98	; 0x62
 8004c2e:	d80a      	bhi.n	8004c46 <_printf_i+0x32>
 8004c30:	2f00      	cmp	r7, #0
 8004c32:	f000 80d8 	beq.w	8004de6 <_printf_i+0x1d2>
 8004c36:	2f58      	cmp	r7, #88	; 0x58
 8004c38:	f000 80a3 	beq.w	8004d82 <_printf_i+0x16e>
 8004c3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c44:	e03a      	b.n	8004cbc <_printf_i+0xa8>
 8004c46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c4a:	2b15      	cmp	r3, #21
 8004c4c:	d8f6      	bhi.n	8004c3c <_printf_i+0x28>
 8004c4e:	a101      	add	r1, pc, #4	; (adr r1, 8004c54 <_printf_i+0x40>)
 8004c50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c54:	08004cad 	.word	0x08004cad
 8004c58:	08004cc1 	.word	0x08004cc1
 8004c5c:	08004c3d 	.word	0x08004c3d
 8004c60:	08004c3d 	.word	0x08004c3d
 8004c64:	08004c3d 	.word	0x08004c3d
 8004c68:	08004c3d 	.word	0x08004c3d
 8004c6c:	08004cc1 	.word	0x08004cc1
 8004c70:	08004c3d 	.word	0x08004c3d
 8004c74:	08004c3d 	.word	0x08004c3d
 8004c78:	08004c3d 	.word	0x08004c3d
 8004c7c:	08004c3d 	.word	0x08004c3d
 8004c80:	08004dcd 	.word	0x08004dcd
 8004c84:	08004cf1 	.word	0x08004cf1
 8004c88:	08004daf 	.word	0x08004daf
 8004c8c:	08004c3d 	.word	0x08004c3d
 8004c90:	08004c3d 	.word	0x08004c3d
 8004c94:	08004def 	.word	0x08004def
 8004c98:	08004c3d 	.word	0x08004c3d
 8004c9c:	08004cf1 	.word	0x08004cf1
 8004ca0:	08004c3d 	.word	0x08004c3d
 8004ca4:	08004c3d 	.word	0x08004c3d
 8004ca8:	08004db7 	.word	0x08004db7
 8004cac:	682b      	ldr	r3, [r5, #0]
 8004cae:	1d1a      	adds	r2, r3, #4
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	602a      	str	r2, [r5, #0]
 8004cb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e0a3      	b.n	8004e08 <_printf_i+0x1f4>
 8004cc0:	6820      	ldr	r0, [r4, #0]
 8004cc2:	6829      	ldr	r1, [r5, #0]
 8004cc4:	0606      	lsls	r6, r0, #24
 8004cc6:	f101 0304 	add.w	r3, r1, #4
 8004cca:	d50a      	bpl.n	8004ce2 <_printf_i+0xce>
 8004ccc:	680e      	ldr	r6, [r1, #0]
 8004cce:	602b      	str	r3, [r5, #0]
 8004cd0:	2e00      	cmp	r6, #0
 8004cd2:	da03      	bge.n	8004cdc <_printf_i+0xc8>
 8004cd4:	232d      	movs	r3, #45	; 0x2d
 8004cd6:	4276      	negs	r6, r6
 8004cd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cdc:	485e      	ldr	r0, [pc, #376]	; (8004e58 <_printf_i+0x244>)
 8004cde:	230a      	movs	r3, #10
 8004ce0:	e019      	b.n	8004d16 <_printf_i+0x102>
 8004ce2:	680e      	ldr	r6, [r1, #0]
 8004ce4:	602b      	str	r3, [r5, #0]
 8004ce6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004cea:	bf18      	it	ne
 8004cec:	b236      	sxthne	r6, r6
 8004cee:	e7ef      	b.n	8004cd0 <_printf_i+0xbc>
 8004cf0:	682b      	ldr	r3, [r5, #0]
 8004cf2:	6820      	ldr	r0, [r4, #0]
 8004cf4:	1d19      	adds	r1, r3, #4
 8004cf6:	6029      	str	r1, [r5, #0]
 8004cf8:	0601      	lsls	r1, r0, #24
 8004cfa:	d501      	bpl.n	8004d00 <_printf_i+0xec>
 8004cfc:	681e      	ldr	r6, [r3, #0]
 8004cfe:	e002      	b.n	8004d06 <_printf_i+0xf2>
 8004d00:	0646      	lsls	r6, r0, #25
 8004d02:	d5fb      	bpl.n	8004cfc <_printf_i+0xe8>
 8004d04:	881e      	ldrh	r6, [r3, #0]
 8004d06:	4854      	ldr	r0, [pc, #336]	; (8004e58 <_printf_i+0x244>)
 8004d08:	2f6f      	cmp	r7, #111	; 0x6f
 8004d0a:	bf0c      	ite	eq
 8004d0c:	2308      	moveq	r3, #8
 8004d0e:	230a      	movne	r3, #10
 8004d10:	2100      	movs	r1, #0
 8004d12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d16:	6865      	ldr	r5, [r4, #4]
 8004d18:	60a5      	str	r5, [r4, #8]
 8004d1a:	2d00      	cmp	r5, #0
 8004d1c:	bfa2      	ittt	ge
 8004d1e:	6821      	ldrge	r1, [r4, #0]
 8004d20:	f021 0104 	bicge.w	r1, r1, #4
 8004d24:	6021      	strge	r1, [r4, #0]
 8004d26:	b90e      	cbnz	r6, 8004d2c <_printf_i+0x118>
 8004d28:	2d00      	cmp	r5, #0
 8004d2a:	d04d      	beq.n	8004dc8 <_printf_i+0x1b4>
 8004d2c:	4615      	mov	r5, r2
 8004d2e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d32:	fb03 6711 	mls	r7, r3, r1, r6
 8004d36:	5dc7      	ldrb	r7, [r0, r7]
 8004d38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d3c:	4637      	mov	r7, r6
 8004d3e:	42bb      	cmp	r3, r7
 8004d40:	460e      	mov	r6, r1
 8004d42:	d9f4      	bls.n	8004d2e <_printf_i+0x11a>
 8004d44:	2b08      	cmp	r3, #8
 8004d46:	d10b      	bne.n	8004d60 <_printf_i+0x14c>
 8004d48:	6823      	ldr	r3, [r4, #0]
 8004d4a:	07de      	lsls	r6, r3, #31
 8004d4c:	d508      	bpl.n	8004d60 <_printf_i+0x14c>
 8004d4e:	6923      	ldr	r3, [r4, #16]
 8004d50:	6861      	ldr	r1, [r4, #4]
 8004d52:	4299      	cmp	r1, r3
 8004d54:	bfde      	ittt	le
 8004d56:	2330      	movle	r3, #48	; 0x30
 8004d58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d60:	1b52      	subs	r2, r2, r5
 8004d62:	6122      	str	r2, [r4, #16]
 8004d64:	f8cd a000 	str.w	sl, [sp]
 8004d68:	464b      	mov	r3, r9
 8004d6a:	aa03      	add	r2, sp, #12
 8004d6c:	4621      	mov	r1, r4
 8004d6e:	4640      	mov	r0, r8
 8004d70:	f7ff fee2 	bl	8004b38 <_printf_common>
 8004d74:	3001      	adds	r0, #1
 8004d76:	d14c      	bne.n	8004e12 <_printf_i+0x1fe>
 8004d78:	f04f 30ff 	mov.w	r0, #4294967295
 8004d7c:	b004      	add	sp, #16
 8004d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d82:	4835      	ldr	r0, [pc, #212]	; (8004e58 <_printf_i+0x244>)
 8004d84:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004d88:	6829      	ldr	r1, [r5, #0]
 8004d8a:	6823      	ldr	r3, [r4, #0]
 8004d8c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d90:	6029      	str	r1, [r5, #0]
 8004d92:	061d      	lsls	r5, r3, #24
 8004d94:	d514      	bpl.n	8004dc0 <_printf_i+0x1ac>
 8004d96:	07df      	lsls	r7, r3, #31
 8004d98:	bf44      	itt	mi
 8004d9a:	f043 0320 	orrmi.w	r3, r3, #32
 8004d9e:	6023      	strmi	r3, [r4, #0]
 8004da0:	b91e      	cbnz	r6, 8004daa <_printf_i+0x196>
 8004da2:	6823      	ldr	r3, [r4, #0]
 8004da4:	f023 0320 	bic.w	r3, r3, #32
 8004da8:	6023      	str	r3, [r4, #0]
 8004daa:	2310      	movs	r3, #16
 8004dac:	e7b0      	b.n	8004d10 <_printf_i+0xfc>
 8004dae:	6823      	ldr	r3, [r4, #0]
 8004db0:	f043 0320 	orr.w	r3, r3, #32
 8004db4:	6023      	str	r3, [r4, #0]
 8004db6:	2378      	movs	r3, #120	; 0x78
 8004db8:	4828      	ldr	r0, [pc, #160]	; (8004e5c <_printf_i+0x248>)
 8004dba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004dbe:	e7e3      	b.n	8004d88 <_printf_i+0x174>
 8004dc0:	0659      	lsls	r1, r3, #25
 8004dc2:	bf48      	it	mi
 8004dc4:	b2b6      	uxthmi	r6, r6
 8004dc6:	e7e6      	b.n	8004d96 <_printf_i+0x182>
 8004dc8:	4615      	mov	r5, r2
 8004dca:	e7bb      	b.n	8004d44 <_printf_i+0x130>
 8004dcc:	682b      	ldr	r3, [r5, #0]
 8004dce:	6826      	ldr	r6, [r4, #0]
 8004dd0:	6961      	ldr	r1, [r4, #20]
 8004dd2:	1d18      	adds	r0, r3, #4
 8004dd4:	6028      	str	r0, [r5, #0]
 8004dd6:	0635      	lsls	r5, r6, #24
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	d501      	bpl.n	8004de0 <_printf_i+0x1cc>
 8004ddc:	6019      	str	r1, [r3, #0]
 8004dde:	e002      	b.n	8004de6 <_printf_i+0x1d2>
 8004de0:	0670      	lsls	r0, r6, #25
 8004de2:	d5fb      	bpl.n	8004ddc <_printf_i+0x1c8>
 8004de4:	8019      	strh	r1, [r3, #0]
 8004de6:	2300      	movs	r3, #0
 8004de8:	6123      	str	r3, [r4, #16]
 8004dea:	4615      	mov	r5, r2
 8004dec:	e7ba      	b.n	8004d64 <_printf_i+0x150>
 8004dee:	682b      	ldr	r3, [r5, #0]
 8004df0:	1d1a      	adds	r2, r3, #4
 8004df2:	602a      	str	r2, [r5, #0]
 8004df4:	681d      	ldr	r5, [r3, #0]
 8004df6:	6862      	ldr	r2, [r4, #4]
 8004df8:	2100      	movs	r1, #0
 8004dfa:	4628      	mov	r0, r5
 8004dfc:	f7fb f9e8 	bl	80001d0 <memchr>
 8004e00:	b108      	cbz	r0, 8004e06 <_printf_i+0x1f2>
 8004e02:	1b40      	subs	r0, r0, r5
 8004e04:	6060      	str	r0, [r4, #4]
 8004e06:	6863      	ldr	r3, [r4, #4]
 8004e08:	6123      	str	r3, [r4, #16]
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e10:	e7a8      	b.n	8004d64 <_printf_i+0x150>
 8004e12:	6923      	ldr	r3, [r4, #16]
 8004e14:	462a      	mov	r2, r5
 8004e16:	4649      	mov	r1, r9
 8004e18:	4640      	mov	r0, r8
 8004e1a:	47d0      	blx	sl
 8004e1c:	3001      	adds	r0, #1
 8004e1e:	d0ab      	beq.n	8004d78 <_printf_i+0x164>
 8004e20:	6823      	ldr	r3, [r4, #0]
 8004e22:	079b      	lsls	r3, r3, #30
 8004e24:	d413      	bmi.n	8004e4e <_printf_i+0x23a>
 8004e26:	68e0      	ldr	r0, [r4, #12]
 8004e28:	9b03      	ldr	r3, [sp, #12]
 8004e2a:	4298      	cmp	r0, r3
 8004e2c:	bfb8      	it	lt
 8004e2e:	4618      	movlt	r0, r3
 8004e30:	e7a4      	b.n	8004d7c <_printf_i+0x168>
 8004e32:	2301      	movs	r3, #1
 8004e34:	4632      	mov	r2, r6
 8004e36:	4649      	mov	r1, r9
 8004e38:	4640      	mov	r0, r8
 8004e3a:	47d0      	blx	sl
 8004e3c:	3001      	adds	r0, #1
 8004e3e:	d09b      	beq.n	8004d78 <_printf_i+0x164>
 8004e40:	3501      	adds	r5, #1
 8004e42:	68e3      	ldr	r3, [r4, #12]
 8004e44:	9903      	ldr	r1, [sp, #12]
 8004e46:	1a5b      	subs	r3, r3, r1
 8004e48:	42ab      	cmp	r3, r5
 8004e4a:	dcf2      	bgt.n	8004e32 <_printf_i+0x21e>
 8004e4c:	e7eb      	b.n	8004e26 <_printf_i+0x212>
 8004e4e:	2500      	movs	r5, #0
 8004e50:	f104 0619 	add.w	r6, r4, #25
 8004e54:	e7f5      	b.n	8004e42 <_printf_i+0x22e>
 8004e56:	bf00      	nop
 8004e58:	08005245 	.word	0x08005245
 8004e5c:	08005256 	.word	0x08005256

08004e60 <_sbrk_r>:
 8004e60:	b538      	push	{r3, r4, r5, lr}
 8004e62:	4d06      	ldr	r5, [pc, #24]	; (8004e7c <_sbrk_r+0x1c>)
 8004e64:	2300      	movs	r3, #0
 8004e66:	4604      	mov	r4, r0
 8004e68:	4608      	mov	r0, r1
 8004e6a:	602b      	str	r3, [r5, #0]
 8004e6c:	f7fb ff96 	bl	8000d9c <_sbrk>
 8004e70:	1c43      	adds	r3, r0, #1
 8004e72:	d102      	bne.n	8004e7a <_sbrk_r+0x1a>
 8004e74:	682b      	ldr	r3, [r5, #0]
 8004e76:	b103      	cbz	r3, 8004e7a <_sbrk_r+0x1a>
 8004e78:	6023      	str	r3, [r4, #0]
 8004e7a:	bd38      	pop	{r3, r4, r5, pc}
 8004e7c:	200001b0 	.word	0x200001b0

08004e80 <__sread>:
 8004e80:	b510      	push	{r4, lr}
 8004e82:	460c      	mov	r4, r1
 8004e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e88:	f000 f8a0 	bl	8004fcc <_read_r>
 8004e8c:	2800      	cmp	r0, #0
 8004e8e:	bfab      	itete	ge
 8004e90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004e92:	89a3      	ldrhlt	r3, [r4, #12]
 8004e94:	181b      	addge	r3, r3, r0
 8004e96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e9a:	bfac      	ite	ge
 8004e9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e9e:	81a3      	strhlt	r3, [r4, #12]
 8004ea0:	bd10      	pop	{r4, pc}

08004ea2 <__swrite>:
 8004ea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ea6:	461f      	mov	r7, r3
 8004ea8:	898b      	ldrh	r3, [r1, #12]
 8004eaa:	05db      	lsls	r3, r3, #23
 8004eac:	4605      	mov	r5, r0
 8004eae:	460c      	mov	r4, r1
 8004eb0:	4616      	mov	r6, r2
 8004eb2:	d505      	bpl.n	8004ec0 <__swrite+0x1e>
 8004eb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eb8:	2302      	movs	r3, #2
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f000 f868 	bl	8004f90 <_lseek_r>
 8004ec0:	89a3      	ldrh	r3, [r4, #12]
 8004ec2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ec6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004eca:	81a3      	strh	r3, [r4, #12]
 8004ecc:	4632      	mov	r2, r6
 8004ece:	463b      	mov	r3, r7
 8004ed0:	4628      	mov	r0, r5
 8004ed2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ed6:	f000 b817 	b.w	8004f08 <_write_r>

08004eda <__sseek>:
 8004eda:	b510      	push	{r4, lr}
 8004edc:	460c      	mov	r4, r1
 8004ede:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ee2:	f000 f855 	bl	8004f90 <_lseek_r>
 8004ee6:	1c43      	adds	r3, r0, #1
 8004ee8:	89a3      	ldrh	r3, [r4, #12]
 8004eea:	bf15      	itete	ne
 8004eec:	6560      	strne	r0, [r4, #84]	; 0x54
 8004eee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004ef2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004ef6:	81a3      	strheq	r3, [r4, #12]
 8004ef8:	bf18      	it	ne
 8004efa:	81a3      	strhne	r3, [r4, #12]
 8004efc:	bd10      	pop	{r4, pc}

08004efe <__sclose>:
 8004efe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f02:	f000 b813 	b.w	8004f2c <_close_r>
	...

08004f08 <_write_r>:
 8004f08:	b538      	push	{r3, r4, r5, lr}
 8004f0a:	4d07      	ldr	r5, [pc, #28]	; (8004f28 <_write_r+0x20>)
 8004f0c:	4604      	mov	r4, r0
 8004f0e:	4608      	mov	r0, r1
 8004f10:	4611      	mov	r1, r2
 8004f12:	2200      	movs	r2, #0
 8004f14:	602a      	str	r2, [r5, #0]
 8004f16:	461a      	mov	r2, r3
 8004f18:	f7fb feef 	bl	8000cfa <_write>
 8004f1c:	1c43      	adds	r3, r0, #1
 8004f1e:	d102      	bne.n	8004f26 <_write_r+0x1e>
 8004f20:	682b      	ldr	r3, [r5, #0]
 8004f22:	b103      	cbz	r3, 8004f26 <_write_r+0x1e>
 8004f24:	6023      	str	r3, [r4, #0]
 8004f26:	bd38      	pop	{r3, r4, r5, pc}
 8004f28:	200001b0 	.word	0x200001b0

08004f2c <_close_r>:
 8004f2c:	b538      	push	{r3, r4, r5, lr}
 8004f2e:	4d06      	ldr	r5, [pc, #24]	; (8004f48 <_close_r+0x1c>)
 8004f30:	2300      	movs	r3, #0
 8004f32:	4604      	mov	r4, r0
 8004f34:	4608      	mov	r0, r1
 8004f36:	602b      	str	r3, [r5, #0]
 8004f38:	f7fb fefb 	bl	8000d32 <_close>
 8004f3c:	1c43      	adds	r3, r0, #1
 8004f3e:	d102      	bne.n	8004f46 <_close_r+0x1a>
 8004f40:	682b      	ldr	r3, [r5, #0]
 8004f42:	b103      	cbz	r3, 8004f46 <_close_r+0x1a>
 8004f44:	6023      	str	r3, [r4, #0]
 8004f46:	bd38      	pop	{r3, r4, r5, pc}
 8004f48:	200001b0 	.word	0x200001b0

08004f4c <_fstat_r>:
 8004f4c:	b538      	push	{r3, r4, r5, lr}
 8004f4e:	4d07      	ldr	r5, [pc, #28]	; (8004f6c <_fstat_r+0x20>)
 8004f50:	2300      	movs	r3, #0
 8004f52:	4604      	mov	r4, r0
 8004f54:	4608      	mov	r0, r1
 8004f56:	4611      	mov	r1, r2
 8004f58:	602b      	str	r3, [r5, #0]
 8004f5a:	f7fb fef6 	bl	8000d4a <_fstat>
 8004f5e:	1c43      	adds	r3, r0, #1
 8004f60:	d102      	bne.n	8004f68 <_fstat_r+0x1c>
 8004f62:	682b      	ldr	r3, [r5, #0]
 8004f64:	b103      	cbz	r3, 8004f68 <_fstat_r+0x1c>
 8004f66:	6023      	str	r3, [r4, #0]
 8004f68:	bd38      	pop	{r3, r4, r5, pc}
 8004f6a:	bf00      	nop
 8004f6c:	200001b0 	.word	0x200001b0

08004f70 <_isatty_r>:
 8004f70:	b538      	push	{r3, r4, r5, lr}
 8004f72:	4d06      	ldr	r5, [pc, #24]	; (8004f8c <_isatty_r+0x1c>)
 8004f74:	2300      	movs	r3, #0
 8004f76:	4604      	mov	r4, r0
 8004f78:	4608      	mov	r0, r1
 8004f7a:	602b      	str	r3, [r5, #0]
 8004f7c:	f7fb fef5 	bl	8000d6a <_isatty>
 8004f80:	1c43      	adds	r3, r0, #1
 8004f82:	d102      	bne.n	8004f8a <_isatty_r+0x1a>
 8004f84:	682b      	ldr	r3, [r5, #0]
 8004f86:	b103      	cbz	r3, 8004f8a <_isatty_r+0x1a>
 8004f88:	6023      	str	r3, [r4, #0]
 8004f8a:	bd38      	pop	{r3, r4, r5, pc}
 8004f8c:	200001b0 	.word	0x200001b0

08004f90 <_lseek_r>:
 8004f90:	b538      	push	{r3, r4, r5, lr}
 8004f92:	4d07      	ldr	r5, [pc, #28]	; (8004fb0 <_lseek_r+0x20>)
 8004f94:	4604      	mov	r4, r0
 8004f96:	4608      	mov	r0, r1
 8004f98:	4611      	mov	r1, r2
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	602a      	str	r2, [r5, #0]
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	f7fb feee 	bl	8000d80 <_lseek>
 8004fa4:	1c43      	adds	r3, r0, #1
 8004fa6:	d102      	bne.n	8004fae <_lseek_r+0x1e>
 8004fa8:	682b      	ldr	r3, [r5, #0]
 8004faa:	b103      	cbz	r3, 8004fae <_lseek_r+0x1e>
 8004fac:	6023      	str	r3, [r4, #0]
 8004fae:	bd38      	pop	{r3, r4, r5, pc}
 8004fb0:	200001b0 	.word	0x200001b0

08004fb4 <__malloc_lock>:
 8004fb4:	4801      	ldr	r0, [pc, #4]	; (8004fbc <__malloc_lock+0x8>)
 8004fb6:	f7ff bb1d 	b.w	80045f4 <__retarget_lock_acquire_recursive>
 8004fba:	bf00      	nop
 8004fbc:	200001a4 	.word	0x200001a4

08004fc0 <__malloc_unlock>:
 8004fc0:	4801      	ldr	r0, [pc, #4]	; (8004fc8 <__malloc_unlock+0x8>)
 8004fc2:	f7ff bb18 	b.w	80045f6 <__retarget_lock_release_recursive>
 8004fc6:	bf00      	nop
 8004fc8:	200001a4 	.word	0x200001a4

08004fcc <_read_r>:
 8004fcc:	b538      	push	{r3, r4, r5, lr}
 8004fce:	4d07      	ldr	r5, [pc, #28]	; (8004fec <_read_r+0x20>)
 8004fd0:	4604      	mov	r4, r0
 8004fd2:	4608      	mov	r0, r1
 8004fd4:	4611      	mov	r1, r2
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	602a      	str	r2, [r5, #0]
 8004fda:	461a      	mov	r2, r3
 8004fdc:	f7fb fe70 	bl	8000cc0 <_read>
 8004fe0:	1c43      	adds	r3, r0, #1
 8004fe2:	d102      	bne.n	8004fea <_read_r+0x1e>
 8004fe4:	682b      	ldr	r3, [r5, #0]
 8004fe6:	b103      	cbz	r3, 8004fea <_read_r+0x1e>
 8004fe8:	6023      	str	r3, [r4, #0]
 8004fea:	bd38      	pop	{r3, r4, r5, pc}
 8004fec:	200001b0 	.word	0x200001b0

08004ff0 <_init>:
 8004ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ff2:	bf00      	nop
 8004ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ff6:	bc08      	pop	{r3}
 8004ff8:	469e      	mov	lr, r3
 8004ffa:	4770      	bx	lr

08004ffc <_fini>:
 8004ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ffe:	bf00      	nop
 8005000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005002:	bc08      	pop	{r3}
 8005004:	469e      	mov	lr, r3
 8005006:	4770      	bx	lr
