/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2022 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stm32f4xx.h>
#include <stdio.h>
#include "defines.h"
#include "delay.h"
/*Defines -------------------------------------------------------------------*/

#define LED				D, 12
#define SW				A, 0

/*Typedef ------------------------------------------------------------------*/
typedef struct{
	uint8_t led_state;
	uint32_t ticks;
	uint32_t blinktime;
}Led_uml_t;
typedef enum{
	LED_STATE_INIT = 0,
	LED_STATE_WAIT,
	LED_STATE_BLINK,
	LED_STATE_STOP
}LED_State_t;

typedef enum{
	SW_STATE_INIT = 0,
	SW_STATE_LOW,
	SW_STATE_HIGH,
	SW_STATE_DEBOUNCE
}SW_State_t;

typedef struct{
	SW_State_t state;
	uint32_t debouncecount;
}SW_Data_t;
/*Global variables ---------------------------------------------------------*/
Led_uml_t led1 = {0};
SW_Data_t sw1 = {0};

/****************************************************************************/
/**
 * @brief configura el PLL a 168MHz
 */
void PLL_Config(void);

/**
 * @brief funcion que configura pines como entrada y salida
 */
void GPIO_Config(void);

void LED_UML_function(void);


void SW_UML_funtion(void);

int main(void)
{
	PLL_Config();
	printf("Ejemplo de manejo de pines\r\n");
	printf("%s %s\r\n", __DATE__, __TIME__);
	GPIO_Config();
	//manejo se secciones criticas de codigo
	__disable_irq();
	SysTick_Init();
	__enable_irq();
    /* Loop forever */
	for(;;){
		LED_UML_function();
		SW_UML_funtion();
	}
}

void PLL_Config(void){
	//1. apagar el pll y esperar que la bandera se limpie
	RCC->CR &=~ (RCC_CR_PLLON);  //RCC->CR &=~ (1<<24);
	while(RCC->CR & RCC_CR_PLLRDY);
	//2. configurar los parametros del pll
	//->Encender el HSE
	RCC->CR |= RCC_CR_HSEON;
	while(!(RCC->CR & RCC_CR_HSERDY));
	//->HSE como fuente para el PLL
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC;			//->HSE -> PLL
	/**
	 * 8MHZ -> / M <1-2MH> -> * N <50-432MH>
	 * Sysclk = ((8MHz/8) * 336) / 2 = 168MHz
	 */
	//->M
	RCC->PLLCFGR &=~ RCC_PLLCFGR_PLLM;
	RCC->PLLCFGR |= 8U<<RCC_PLLCFGR_PLLM_Pos;
	//->N
	RCC->PLLCFGR &=~ RCC_PLLCFGR_PLLN;
	RCC->PLLCFGR |= 336<<RCC_PLLCFGR_PLLN_Pos;
	//->P
	RCC->PLLCFGR &=~ RCC_PLLCFGR_PLLP;
	//3. configurar la latencia de la flash
	FLASH->ACR |= FLASH_ACR_PRFTEN | FLASH_ACR_ICEN | FLASH_ACR_DCEN;
	FLASH->ACR |= FLASH_ACR_LATENCY_5WS;
	//->encender el PLL
	RCC->CR |= RCC_CR_PLLON;
	while(!(RCC->CR & RCC_CR_PLLRDY));
	//4. seleccionar el PLL como fuente de reloj
	//->Configurar los prescalers de los buses APB1 y ABP2
	//->APB1
	RCC->CFGR &=~ RCC_CFGR_PPRE1;
	RCC->CFGR |= 0x5u<<RCC_CFGR_PPRE1_Pos;
	//->APB2
	RCC->CFGR &=~ RCC_CFGR_PPRE2;
	RCC->CFGR |= RCC_CFGR_PPRE2_2;
	//->Seleccionar el PLL como fuente de reloj del sistema
	RCC->CFGR |= RCC_CFGR_SW_PLL;
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL));

	SystemCoreClockUpdate();
	return;
}
/***********************************************************************/
void GPIO_Config(void){
	//HABILITAR EL RELOJ
	RCC->AHB1ENR |= GPIOX_CLOCK(LED) | GPIOX_CLOCK(SW);
	GPIOX_MODER(MODE_OUT, LED);
	GPIOX_MODER(MODE_DIGITAL_INPUT, SW);
	GPIOX_PUPDR(MODE_PU_NONE, SW);
}

void LED_UML_function(void){
	switch(led1.led_state){
	case LED_STATE_INIT:
		led1.ticks = GetTick();
		led1.led_state = LED_STATE_BLINK;
		led1.blinktime = 50;
		break;
	case LED_STATE_WAIT:
		if((GetTick() - led1.ticks)>= led1.blinktime){
			led1.ticks = GetTick();
			led1.led_state = LED_STATE_BLINK;
		}
		break;
	case LED_STATE_BLINK:
		GPIOX_ODR(LED) ^= 1;
		led1.led_state = LED_STATE_WAIT;
		break;
	}
	return;
}

void SW_UML_funtion(void){
//	switch(sw1.state){
//	case SW_STATE_INIT:
//
//	}
}


/**************************************************/

int __io_putchar(int ch){
	ITM_SendChar(ch);
	return ch;
}
